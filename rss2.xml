<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>四月黎明 | 棱境的个人博客站点</title>
    <link>https://superlovelace.top/</link>
    
    <atom:link href="https://superlovelace.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录日常学习内容，分享问题解决方法。主要内容包括Java、Python、C++、爬虫和数据结构等相关知识。其中，技术框架包括Java框架Spring、SpringBoot、SpringMVC和Mybatis；Python框架Django、Flask等。此外还有服务器搭建、项目部署，静态博客的搭建等知识总结，不定时更新中...</description>
    <pubDate>Fri, 28 Feb 2025 17:39:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>数据库分区</title>
      <link>https://superlovelace.top/2025/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</link>
      <guid>https://superlovelace.top/2025/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</guid>
      <pubDate>Fri, 28 Feb 2025 17:30:35 GMT</pubDate>
      
      <description>以mysql为例，介绍数据库分区。包括概念、基本操作和注意事项等。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="数据库分区">数据库分区</h2><p>在 <code>MySQL</code> 中，<strong>分区表</strong>是一种将表数据按照某种规则划分为多个独立部分的技术。分区可以显著提高查询性能、简化数据管理并优化存储效率。</p><blockquote><p>分区不改变原表数据，仍然是一张表，不同与分库分表。</p></blockquote><h3 id="一、分区表的基本概念">一、分区表的基本概念</h3><ul><li><strong>分区（Partition）</strong>：将表数据划分为多个逻辑部分，每个分区可以单独管理和存储。</li><li><strong>分区键（Partition Key）</strong>：用于决定数据如何分区的列或表达式。</li><li><strong>分区类型</strong>：<code>MySQL</code> 支持多种分区类型，包括 <strong>范围分区（RANGE）</strong>、<strong>列表分区（LIST）</strong>、<strong>哈希分区（HASH）</strong> 和 <strong>键分区（KEY）</strong>。</li></ul><h3 id="二、创建分区表的语法">二、创建分区表的语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name (<br>    column1 datatype,<br>    column2 datatype,<br>    ...<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> partition_type (partition_key) (<br>    <span class="hljs-keyword">PARTITION</span> partition_name1 <span class="hljs-keyword">VALUES</span> LESS THAN (value1),<br>    <span class="hljs-keyword">PARTITION</span> partition_name2 <span class="hljs-keyword">VALUES</span> LESS THAN (value2),<br>    ...<br>);<br></code></pre></td></tr></table></figure><h3 id="三、分区类型及示例">三、分区类型及示例</h3><h4 id="1-范围分区（RANGE-Partitioning）">(1) 范围分区（RANGE Partitioning）</h4><p>按某个范围值进行分区，常用于时间序列数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders (<br>    order_id <span class="hljs-type">INT</span>,<br>    order_date <span class="hljs-type">DATE</span>,<br>    amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (order_id, order_date)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span> (<span class="hljs-keyword">YEAR</span>(order_date)) (<br>    <span class="hljs-keyword">PARTITION</span> p2021 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2022</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2022 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2023</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2023 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2024</span>)<br>);<br></code></pre></td></tr></table></figure><ul><li>数据会根据 <code>order_date</code> 的年份分配到不同的分区。</li></ul><h4 id="2-列表分区（LIST-Partitioning）">(2) 列表分区（LIST Partitioning）</h4><p>按某个离散值列表进行分区。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sales (<br>    sale_id <span class="hljs-type">INT</span>,<br>    region <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (sale_id, region)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> LIST (region) (<br>    <span class="hljs-keyword">PARTITION</span> p_north <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Tianjin&#x27;</span>),<br>    <span class="hljs-keyword">PARTITION</span> p_south <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Guangzhou&#x27;</span>, <span class="hljs-string">&#x27;Shenzhen&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><ul><li>数据会根据 <code>region</code> 的值分配到不同的分区。</li></ul><h4 id="3-哈希分区（HASH-Partitioning）">(3) 哈希分区（HASH Partitioning）</h4><p>通过哈希函数对分区键进行计算，均匀分布数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    user_id <span class="hljs-type">INT</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (user_id)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(user_id)<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><ul><li>数据会根据 <code>user_id</code> 的哈希值分配到 4 个分区中。</li></ul><h4 id="4-键分区（KEY-Partitioning）">(4) 键分区（KEY Partitioning）</h4><p>类似于哈希分区，但使用 <code>MySQL</code> 内部的哈希函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> logs (<br>    log_id <span class="hljs-type">INT</span>,<br>    log_message TEXT,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (log_id)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> KEY(log_id)<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h3 id="四、分区表的注意事项">四、分区表的注意事项</h3><h4 id="1-分区键的选择">(1) <strong>分区键的选择</strong></h4><ul><li>分区键必须是表的主键或唯一键的一部分。</li><li>如果分区键选择不当，可能导致数据分布不均匀，影响查询性能。</li></ul><h4 id="2-分区数量">(2) <strong>分区数量</strong></h4><ul><li>分区数量过多可能导致元数据管理开销增加，影响性能。</li><li>分区数量过少可能导致分区内的数据量过大，无法达到分区的效果。</li></ul><h4 id="3-分区规则">(3) <strong>分区规则</strong></h4><ul><li>分区规则必须与业务需求匹配，例如按时间分区适合时间序列数据。</li><li>如果分区规则与数据分布不匹配，可能导致查询性能下降。</li></ul><h4 id="4-分区维护">(4) <strong>分区维护</strong></h4><ul><li>分区表的数据管理（如备份、恢复、删除）需要针对每个分区进行操作。</li><li>例如，删除历史数据时，可以直接删除整个分区。</li></ul><h4 id="5-查询优化">(5) <strong>查询优化</strong></h4><ul><li>查询条件应尽量包含分区键，以便利用分区裁剪（Partition Pruning）优化性能。</li><li>如果查询条件不包含分区键，可能会导致全表扫描。</li></ul><h4 id="6-分区表的限制">(6) <strong>分区表的限制</strong></h4><ul><li>分区表不支持某些 <code>MySQL</code> 功能，如外键、全文索引等。</li><li>分区表的存储引擎必须是 <code>InnoDB</code> 或 <code>MyISAM</code>。</li></ul><h3 id="五、分区表的管理">五、分区表的管理</h3><h4 id="1-添加分区">(1) 添加分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PARTITION</span> (<br>    <span class="hljs-keyword">PARTITION</span> p2024 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2025</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="2-删除分区">(2) 删除分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PARTITION</span> p2021;<br></code></pre></td></tr></table></figure><h4 id="3-合并分区">(3) 合并分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders REORGANIZE <span class="hljs-keyword">PARTITION</span> p2021, p2022 <span class="hljs-keyword">INTO</span> (<br>    <span class="hljs-keyword">PARTITION</span> p2021_2022 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2023</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="4-查看分区信息">(4) 查看分区信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.PARTITIONS<br><span class="hljs-keyword">WHERE</span> TABLE_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;orders&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="5-拆分分区">(5) 拆分分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将other分区数据，拆分出p2019年和p2022年的分区和兜底分区p_others</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders REORGANIZE <span class="hljs-keyword">PARTITION</span> p_others <span class="hljs-keyword">INTO</span> (<br>    <span class="hljs-keyword">PARTITION</span> p2019 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2020</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2022 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2023</span>),<br>    <span class="hljs-keyword">PARTITION</span> p_others <span class="hljs-keyword">VALUES</span> LESS THAN MAXVALUE<br>);<br></code></pre></td></tr></table></figure><h3 id="六、分区表的适用场景">六、分区表的适用场景</h3><ul><li><strong>时间序列数据</strong>：例如按日期分区的日志表、订单表等。</li><li><strong>大数据量</strong>：当表的数据量非常大时，通过分区减少查询和管理的开销。</li><li><strong>数据归档</strong>：将历史数据存储到单独的分区中，便于快速删除或归档。</li></ul><h3 id="七、总结">七、总结</h3><p>分区表是一种强大的数据库设计技术，适用于大数据量、时间序列数据等场景。通过合理设计分区键和分区类型，可以显著提高查询性能和数据管理效率。然而，分区表的使用也需要谨慎，避免分区数量过多或分区键选择不当导致的性能问题。在设计和使用分区表时，应结合业务需求和数据特点，进行合理的规划和优化。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category>
      
      
      <category domain="https://superlovelace.top/tags/MySQL/">MySQL</category>
      
      
      <comments>https://superlovelace.top/2025/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>窗口函数</title>
      <link>https://superlovelace.top/2025/02/27/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</link>
      <guid>https://superlovelace.top/2025/02/27/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</guid>
      <pubDate>Thu, 27 Feb 2025 09:05:24 GMT</pubDate>
      
      <description>窗口函数是MySQL8.0版本新增的，相对于聚合函数把所有行聚合成一行，窗口函数可以将每一行的数据进行分别处理。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="窗口函数">窗口函数</h2><p>窗口函数是<code>MySQL8.0</code>版本新增的，相对于聚合函数把所有行聚合成一行，窗口函数可以将每一行的数据进行分别处理。</p><h3 id="一、序号函数">一、序号函数</h3><p>用来实现分组排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式<br>row_number() | rank() | dense_rank() over (<br>partition by ... # 按什么字段分组/分区<br>order by ... # 按照什么排序<br>)<br></code></pre></td></tr></table></figure><p>例如：成绩表<code>Score</code>，序号函数皆以此表查询为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| id | score |<br>| -- | ----- |<br>| 1  | 3.5   |<br>| 2  | 3.65  |<br>| 3  | 4     |<br>| 4  | 3.85  |<br>| 5  | 4     |<br>| 6  | 3.65  |<br></code></pre></td></tr></table></figure><h4 id="1-1、ROW-NUMBER">1.1、ROW_NUMBER()</h4><p>此函数进行排序时，相同的字段会分开排序。</p><p>查询成绩表，按分数进行排序，相同分数的不算在同一名（分开排）</p><p>如果不指定 <code>PARTITION BY</code>，窗口函数默认会将整个结果集视为一个分组，即不进行分组【全局排序】，计算基于所有行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>    score,<br>    ROW_NUMBER() OVER (ORDER BY score DESC) AS `rank`<br>FROM Scores<br>ORDER BY score DESC;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 2    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 3    |<br>| 3.65  | 4    |<br>| 3.65  | 5    |<br>| 3.5   | 6    |<br></code></pre></td></tr></table></figure><h4 id="1-2、RANK">1.2、RANK()</h4><p>此函数排序时，相同的字段会排在同一名，之后的字段排名为：<code>当前字段排名+当前排名字段总数-1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>    score,<br>    RANK() OVER (ORDER BY score DESC) AS `rank`<br>FROM Scores<br>ORDER BY score DESC;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 3    |<br>| 3.65  | 4    |<br>| 3.65  | 4    |<br>| 3.5   | 6    |<br></code></pre></td></tr></table></figure><h4 id="1-3、DENSE-RANK">1.3、DENSE_RANK()</h4><p>此函数排序时，相同的字段会排在同一名，之后的字段不会受当前字段重复数影响，直接就是当前排名+1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>    score,<br>    DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`<br>FROM Scores<br>ORDER BY score DESC;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 2    |<br>| 3.65  | 3    |<br>| 3.65  | 3    |<br>| 3.5   | 4    |<br></code></pre></td></tr></table></figure><p>放在一起对比：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    score,<br>    <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> `row_number`,<br>    <span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> `rank`,<br>    <span class="hljs-built_in">DENSE_RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> `dense_rank`<br><span class="hljs-keyword">FROM</span> Scores<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | row_number | rank | dense_rank |<br>| ----- | ---------- | ---- | ---------- |<br>| 4     | 1          | 1    | 1          |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 2          | 1    | 1          |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 3          | 3    | 2          |<br>| 3.65  | 4          | 4    | 3          |<br>| 3.65  | 5          | 4    | 3          |<br>| 3.5   | 6          | 6    | 4          |<br></code></pre></td></tr></table></figure><p>思考：如果现在需要找出排名前3的成绩，该怎么做呢？（以<code>dense_rank()</code>排序）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT score,`rank`<br>FROM (<br>         SELECT<br>             score,<br>             DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`<br>         FROM Scores<br>         ORDER BY score DESC<br>     ) as temp<br>WHERE temp.rank&lt;=3;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 2    |<br>| 3.65  | 3    |<br>| 3.65  | 3    |<br></code></pre></td></tr></table></figure><h3 id="二、分布函数">二、分布函数</h3><p>应用场景：查询小于等于当前薪资的比例。</p><h4 id="2-1、PERCENT-RANK-【不常用】">2.1、PERCENT_RANK() 【不常用】</h4><blockquote><p>在以下场景中 <code>PERCENT_RANK()</code> 非常有用：</p><ol><li><strong>百分位数计算</strong>：<ul><li>当需要将数据划分为百分位数（如 90th percentile）时，<code>PERCENT_RANK()</code> 可以帮助确定每个值的相对位置。</li></ul></li><li><strong>数据分布分析</strong>：<ul><li>通过 <code>PERCENT_RANK()</code> 可以快速了解数据在整个数据集中的分布情况。</li></ul></li><li><strong>性能评估</strong>：<ul><li>在评估学生成绩、员工绩效等场景中，<code>PERCENT_RANK()</code> 可以直观地反映某个人在整体中的表现。</li></ul></li><li><strong>数据标准化</strong>：<ul><li>在机器学习或统计分析中，<code>PERCENT_RANK()</code> 可以用于将数据标准化到 <code>[0, 1]</code> 范围内。</li></ul></li></ol></blockquote><p>此函数基于排名的相对位置，公式为 <code>(rank - 1) / (总行数 - 1)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    dname,<br>    salary,<br>    rank() OVER (partition by dname ORDER BY salary) AS `rank`,<br>    PERCENT_RANK() OVER (partition by dname ORDER BY salary) AS `percent_rank`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| dname | salary | rank | percent_rank |<br>| ----- | ------ | ---- | ------------ | /* 研发部总计4项*/<br>| 研发部 | 5000   | 1    | 0            | /* 0 = (1-1)/(4-1) */<br>| 研发部 | 5000   | 1    | 0            |<br>| 研发部 | 6000   | 3    | 0.6666666666 | /* 0.66 = (3-1)/(4-1) */<br>| 研发部 | 8000   | 4    | 1            |<br>| 销售部 | 3000   | 1    | 0            |<br>| 销售部 | 3000   | 1    | 0            |<br>| 销售部 | 3000   | 1    | 0            |<br>| 销售部 | 4000   | 4    | 1            |<br></code></pre></td></tr></table></figure><h4 id="2-2、CUME-DIST">2.2、CUME_DIST()</h4><p>此函数用于计算累积分布值，表示在有序数据集中，某一项的值小于或等于当前值的比例。</p><ul><li><p><strong>正序（默认）</strong>：统计每一项内，小于或等于此项的值与总数的比值。</p><p>公式为：</p><blockquote><p>CUME_DIST(x)=小于等于 x 的行数总行数CUME_DIST(<em>x</em>)=总行数小于等于 <em>x</em> 的行数</p></blockquote></li><li><p><strong>倒序</strong>：统计每一项内，大于或等于此项的值与总数的比值。</p><p>公式为：</p><blockquote><p>CUME_DIST(x)=大于等于 x 的行数总行数CUME_DIST(<em>x</em>)=总行数大于等于 <em>x</em> 的行数</p></blockquote></li></ul><p>应用场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    cume_dist() OVER (partition by dname ORDER BY salary) AS `cume_dist`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary | cume_dist |<br>| ------ | --------- |<br>| 5000   | 0.5       |<br>| 5000   | 0.5       |<br>| 6000   | 0.75      |<br>| 8000   | 1         |<br>| 3000   | 0.75  |<br>| 3000   | 0.75  |<br>| 3000   | 0.75 |<br>| 4000   | 1  |<br></code></pre></td></tr></table></figure><h3 id="三、前后函数">三、前后函数</h3><p>用途：返回位于当前行的前n行或后n行的expr的值</p><h4 id="3-1、LAG-函数">3.1、<code>LAG()</code> 函数</h4><p><code>LAG()</code> 函数用于访问当前行之前的某一行的数据。</p><h5 id="语法：">语法：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LAG(column_name, offset, default_value) OVER (PARTITION BY ... ORDER BY ...)<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>offset</code></strong>：偏移量，表示要访问的行数（默认为 1，即前一行）。</li><li><strong><code>default_value</code></strong>：如果偏移量超出范围（如第一行没有前一行），则返回的默认值（可选，默认为 <code>NULL</code>）。</li></ul><h5 id="应用场景：">应用场景：</h5><ul><li>计算当前行与前一行的差值。</li><li>分析时间序列数据中的变化趋势。</li></ul><h5 id="示例：">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与前一天的差值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    sales_date,<br>    sales_amount,<br>    <span class="hljs-built_in">LAG</span>(sales_amount, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> previous_sales_amount,<br>    sales_amount <span class="hljs-operator">-</span> <span class="hljs-built_in">LAG</span>(sales_amount, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> sales_difference<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>previous_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>0</td><td>100</td></tr><tr><td>2023-01-02</td><td>150</td><td>100</td><td>50</td></tr><tr><td>2023-01-03</td><td>200</td><td>150</td><td>50</td></tr><tr><td>2023-01-04</td><td>180</td><td>200</td><td>-20</td></tr></tbody></table><hr><h4 id="3-2、LEAD-函数">3.2、<strong><code>LEAD()</code> 函数</strong></h4><p><code>LEAD()</code> 函数用于访问当前行之后的某一行的数据。</p><h5 id="语法：-2">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">LEAD</span>(column_name, <span class="hljs-keyword">offset</span>, default_value) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...)<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>offset</code></strong>：偏移量，表示要访问的行数（默认为 1，即后一行）。</li><li><strong><code>default_value</code></strong>：如果偏移量超出范围（如最后一行没有后一行），则返回的默认值（可选，默认为 <code>NULL</code>）。</li></ul><h5 id="应用场景：-2">应用场景：</h5><ul><li>计算当前行与后一行的差值。</li><li>预测或分析未来趋势。</li></ul><h5 id="示例：-2">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与后一天的差值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SQLSELECT<br>    sales_date,<br>    sales_amount,<br>    LEAD(sales_amount, 1, 0) OVER (ORDER BY sales_date) AS next_sales_amount,<br>    LEAD(sales_amount, 1, 0) OVER (ORDER BY sales_date) - sales_amount AS sales_difference<br>FROM<br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>next_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>150</td><td>50</td></tr><tr><td>2023-01-02</td><td>150</td><td>200</td><td>50</td></tr><tr><td>2023-01-03</td><td>200</td><td>180</td><td>-20</td></tr><tr><td>2023-01-04</td><td>180</td><td>0</td><td>-180</td></tr></tbody></table><hr><h4 id="3-3、LAG-和-LEAD-的区别">3.3、<strong><code>LAG()</code> 和 <code>LEAD()</code> 的区别</strong></h4><table><thead><tr><th>函数</th><th>方向</th><th>作用</th></tr></thead><tbody><tr><td><code>LAG()</code></td><td>向后</td><td>访问当前行之前的某一行的数据。</td></tr><tr><td><code>LEAD()</code></td><td>向前</td><td>访问当前行之后的某一行的数据。</td></tr></tbody></table><hr><h4 id="3-4、常见应用场景">3.4、<strong>常见应用场景</strong></h4><ol><li><strong>时间序列分析</strong>：<ul><li>计算每日、每月或每年的变化趋势。</li><li>例如：计算每天的销售额与前一天的差值。</li></ul></li><li><strong>相邻行比较</strong>：<ul><li>比较当前行与相邻行的值，分析变化或异常。</li><li>例如：检查库存变化或温度波动。</li></ul></li><li><strong>预测或回填数据</strong>：<ul><li>使用 <code>LEAD()</code> 预测未来值，或使用 <code>LAG()</code> 回填历史值。</li></ul></li><li><strong>数据填充</strong>：<ul><li>对于缺失值，可以使用 <code>LAG()</code> 或 <code>LEAD()</code> 从相邻行填充。</li></ul></li></ol><h3 id="总结"><strong>总结</strong></h3><ul><li><code>LAG()</code> 用于访问当前行之前的某一行的数据，适合分析历史趋势或回填数据。</li><li><code>LEAD()</code> 用于访问当前行之后的某一行的数据，适合预测未来趋势或分析未来变化。</li><li>两者在时间序列分析、相邻行比较和数据填充等场景中非常有用。如果需要分析数据的变化趋势或预测未来值，<code>LAG()</code> 和 <code>LEAD()</code> 是强大的工具。</li></ul><h4 id=""></h4><h3 id="四、头尾函数">四、头尾函数</h3><p>用于在窗口框架内访问第一行或最后一行的数据。它们通常用于计算累积值、分析趋势或提取边界值。</p><hr><h4 id="4-1、FIRST-VALUE-函数">4.1、<strong><code>FIRST_VALUE()</code> 函数</strong></h4><p><code>FIRST_VALUE()</code> 函数返回窗口框架内第一行的值。</p><h5 id="语法：-3">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">FIRST_VALUE</span>(column_name) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ... [<span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> ...])<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li><li><strong><code>ROWS BETWEEN</code></strong>：可选，定义窗口框架的范围（默认为 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>）。</li></ul><h5 id="应用场景：-3">应用场景：</h5><ul><li>计算累积值（如累积销售额）。</li><li>提取每组中的第一个值。</li></ul><h5 id="示例：-3">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与第一天的销售额的差值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    sales_date,<br>    sales_amount,<br>    <span class="hljs-built_in">FIRST_VALUE</span>(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> first_sales_amount,<br>    sales_amount <span class="hljs-operator">-</span> <span class="hljs-built_in">FIRST_VALUE</span>(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> sales_difference<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>first_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>100</td><td>0</td></tr><tr><td>2023-01-02</td><td>150</td><td>100</td><td>50</td></tr><tr><td>2023-01-03</td><td>200</td><td>100</td><td>100</td></tr><tr><td>2023-01-04</td><td>180</td><td>100</td><td>80</td></tr></tbody></table><hr><h4 id="4-2、LAST-VALUE-函数">4.2、<strong><code>LAST_VALUE()</code> 函数</strong></h4><p><code>LAST_VALUE()</code> 函数返回窗口框架内最后一行的值。</p><h5 id="语法：-4">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">LAST_VALUE</span>(column_name) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ... [<span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> ...])<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li><li><strong><code>ROWS BETWEEN</code></strong>：可选，定义窗口框架的范围（默认为 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>）。</li></ul><h5 id="注意：">注意：</h5><p>默认情况下，<code>LAST_VALUE()</code> 的窗口框架是 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>，这意味着它只会返回当前行之前的值。为了获取整个窗口的最后一个值，需要将窗口框架设置为 <code>UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code>。</p><h5 id="应用场景：-4">应用场景：</h5><ul><li>计算每组中的最后一个值。</li><li>分析趋势或提取边界值。</li></ul><h5 id="示例：-4">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与最后一天的销售额的差值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">SQLSELECT<br>    sales_date,<br>    sales_amount,<br>    LAST_VALUE(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">PRECEDING</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">FOLLOWING</span>) <span class="hljs-keyword">AS</span> last_sales_amount,<br>    LAST_VALUE(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">PRECEDING</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">FOLLOWING</span>) - sales_amount <span class="hljs-keyword">AS</span> sales_difference<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>last_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>180</td><td>80</td></tr><tr><td>2023-01-02</td><td>150</td><td>180</td><td>30</td></tr><tr><td>2023-01-03</td><td>200</td><td>180</td><td>-20</td></tr><tr><td>2023-01-04</td><td>180</td><td>180</td><td>0</td></tr></tbody></table><hr><h4 id="4-3、FIRST-VALUE-和-LAST-VALUE-的区别">4.3、<strong><code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 的区别</strong></h4><table><thead><tr><th>函数</th><th>作用</th><th>默认窗口框架</th></tr></thead><tbody><tr><td><code>FIRST_VALUE()</code></td><td>返回窗口框架内第一行的值。</td><td><code>UNBOUNDED PRECEDING AND CURRENT ROW</code></td></tr><tr><td><code>LAST_VALUE()</code></td><td>返回窗口框架内最后一行的值。</td><td><code>UNBOUNDED PRECEDING AND CURRENT ROW</code></td></tr></tbody></table><hr><h4 id="4-4、常见应用场景">4.4、<strong>常见应用场景</strong></h4><ol><li><strong>累积值计算</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 计算从开始到当前行的累积值。</li><li>使用 <code>LAST_VALUE()</code> 计算从当前行到结束的累积值。</li></ul></li><li><strong>趋势分析</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 分析数据的起始和结束趋势。</li></ul></li><li><strong>边界值提取</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 提取每组中的第一个值。</li><li>使用 <code>LAST_VALUE()</code> 提取每组中的最后一个值。</li></ul></li><li><strong>数据标准化</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 将数据标准化到某个范围。</li></ul></li></ol><hr><h4 id="4-5、总结">4.5、<strong>总结</strong></h4><ul><li><code>FIRST_VALUE()</code> 用于访问窗口框架内的第一个值，适合计算累积值或提取起始值。</li><li><code>LAST_VALUE()</code> 用于访问窗口框架内的最后一个值，适合分析趋势或提取边界值。</li><li>两者在累积值计算、趋势分析和边界值提取等场景中非常有用。如果需要分析数据的起始或结束趋势，<code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 是强大的工具。</li></ul><h3 id="五、其他函数">五、其他函数</h3><h4 id="5-1、NTH-VALUE-函数">5.1、<strong><code>NTH_VALUE()</code> 函数</strong></h4><p><code>NTH_VALUE()</code> 函数用于返回窗口框架内第 N 行的值。</p><h5 id="语法：-5">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">NTH_VALUE</span>(column_name, N) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ... [<span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> ...])<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>N</code></strong>：指定要返回的行号（例如，<code>1</code> 表示第一行，<code>2</code> 表示第二行，依此类推）。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li><li><strong><code>ROWS BETWEEN</code></strong>：可选，定义窗口框架的范围（默认为 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>）。</li></ul><h5 id="应用场景：-5">应用场景：</h5><ul><li>提取窗口框架内指定行的值。</li><li>分析数据集中特定位置的值。</li></ul><h5 id="示例：-5">示例：</h5><p>假设有一组每日销售数据，需要获取每天销售额的第二个值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    sales_date,<br>    sales_amount,<br>    <span class="hljs-built_in">NTH_VALUE</span>(sales_amount, <span class="hljs-number">2</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> second_sales_amount<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>second_sales_amount</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>NULL</td></tr><tr><td>2023-01-02</td><td>150</td><td>150</td></tr><tr><td>2023-01-03</td><td>200</td><td>150</td></tr><tr><td>2023-01-04</td><td>180</td><td>150</td></tr></tbody></table><p>注意：如果窗口框架内没有第 N 行，<code>NTH_VALUE()</code> 会返回 <code>NULL</code>。</p><hr><h4 id="5-2、NTILE-函数">5.2、<strong><code>NTILE()</code> 函数</strong></h4><p><code>NTILE()</code> 函数用于将数据分区划分为指定数量的桶（bucket），并为每一行分配一个桶号。</p><h5 id="语法：-6">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">NTILE</span>(N) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...)<br></code></pre></td></tr></table></figure><ul><li><strong><code>N</code></strong>：指定要划分的桶数。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li></ul><h5 id="应用场景：-6">应用场景：</h5><ul><li>将数据划分为百分位数、四分位数等。</li><li>数据分箱（binning）或分组。</li></ul><h5 id="示例：-6">示例：</h5><p>假设有一组学生成绩数据，需要将成绩分为 4 个等级（四分位数）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    student_id,<br>    score,<br>    <span class="hljs-built_in">NTILE</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score) <span class="hljs-keyword">AS</span> quartile<br><span class="hljs-keyword">FROM</span><br>    student_scores;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>student_id</th><th>score</th><th>quartile</th></tr></thead><tbody><tr><td>1</td><td>50</td><td>1</td></tr><tr><td>2</td><td>60</td><td>1</td></tr><tr><td>3</td><td>70</td><td>2</td></tr><tr><td>4</td><td>80</td><td>3</td></tr><tr><td>5</td><td>90</td><td>4</td></tr></tbody></table><hr><h4 id="5-3、NTH-VALUE-和-NTILE-的区别">5.3、<strong><code>NTH_VALUE()</code> 和 <code>NTILE()</code> 的区别</strong></h4><table><thead><tr><th>函数</th><th>作用</th><th>主要用途</th></tr></thead><tbody><tr><td><code>NTH_VALUE()</code></td><td>返回窗口框架内第 N 行的值。</td><td>提取指定位置的值。</td></tr><tr><td><code>NTILE()</code></td><td>将数据划分为 N 个桶并分配桶号。</td><td>数据分箱、百分位数或分组。</td></tr></tbody></table><hr><h4 id="5-4、常见应用场景">5.4、<strong>常见应用场景</strong></h4><h5 id="NTH-VALUE-的应用场景"><strong><code>NTH_VALUE()</code> 的应用场景</strong></h5><ol><li><strong>提取特定位置的值</strong>：<ul><li>例如，获取某个月的第二高销售额或第三低温度。</li></ul></li><li><strong>分析数据集中特定位置的值</strong>：<ul><li>例如，找到某个时间段的中间值。</li></ul></li><li><strong>数据填充或回填</strong>：<ul><li>例如，用第 N 行的值填充缺失值。</li></ul></li></ol><h5 id="NTILE-的应用场景"><strong><code>NTILE()</code> 的应用场景</strong></h5><ol><li><strong>百分位数计算</strong>：<ul><li>例如，将成绩分为 100 个百分位数。</li></ul></li><li><strong>数据分箱（Binning）</strong>：<ul><li>例如，将销售额分为高、中、低三组。</li></ul></li><li><strong>分组分析</strong>：<ul><li>例如，将用户活跃度分为 5 个等级。</li></ul></li></ol><hr><h4 id="5-5、总结">5.5、<strong>总结</strong></h4><ul><li><strong><code>NTH_VALUE()</code></strong>：用于提取窗口框架内第 N 行的值，适合分析特定位置的数据。</li><li><strong><code>NTILE()</code></strong>：用于将数据划分为指定数量的桶，适合数据分箱、百分位数计算或分组分析。</li></ul><p>如果需要提取特定位置的值，使用 <code>NTH_VALUE()</code>；如果需要将数据划分为多个组或桶，使用 <code>NTILE()</code>。两者在数据分析和处理中都非常有用，但应用场景不同。</p><h3 id="六、开窗聚合函数">六、开窗聚合函数</h3><p>以此数据表为例：<code>user</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| id    | dname | ename  | salary |<br>| ----- | ----- | -----  | ------ |<br>| 1     | 研发部 | 张三    | 5000   |  <br>| 2     | 研发部 | 李四    | 6000   |  <br>| 3     | 研发部 | 王五    | 5000   | <br>| 4     | 研发部 | 赵四    | 8000   |  <br>| 5     | 销售部 | 卡尔    | 3000   | <br>| 6     | 销售部 | 可可    | 3000   | <br>| 7     | 销售部 | 丽丽    | 4000   | <br>| 8     | 销售部 | 楠楠    | 3000   | <br></code></pre></td></tr></table></figure><h4 id="6-1、SUM-聚合函数-开窗函数">6.1、SUM()聚合函数 + 开窗函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    sum(salary) over (order by id desc) as `total`<br>FROM user<br>ORDER BY id DESC;<br></code></pre></td></tr></table></figure><p>结果：每行都是把之前的所有行加起来求和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary | total  |<br>| ------ | ------ |<br>| 3000   | 3000   |  <br>| 4000   | 7000   |  /* 7000 = 3000 + 4000 */<br>| 3000   | 10000  |  /* 10000 = 7000 + 3000 */<br>| 3000   | 13000  |  /* 以此类推 */<br>| 8000   | 21000  |  <br>| 5000   | 26000  |  <br>| 6000   | 32000  |  <br>| 5000   | 37000  |  <br></code></pre></td></tr></table></figure><hr><p>如果不加<code>order by</code>，每一行都会显示与排序字段相同的所有行求和的最终值，可以用来对比个人与总体的数据。【这次以部门分组，这样后面的求和就是此人所在组的总值】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    dname,<br>    salary,<br>    sum(salary) over (PARTITION BY dname) as `sum`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| dname | salary | sum    |<br>| ----- | -----  | ------ |<br>| 研发部 | 5000   | 24000  |  <br>| 研发部 | 6000   | 24000  |  <br>| 研发部 | 5000   | 24000  | <br>| 研发部 | 8000   | 24000  |  <br>| 销售部 | 3000   | 10000  | <br>| 销售部 | 3000   | 10000  | <br>| 销售部 | 4000   | 10000  | <br>| 销售部 | 3000   | 10000  | <br></code></pre></td></tr></table></figure><hr><p>还可以指定求和范围：</p><p><code>rows between unbounded preceding and current row</code> 这个就是从起始行到当前行</p><p><code>rows between 3 preceding and current row</code> 这个就是从我的前3行开始到当前行</p><p><code>rows between 3 preceding and 1 following</code> 这个就是从我的前3行开始到我的后一行</p><p><code>rows between current and unbounded following</code> 这个就是从当前行到最后一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    dname,<br>    salary,<br>    sum(salary) over (partition by dname order by dname rows between unbounded preceding and current row) as `sum`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| dname | salary | sum    |<br>| ----- | -----  | ------ |<br>| 研发部 | 5000   | 5000   |  <br>| 研发部 | 6000   | 11000  |  <br>| 研发部 | 5000   | 16000  | <br>| 研发部 | 8000   | 24000  |  <br>| 销售部 | 3000   | 30000  | <br>| 销售部 | 3000   | 60000  | <br>| 销售部 | 4000   | 10000  | <br>| 销售部 | 3000   | 13000  | <br></code></pre></td></tr></table></figure><h4 id="6-2、AVG-聚合函数-开窗函数">6.2、AVG()聚合函数 + 开窗函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    salary,<br>    <span class="hljs-built_in">avg</span>(salary) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">as</span> `avg`<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>结果：每行都是把之前的所有行加起来求平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary | avg       |<br>| ------ | --------- |<br>| 3000   | 3000.0000 | <br>| 4000   | 3500.0000 |  /* 7000/2  ## (7000 = 4000 + 3000) */<br>| 3000   | 3333.3333 |  /* 10000/3 ## (10000 = 7000 + 3000) */<br>| 3000   | 3250.0000 |  /* 以此类推 */<br>| 8000   | 4200.0000 |  <br>| 5000   | 4333.3333 |  <br>| 6000   | 4571.4286 |  <br>| 5000   | 4625.0000 |  <br></code></pre></td></tr></table></figure><h4 id="6-3、MIN-聚合函数-开窗函数">6.3、MIN()聚合函数 + 开窗函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    min(salary) over (order by id desc) as `min`<br>FROM user<br>ORDER BY id DESC;<br></code></pre></td></tr></table></figure><p>结果：每一行都与之前的所有行相比得出最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary |  min  |<br>| ------ | ----- |<br>| 3000   | 3000  | <br>| 4000   | 3000  |  <br>| 3000   | 3000  | <br>| 3000   | 3000  | <br>| 8000   | 3000  |  <br>| 5000   | 3000  |  <br>| 6000   | 3000  | <br>| 5000   | 3000  |  <br></code></pre></td></tr></table></figure><h4 id="6-4、MAX-聚合函数-开窗函数">6.4、MAX()聚合函数 + 开窗函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    max(salary) over (order by id desc) as `max`<br>FROM user<br>ORDER BY id DESC;<br></code></pre></td></tr></table></figure><p>结果：每一行都与之前的所有行相比得出最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary |  max  |<br>| ------ | ----- |<br>| 3000   | 3000  | <br>| 4000   | 4000  |  <br>| 3000   | 4000  | <br>| 3000   | 4000  |  <br>| 8000   | 8000  |  <br>| 5000   | 8000  |  <br>| 6000   | 8000  | <br>| 5000   | 8000  | <br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/">数据库</category>
      
      
      <category domain="https://superlovelace.top/tags/MySQL/">MySQL</category>
      
      
      <comments>https://superlovelace.top/2025/02/27/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>idea插件推荐</title>
      <link>https://superlovelace.top/2025/02/24/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</link>
      <guid>https://superlovelace.top/2025/02/24/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</guid>
      <pubDate>Mon, 24 Feb 2025 12:38:05 GMT</pubDate>
      
      <description>idea插件推荐</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="idea插件推荐"><code>idea</code>插件推荐</h2><h3 id="一、Chinese-Simplified-Language-Pack-中文语言包">一、Chinese (Simplified) Language Pack / 中文语言包</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></p><p>简介：此插件是idea的中文汉化插件，还是非常好用的，基本上安装完<code>idea</code>后必装的插件了。</p><h3 id="二、Maven-Search">二、Maven-Search</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/17170-maven-search">https://plugins.jetbrains.com/plugin/17170-maven-search</a></p><p>简介：这是<code>Maven</code>依赖包的快速搜索插件，可以方便查找所需要的<code>Maven</code>依赖。</p><h3 id="三、MyBatisX">三、MyBatisX</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></p><p>简介：这是<code>MyBatisPlus</code>推荐的插件，可以方便<code>mapper</code>接口和<code>mapper.xml</code>之间进行跳转，也方便通过数据库逆向生成实体代码。</p><h3 id="四、Apipost插件">四、Apipost插件</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/22676-apipost-helper-2-0">https://plugins.jetbrains.com/plugin/22676-apipost-helper-2-0</a></p><p>简介：这是<code>Apipost</code>开发的插件，可以方便进行简单接口测试。<code>Apipost</code>是一个非常不错的测试工具，官方声称：<code>Apipost</code> = <code>Postman</code> + <code>Swagger</code> + <code>Mock</code> + <code>Jmeter</code>。</p><p><code>Apipost</code>官方网站：<a href="https://www.apipost.cn/">https://www.apipost.cn/</a></p><h3 id="五、jclasslib">五、jclasslib</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib">https://plugins.jetbrains.com/plugin/9248-jclasslib</a></p><p>简介：这是一个方便以二进制查看类属性的插件，属于<code>jvm</code>学习期间接触到的。</p><h3 id="六、Alibaba-Java-Coding-Guidelines">六、Alibaba Java Coding Guidelines</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib">https://plugins.jetbrains.com/plugin/9248-jclasslib</a></p><p>简介：这是阿里巴巴<code>java</code>开发手册规范检测插件，若有不符合规范地方，通过点击选择检查将会提示检测到的异常，并给基本的解决方案。</p><h3 id="七、SonarQube-for-IDE">七、SonarQube for IDE</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/7973-sonarqube-for-ide">https://plugins.jetbrains.com/plugin/7973-sonarqube-for-ide</a></p><p>简介：这也是开发规范插件，但是这个会自动检测，只不过检测的比较宽泛，一些暂时的注释也会被标记应该移除。不足的是都是英文提示，有些可能看不懂，需要翻译协助。</p><h3 id="八、CheckStyle-IDEA">八、CheckStyle-IDEA</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></p><p>简介：这也是开发规范插件，需要自行点击检测，有谷歌和<code>sun</code>公司的规范。这个检测的提示是有中文的。</p><h3 id="九、Rainbow-Brackets">九、Rainbow Brackets</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets</a></p><p>简介：这是一个给不同嵌套层级的括号添加不同的颜色以进行区别的插件。</p><h3 id="十、String-Manipulation">十、String Manipulation</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></p><p>简介：这是一个对字符串进行格式转换的插件。例如：大小写切换、排序、过滤、递增、对齐列、grepping、转义、编码…</p><h3 id="十一、PlantUML-Integration">十一、PlantUML Integration</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a></p><p>简介：支持 PlantUML 绘图，用于绘制 UML 图、流程图等。通过新建<code>PlantUML File</code>使用，格式类似效果类似<code>markdown</code>，一边是编写文字，一边是显示效果。启用此插件才有显示效果，默认是没有效果的。</p><p>PlantUML官方操作文档：<a href="https://plantuml.com/zh/">https://plantuml.com/zh/</a></p><h3 id="十二、OpenFeign-Assistant（FeignX）">十二、OpenFeign Assistant（FeignX）</h3><p>github地址：<a href="https://github.com/Halfmoonly/feignx-plugin">https://github.com/Halfmoonly/feignx-plugin</a></p><p>简介：方便从feign客户端跳转到请求的Controller接口方法</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/">插件推荐</category>
      
      
      <category domain="https://superlovelace.top/tags/idea/">idea</category>
      
      
      <comments>https://superlovelace.top/2025/02/24/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>远程调用之OpenFeign</title>
      <link>https://superlovelace.top/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/</link>
      <guid>https://superlovelace.top/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/</guid>
      <pubDate>Thu, 20 Feb 2025 12:39:19 GMT</pubDate>
      
      <description>远程调用OpenFeign示例</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="远程调用之OpenFeign">远程调用之<code>OpenFeign</code></h2><p>在单体项目中，正常写的接口都是供前端调用获取数据的（例如：<code>ajax</code>、<code>axios</code>和<code>fetch</code>）。但是在微服务下的分布式架构中，不同的业务功能模块由不同人员负责并开发，因为分的比较细，所以就少不了服务之间的沟通。通常<code>java</code>来进行远程调用的方法包括：<code>RestTemplate</code>、<code>HttpURLConnection</code> 、<code>HttpClient</code>、<code>OkHttp</code>等。</p><p>而<code>OpenFeign</code>就是简化微服务之间接口调用的远程调用工具之一。</p><p><strong>前提已启动<code>Nacos</code>注册中心！</strong></p><h3 id="一、Maven依赖">一、Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- OpenFeign 远程调用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 负载均衡器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、启用OpenFeign">二、启用<code>OpenFeign</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">// 开启OpenFeign</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、编写OpenFeign客户端">三、编写<code>OpenFeign</code>客户端</h3><p>这一步类似Mapper文件，只不过数据通过远程调用从其他模块获取。而不是单体中由<code>xml</code>文件写<code>SQL</code>语句直接沟通数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign;<br><br><span class="hljs-keyword">import</span> com.demo.feign.fallback.Rest02FallBack;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign客户端接口请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.demo.feign</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 一个客户端中对应同一业务的所有请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@FeignClient(value = &quot;test02&quot;,fallback = Rest02FallBack.class)</span><span class="hljs-comment">// 这里的value值是微服务的名称</span><br><span class="hljs-comment">//@FeignClient(value = &quot;test01&quot;,url = &quot;https://www.baidu.com&quot;) // 若是调用第三方的api，则需指定地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rest02</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、【可选】OpenFeign日志配置">四、【可选】<code>OpenFeign</code>日志配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign远程调用配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfig</span> &#123;<br><br>    <span class="hljs-comment">// 日志配置: 显示所有级别的日志</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="五、【可选】启用日志配置">五、【可选】启用日志配置</h3><h4 id="1、局部生效（客户端中指定配置）">1、局部生效（客户端中指定配置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span><br></code></pre></td></tr></table></figure><h4 id="2、全局生效（配置类中指定默认配置）">2、全局生效（配置类中指定默认配置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span><br></code></pre></td></tr></table></figure><h4 id="3、yaml开启OpenFeign客户端的日志">3、<code>yaml</code>开启<code>OpenFeign</code>客户端的日志</h4><p><code>OpenFeign</code>只会在<code>FeignClient</code>所在包的日志级别为<strong>DEBUG</strong>时，才会输出日志。而且其日志级别有4级：</p><ul><li><strong>NONE</strong>：不记录任何日志信息，这是默认值。</li><li><strong>BASIC</strong>：仅记录请求的方法，URL以及响应状态码和执行时间</li><li><strong>HEADERS</strong>：在BASIC的基础上，额外记录了请求和响应的头信息</li><li><strong>FULL</strong>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment">#root: debug</span><br>    <span class="hljs-attr">com.demo.feign:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-comment">#com.demo.interceptor: debug</span><br></code></pre></td></tr></table></figure><h3 id="六、请求超时">六、请求超时</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 远程调用 &gt; OpenFeign</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">okhttp:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 默认设置，未具体设置的所有客户端都生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">2000</span> <span class="hljs-comment"># 连接超时 5秒(5000毫秒) 【默认60秒】</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 读取超时 5秒</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span> <span class="hljs-comment"># 日志级别 所有</span><br>      <span class="hljs-attr">test02:</span> <span class="hljs-comment"># 服务名称[或是contextId指定的服务]</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 连接超时 5秒(5000毫秒) 【默认60秒】</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 读取超时 5秒</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span> <span class="hljs-comment"># 日志级别 所有</span><br></code></pre></td></tr></table></figure><h3 id="七、超时重试">七、超时重试</h3><p>超时重试机制：超时时间（例如5秒）+ 重试间隔（100毫秒）x 1.5</p><p>每次重试的间隔都会比上次长，例如是1.5倍</p><p>最大到重试间隔的时间超过最大时间或者重试次数达到最大次数则停止重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign远程调用配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfig</span> &#123;<br><br>    <span class="hljs-comment">// 日志配置: 显示所有级别的日志</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 超时重试</span><br>    <span class="hljs-meta">@Bean</span><br>    Retryer <span class="hljs-title function_">retryer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 不传值走无参构造：默认间隔100毫秒，最大间隔1秒，最多尝试5次</span><br>        <span class="hljs-comment">//return new Retryer.Default();</span><br>        <span class="hljs-comment">// 传值走有参构造: 每次重试间隔100毫秒，最大间隔1秒，最多尝试5次</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retryer</span>.Default(<span class="hljs-number">100L</span>, TimeUnit.SECONDS.toMillis(<span class="hljs-number">1L</span>), <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="八、请求拦截器">八、请求拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.interceptor;<br><br><span class="hljs-keyword">import</span> feign.RequestInterceptor;<br><span class="hljs-keyword">import</span> feign.RequestTemplate;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign请求拦截器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 用于请求前统一添加公共数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenFeignRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;<br>        <span class="hljs-comment">// 请求头添加X-Token</span><br>        requestTemplate.header(<span class="hljs-string">&quot;X-Token&quot;</span>,UUID.randomUUID().toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、FallBack兜底返回">九、<code>FallBack</code>兜底返回</h3><p>远程调用超时或错误时返回的错误信息或兜底数据。</p><p><strong>兜底数据</strong>：默认数据、缓存数据、假数据… 主要是为了让业务能正常运行。</p><p><strong>注意：需搭配<code>Sentinel</code>服务保护框架，否则不会走兜底的。</strong></p><p>客户端：需要<code>fallback</code>指定兜底实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign;<br><br><span class="hljs-keyword">import</span> com.demo.feign.fallback.Rest02FallBack;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign客户端接口请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.demo.feign</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 一个客户端中对应同一业务的所有请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@FeignClient(value = &quot;test02&quot;,fallback = Rest02FallBack.class)</span><span class="hljs-comment">// 这里的值是微服务的名称</span><br><span class="hljs-comment">//@FeignClient(value = &quot;test01&quot;,url = &quot;https://www.baidu.com&quot;) // 若是调用第三方的api，则需指定地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rest02</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>兜底类：实现客户端接口然后在实现方法中增加兜底数据逻辑即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign.fallback;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * FallBack</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rest02FallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">com</span>.demo.feign.Rest02 &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Default Data&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>添加<code>Sentinel</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- sentinel 服务保护 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件中开启<code>sentinel</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这样把调用的服务停止，然后去调用就会获得兜底数据了。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/">远程调用</category>
      
      
      <category domain="https://superlovelace.top/tags/OpenFeign/">OpenFeign</category>
      
      
      <comments>https://superlovelace.top/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于最近很长一段时间的断更</title>
      <link>https://superlovelace.top/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/</link>
      <guid>https://superlovelace.top/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/</guid>
      <pubDate>Tue, 18 Feb 2025 09:05:24 GMT</pubDate>
      
      <description>我回来了！</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="关于最近很长一段时间的断更">关于最近很长一段时间的断更</h2><p>很久没更新了，原因是之前的电脑坏掉了，这两天才把机械和固态盘里的数据给拿出来整理，所以相关的笔记都一直存着呢。库存，哈哈，今天一并都更新上，文档日期还是按当时写的日期来归档。好了，终于可以接起来继续更新我的博客了！</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      
      <comments>https://superlovelace.top/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SSL：WRONG_VERSION_NUMBER</title>
      <link>https://superlovelace.top/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/</link>
      <guid>https://superlovelace.top/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/</guid>
      <pubDate>Mon, 17 Feb 2025 14:11:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;SSL：WRONG-VERSION-NUMBER&quot;&gt;SSL：WRONG_VERSION_NUMBER&lt;/h2&gt;
&lt;p&gt;记录一次SSL部署成功后，接口请求依然报SSL错误的问题。&lt;/p&gt;
&lt;p&gt;首先排除SSL证据链不足，系统时间不正确，TLS配置不正确等问题。&lt;/p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="SSL：WRONG-VERSION-NUMBER">SSL：WRONG_VERSION_NUMBER</h2><p>记录一次SSL部署成功后，接口请求依然报SSL错误的问题。</p><p>首先排除SSL证据链不足，系统时间不正确，TLS配置不正确等问题。</p><p>浏览器直接访问可以打开网站，但是postman等接口访问就一直报SSL异常：</p><p>类似参考资料中的这种异常代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">write EPROTO 8936192:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER:..\..\third_party\boringssl\src\ssl\tls_record.cc:231:<br></code></pre></td></tr></table></figure><p>通常通过域名访问80端口，出现阻断页，这里是关键！</p><p>参考资料中的是被上海蓝云阻断，</p><p>我这里遇到的是被当前服务器提供商机房拦截阻断。原因与参考资料中的阻断原因不同，这里是因为对应的景安备案系统中没有当前域名相关信息，域名是在阿里云的而且是在阿里云备案的。根据提示：1是没有在此系统备案，2是没有加入白名单，3是网站存在不适宜传播的内容。显然，3是不符合的。所以就去添加白名单，添加30分钟左右后，postman已可以成功访问。【但提示说未在此系统备案的需尽快完善信息，否则会在几天后将白名单的信息删除】，所以还是需要在此备案系统备案。已经备案的去转入即可。相关信息：<a href="https://beian.zzidc.com/main/help/showHelpContent?id=32">https://beian.zzidc.com/main/help/showHelpContent?id=32</a></p><p>参考资料：<a href="https://www.cnblogs.com/lulight/p/18292669">https://www.cnblogs.com/lulight/p/18292669</a></p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">异常处理</category>
      
      
      
      <comments>https://superlovelace.top/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FlvPlayer缓冲中断问题</title>
      <link>https://superlovelace.top/2024/12/06/[FlvPlayer]%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/</link>
      <guid>https://superlovelace.top/2024/12/06/[FlvPlayer]%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/</guid>
      <pubDate>Fri, 06 Dec 2024 00:33:16 GMT</pubDate>
      
      <description>OAuth2.0的详细示例</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-title class_">FlvPlayer</span>] &gt; <span class="hljs-title class_">Maximum</span> buffering duration exceeded, suspend transmuxing task<br>[<span class="hljs-title class_">FlvPlayer</span>] &gt; <span class="hljs-title class_">Continue</span> loading <span class="hljs-keyword">from</span> paused position<br>flv.<span class="hljs-property">js</span>:<span class="hljs-number">10093</span> [<span class="hljs-title class_">FLVDemuxer</span>] &gt; <span class="hljs-title class_">Unsupported</span> tag type <span class="hljs-number">70</span>, skipped<br>flv.<span class="hljs-property">js</span>:<span class="hljs-number">10093</span> [<span class="hljs-title class_">FLVDemuxer</span>] &gt; <span class="hljs-title class_">Unsupported</span> tag type <span class="hljs-number">193</span>, skipped<br></code></pre></td></tr></table></figure><p>原因是<code>flv.js</code>缓冲直播视频流超过最大值后会停止继续缓冲，等到播放一定时长后，会自动从暂停点恢复。但是，这时出现不支持的标签类型并跳过的问题。</p><h2 id="问题解决">问题解决</h2><p>若出现此问题，但是视频播放不受影响，可忽略此问题。<br>我这边是出现此问题后，视频还没放完缓冲的数据，等播放到缓冲暂停点时，播放器就开始一直加载，而且无法播放了…<br>我去<code>flv.js</code>的<code>github</code>中的<code>issue</code>中看了，有提到相关的问题，但只是提了缓冲到最大会暂停缓冲的事，而且目前没有答复。</p><h3 id="解决方法：">解决方法：</h3><p>这算是一个异常点，可以通过捕获异常来解决。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> flv = flvjs.<span class="hljs-title function_">createPlayer</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;flv&#x27;</span>, url &#125;);<br>flv.<span class="hljs-title function_">attachMediaElement</span>(video);<br>art.<span class="hljs-property">flv</span> = flv;<br>flv.<span class="hljs-title function_">load</span>();<br>flv.<span class="hljs-title function_">on</span>(flvjs.<span class="hljs-property">Events</span>.<span class="hljs-property">ERROR</span>, <span class="hljs-function">(<span class="hljs-params">errorType, details</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Error: <span class="hljs-subst">$&#123;errorType&#125;</span>, Details: <span class="hljs-subst">$&#123;details&#125;</span>`</span>);<br>    <span class="hljs-comment">// 根据错误类型采取恢复措施</span><br>    <span class="hljs-keyword">switch</span> (errorType) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;NetworkError&#x27;</span>:<br>            <span class="hljs-comment">// 网络错误，尝试重新加载视频</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Network error, reloading video...&#x27;</span>)<br>            flv.<span class="hljs-title function_">load</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;MediaError&#x27;</span>:<br>            <span class="hljs-comment">// 媒体错误，尝试恢复播放</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Media error, recovering playback...&#x27;</span>)<br>            flv.<span class="hljs-title function_">recoverMediaError</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-comment">// 其他错误，尝试重新加载视频</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Unknown error, reloading video...&#x27;</span>)<br>            flv.<span class="hljs-title function_">load</span>();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>可根据自己的代码逻辑自行修改。</p><hr><p>以上为个人浅薄理解，亲身实践，如有更好的方法或者有需要改进的地方，欢迎评论区友好交流指正。</p><p>如果觉得有帮助的话，不妨点个赞和收藏，加个关注吧！</p><p>不定期更新遇到并解决的问题哦。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/">随机数</category>
      
      
      <comments>https://superlovelace.top/2024/12/06/[FlvPlayer]%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>获取springboot所有接口</title>
      <link>https://superlovelace.top/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/</link>
      <guid>https://superlovelace.top/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/</guid>
      <pubDate>Sat, 30 Nov 2024 07:12:40 GMT</pubDate>
      
      <description>获取springboot所有接口</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="获取springboot所有接口">获取springboot所有接口</h2><p><code>EndpointScanner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扫描所有可用接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointScanner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫描所有接口，处理后存到文件中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanAndWriteEndpointsToFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> applicationContext.getBean(RequestMappingHandlerMapping.class);<br><br>        <span class="hljs-comment">// 获取所有映射的路径</span><br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">endpoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 遍历所有的映射关系，获取每个接口的路径</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : handlerMethods.entrySet()) &#123;<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">mappingInfo</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> entry.getValue();<br><br>            Set&lt;String&gt; patterns = mappingInfo.getPatternsCondition().getPatterns();<br>            <span class="hljs-comment">// 获取请求方法</span><br>            Set&lt;RequestMethod&gt; methods = mappingInfo.getMethodsCondition().getMethods();<br>            <br>            <span class="hljs-comment">// 获取控制器类名和处理方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">controllerClass</span> <span class="hljs-operator">=</span> handlerMethod.getBeanType().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> handlerMethod.getMethod().getName();<br><br>            <span class="hljs-keyword">for</span> (String pattern : patterns) &#123;<br>                <span class="hljs-comment">// 过滤掉路径参数&#123;id&#125;</span><br>                <span class="hljs-keyword">if</span> (pattern.contains(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> pattern.substring(<span class="hljs-number">0</span>, pattern.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>));<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(substring).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                         .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                         .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(substring).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(pattern).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(pattern).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将接口路径写入文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file))) &#123;<br>            writer.write(endpoints.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将可用接口写入可访问接口列表文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointLoader</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointLoader</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EndpointScanner endpointScanner;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/secret/access_api_list.txt&quot;</span>;  <span class="hljs-comment">// 文件保存路径</span><br>        endpointScanner.scanAndWriteEndpointsToFile(filePath);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出示例：</p><p>假设接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br><span class="hljs-meta">@PostMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/api/products&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleProducts</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br></code></pre></td></tr></table></figure><p>文件存储：【请求类型】 【请求路径】 -&gt; 【所在类】【方法名】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GET /api/users -&gt; com.example.controller.UserController#getUsers<br>POST /api/users -&gt; com.example.controller.UserController#createUser<br>ANY /api/products -&gt; com.example.controller.ProductController#handleProducts<br></code></pre></td></tr></table></figure><p>可以视情况选择</p><p>例如只获取请求方法类型和请求路径</p><p><code>EndpointScanner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扫描所有可用接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointScanner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫描所有接口，处理后存到文件中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanAndWriteEndpointsToFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> applicationContext.getBean(RequestMappingHandlerMapping.class);<br><br>        <span class="hljs-comment">// 获取所有映射的路径</span><br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">endpoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 遍历所有的映射关系，获取每个接口的路径</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : handlerMethods.entrySet()) &#123;<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">mappingInfo</span> <span class="hljs-operator">=</span> entry.getKey();<br><br>            Set&lt;String&gt; patterns = mappingInfo.getPatternsCondition().getPatterns();<br>            <span class="hljs-comment">// 获取请求方法</span><br>            Set&lt;RequestMethod&gt; methods = mappingInfo.getMethodsCondition().getMethods();<br><br>            <span class="hljs-keyword">for</span> (String pattern : patterns) &#123;<br>                <span class="hljs-keyword">if</span> (pattern.contains(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> pattern.substring(<span class="hljs-number">0</span>, pattern.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>));<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(substring).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(substring).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(pattern).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(pattern).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将接口路径写入文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file))) &#123;<br>            writer.write(endpoints.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/api/">api</category>
      
      
      <comments>https://superlovelace.top/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>格式化控制台打印工具</title>
      <link>https://superlovelace.top/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <guid>https://superlovelace.top/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <pubDate>Fri, 22 Nov 2024 08:08:12 GMT</pubDate>
      
      <description>格式化控制台打印工具</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="格式化控制台打印工具">格式化控制台打印工具</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化控制台打印工具</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormatPrintUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出标题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化信息标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Title</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] --------------------------------[ &quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; ]--------------------------------&quot;</span>;<br>        System.out.println(start+title+end);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出成功信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化成功信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Success</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[32;1mINFO\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出通用信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化通用信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Info</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出警告信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化警告信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Warn</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[33;1mWARN\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出错误信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化错误信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Error</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[31;1mERROR\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出水平线分隔信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化水平线分隔信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Horizontal</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] --------------------------------------------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FormatPrintUtil.Title(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Info(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Warn(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Error(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Success(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Horizontal();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/">控制台输出</category>
      
      
      <comments>https://superlovelace.top/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</title>
      <link>https://superlovelace.top/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/</link>
      <guid>https://superlovelace.top/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/</guid>
      <pubDate>Sun, 17 Nov 2024 13:42:53 GMT</pubDate>
      
      <description>生产环境下打包报错，记录解决方法。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="The-forked-VM-terminated-without-properly-saying-goodbye-VM-crash-or-System-exit-called">The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</h2><h3 id="完整错误：">完整错误：</h3><blockquote><p><code>The forked VM terminated without properly saying goodbye. VM crash or System.exit called? Command was cmd.exe /X /C &quot;D:\Program\Java\jre\bin\java -jar C:\Users\peter\AppData\Local\Temp\surefire8984743116361215564\surefirebooter3828924104254730190.jar C:\Users\peter\AppData\Local\Temp\surefire8984743116361215564 2024-11-17T20-08-43_528-jvmRun1 surefire1713296022132520594tmp surefire_04804249814728176955tmp&quot; Error occurred in starting fork, check output in log Process Exit Code: 1</code></p></blockquote><p>错误的大致意思是测试进程中遇到<code>System.exit(0);</code>的<code>jvm</code>退出代码，导致打包进程中断。</p><p>我确实有用到这段代码，但这是项目首次启动初始化数据库信息时发生异常的时候才会执行的逻辑！</p><p>去构建输出语句中发现是无法连接数据库：</p><blockquote><p><code>java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)</code></p></blockquote><h3 id="原因分析：">原因分析：</h3><blockquote><p>我是在开发环境下测试打包没问题后，将配置文件改成生产环境进行打包测试出现的。由于测试环境的数据库在本地是无法访问的，但这不应该是打包无法通过的原因。我一顿搜索，发现是我的测试类中有查询数据库的相关测试。因为在我的数据库初始化逻辑中，当Maven打包时，默认会执行到自定义的测试类中的方法，由于没有指定测试类方法的运行环境，所以在生产环境下打包时，在测试阶段Maven也会尝试连接数据库来测试相关测试类方法，因为连接不到测试类的数据库，从而产生了此问题。</p></blockquote><h3 id="解决方法：">解决方法：</h3><p>在测试类中指定测试类运行的环境即可。用注解<code>@ActiveProfiles</code></p><p>测试类示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>补充：</p><h4 id="1-使用-Maven-Surefire-插件配置"><strong>1. 使用 Maven Surefire 插件配置</strong></h4><p>Maven 的 Surefire 插件用于运行测试，可以通过配置参数来有条件地运行或跳过特定的测试。</p><h5 id="配置-pom-xml">配置 <code>pom.xml</code></h5><p>在 <code>pom.xml</code> 中为 Surefire 插件添加一个 <code>&lt;configuration&gt;</code> 节点，设置跳过特定环境（如生产）的测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0-M7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>$&#123;skipTests&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在打包命令中传递 <code>-DskipTests=true</code> 参数跳过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -DskipTests=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-使用-Spring-的-Profile-控制加载数据库相关测试"><strong>2. 使用 Spring 的 Profile 控制加载数据库相关测试</strong></h4><p>通过 Spring 的 <code>@ActiveProfiles</code> 或 <code>@IfProfileValue</code> 注解，可以控制测试方法或测试类是否执行。</p><h5 id="示例代码">示例代码</h5><p>为测试类指定运行环境（例如，只有在开发环境才执行）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDatabaseConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>application.properties</code> 中定义不同环境的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># src/main/resources/application-dev.properties</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/devdb</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">devuser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">devpassword</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># src/main/resources/application-prod.properties</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://prod-host:3306/proddb</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">produser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">prodpassword</span><br></code></pre></td></tr></table></figure><p>在生产环境打包时通过命令设置生产环境 Profile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package -Dspring.profiles.active=prod<br></code></pre></td></tr></table></figure><hr><h4 id="3-使用-EnabledIf-或-IfProfileValue-注解（仅运行特定环境测试）"><strong>3. 使用 <code>@EnabledIf</code> 或 <code>@IfProfileValue</code> 注解（仅运行特定环境测试）</strong></h4><p>你可以基于环境变量有条件地运行测试类。</p><h5 id="示例代码-2">示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IfProfileValue(name = &quot;env&quot;, value = &quot;dev&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDatabaseConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在生产环境打包时传递环境参数跳过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -Denv=prod<br></code></pre></td></tr></table></figure><hr><h4 id="4-通过-Maven-配置排除特定测试"><strong>4. 通过 Maven 配置排除特定测试</strong></h4><p>你可以通过 Maven Surefire 插件的 <code>&lt;excludes&gt;</code> 配置跳过特定测试类。</p><h5 id="配置-pom-xml-2">配置 <code>pom.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0-M7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/DatabaseTests.java<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生产环境打包时这些测试类将不会被执行。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <category domain="https://superlovelace.top/tags/junit/">junit</category>
      
      
      <comments>https://superlovelace.top/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
