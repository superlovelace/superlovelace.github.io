<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>四月黎明 | 棱境的个人博客站点</title>
    <link>https://superlovelace.top/</link>
    
    <atom:link href="https://superlovelace.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录日常学习内容，分享问题解决方法。主要内容包括Java、Python、C++、爬虫和数据结构等相关知识。其中，技术框架包括Java框架Spring、SpringBoot、SpringMVC和Mybatis；Python框架Django、Flask等。此外还有服务器搭建、项目部署，静态博客的搭建等知识总结，不定时更新中...</description>
    <pubDate>Thu, 20 Feb 2025 12:43:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>远程调用之OpenFeign</title>
      <link>https://superlovelace.top/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/</link>
      <guid>https://superlovelace.top/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/</guid>
      <pubDate>Thu, 20 Feb 2025 12:39:19 GMT</pubDate>
      
      <description>远程调用OpenFeign示例</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="远程调用之OpenFeign">远程调用之<code>OpenFeign</code></h2><p>在单体项目中，正常写的接口都是供前端调用获取数据的（例如：<code>ajax</code>、<code>axios</code>和<code>fetch</code>）。但是在微服务下的分布式架构中，不同的业务功能模块由不同人员负责并开发，因为分的比较细，所以就少不了服务之间的沟通。通常<code>java</code>来进行远程调用的方法包括：<code>RestTemplate</code>、<code>HttpURLConnection</code> 、<code>HttpClient</code>、<code>OkHttp</code>等。</p><p>而<code>OpenFeign</code>就是简化微服务之间接口调用的远程调用工具之一。</p><p><strong>前提已启动<code>Nacos</code>注册中心！</strong></p><h3 id="一、Maven依赖">一、Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- OpenFeign 远程调用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 负载均衡器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、启用OpenFeign">二、启用<code>OpenFeign</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">// 开启OpenFeign</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、编写OpenFeign客户端">三、编写<code>OpenFeign</code>客户端</h3><p>这一步类似Mapper文件，只不过数据通过远程调用从其他模块获取。而不是单体中由<code>xml</code>文件写<code>SQL</code>语句直接沟通数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign;<br><br><span class="hljs-keyword">import</span> com.demo.feign.fallback.Rest02FallBack;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign客户端接口请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.demo.feign</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 一个客户端中对应同一业务的所有请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@FeignClient(value = &quot;test02&quot;,fallback = Rest02FallBack.class)</span><span class="hljs-comment">// 这里的value值是微服务的名称</span><br><span class="hljs-comment">//@FeignClient(value = &quot;test01&quot;,url = &quot;https://www.baidu.com&quot;) // 若是调用第三方的api，则需指定地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rest02</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、【可选】OpenFeign日志配置">四、【可选】<code>OpenFeign</code>日志配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign远程调用配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfig</span> &#123;<br><br>    <span class="hljs-comment">// 日志配置: 显示所有级别的日志</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="五、【可选】启用日志配置">五、【可选】启用日志配置</h3><h4 id="1、局部生效（客户端中指定配置）">1、局部生效（客户端中指定配置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span><br></code></pre></td></tr></table></figure><h4 id="2、全局生效（配置类中指定默认配置）">2、全局生效（配置类中指定默认配置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span><br></code></pre></td></tr></table></figure><h4 id="3、yaml开启OpenFeign客户端的日志">3、<code>yaml</code>开启<code>OpenFeign</code>客户端的日志</h4><p><code>OpenFeign</code>只会在<code>FeignClient</code>所在包的日志级别为<strong>DEBUG</strong>时，才会输出日志。而且其日志级别有4级：</p><ul><li><strong>NONE</strong>：不记录任何日志信息，这是默认值。</li><li><strong>BASIC</strong>：仅记录请求的方法，URL以及响应状态码和执行时间</li><li><strong>HEADERS</strong>：在BASIC的基础上，额外记录了请求和响应的头信息</li><li><strong>FULL</strong>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment">#root: debug</span><br>    <span class="hljs-attr">com.demo.feign:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-comment">#com.demo.interceptor: debug</span><br></code></pre></td></tr></table></figure><h3 id="六、请求超时">六、请求超时</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 远程调用 &gt; OpenFeign</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">okhttp:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 默认设置，未具体设置的所有客户端都生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">2000</span> <span class="hljs-comment"># 连接超时 5秒(5000毫秒) 【默认60秒】</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 读取超时 5秒</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span> <span class="hljs-comment"># 日志级别 所有</span><br>      <span class="hljs-attr">test02:</span> <span class="hljs-comment"># 服务名称[或是contextId指定的服务]</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 连接超时 5秒(5000毫秒) 【默认60秒】</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 读取超时 5秒</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span> <span class="hljs-comment"># 日志级别 所有</span><br></code></pre></td></tr></table></figure><h3 id="七、超时重试">七、超时重试</h3><p>超时重试机制：超时时间（例如5秒）+ 重试间隔（100毫秒）x 1.5</p><p>每次重试的间隔都会比上次长，例如是1.5倍</p><p>最大到重试间隔的时间超过最大时间或者重试次数达到最大次数则停止重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign远程调用配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfig</span> &#123;<br><br>    <span class="hljs-comment">// 日志配置: 显示所有级别的日志</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 超时重试</span><br>    <span class="hljs-meta">@Bean</span><br>    Retryer <span class="hljs-title function_">retryer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 不传值走无参构造：默认间隔100毫秒，最大间隔1秒，最多尝试5次</span><br>        <span class="hljs-comment">//return new Retryer.Default();</span><br>        <span class="hljs-comment">// 传值走有参构造: 每次重试间隔100毫秒，最大间隔1秒，最多尝试5次</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retryer</span>.Default(<span class="hljs-number">100L</span>, TimeUnit.SECONDS.toMillis(<span class="hljs-number">1L</span>), <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="八、请求拦截器">八、请求拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.interceptor;<br><br><span class="hljs-keyword">import</span> feign.RequestInterceptor;<br><span class="hljs-keyword">import</span> feign.RequestTemplate;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign请求拦截器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 用于请求前统一添加公共数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenFeignRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;<br>        <span class="hljs-comment">// 请求头添加X-Token</span><br>        requestTemplate.header(<span class="hljs-string">&quot;X-Token&quot;</span>,UUID.randomUUID().toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、FallBack兜底返回">九、<code>FallBack</code>兜底返回</h3><p>远程调用超时或错误时返回的错误信息或兜底数据。</p><p><strong>兜底数据</strong>：默认数据、缓存数据、假数据… 主要是为了让业务能正常运行。</p><p><strong>注意：需搭配<code>Sentinel</code>服务保护框架，否则不会走兜底的。</strong></p><p>客户端：需要<code>fallback</code>指定兜底实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign;<br><br><span class="hljs-keyword">import</span> com.demo.feign.fallback.Rest02FallBack;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign客户端接口请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.demo.feign</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 一个客户端中对应同一业务的所有请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@FeignClient(value = &quot;test02&quot;,fallback = Rest02FallBack.class)</span><span class="hljs-comment">// 这里的值是微服务的名称</span><br><span class="hljs-comment">//@FeignClient(value = &quot;test01&quot;,url = &quot;https://www.baidu.com&quot;) // 若是调用第三方的api，则需指定地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rest02</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>兜底类：实现客户端接口然后在实现方法中增加兜底数据逻辑即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign.fallback;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * FallBack</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rest02FallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">com</span>.demo.feign.Rest02 &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Default Data&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>添加<code>Sentinel</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- sentinel 服务保护 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件中开启<code>sentinel</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这样把调用的服务停止，然后去调用就会获得兜底数据了。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/">远程调用</category>
      
      
      <category domain="https://superlovelace.top/tags/OpenFeign/">OpenFeign</category>
      
      
      <comments>https://superlovelace.top/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于最近很长一段时间的断更</title>
      <link>https://superlovelace.top/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/</link>
      <guid>https://superlovelace.top/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/</guid>
      <pubDate>Tue, 18 Feb 2025 09:05:24 GMT</pubDate>
      
      <description>我回来了！</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="关于最近很长一段时间的断更">关于最近很长一段时间的断更</h2><p>很久没更新了，原因是之前的电脑坏掉了，这两天才把机械和固态盘里的数据给拿出来整理，所以相关的笔记都一直存着呢。库存，哈哈，今天一并都更新上，文档日期还是按当时写的日期来归档。好了，终于可以接起来继续更新我的博客了！</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      
      <comments>https://superlovelace.top/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SSL：WRONG_VERSION_NUMBER</title>
      <link>https://superlovelace.top/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/</link>
      <guid>https://superlovelace.top/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/</guid>
      <pubDate>Mon, 17 Feb 2025 14:11:43 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;SSL：WRONG-VERSION-NUMBER&quot;&gt;SSL：WRONG_VERSION_NUMBER&lt;/h2&gt;
&lt;p&gt;记录一次SSL部署成功后，接口请求依然报SSL错误的问题。&lt;/p&gt;
&lt;p&gt;首先排除SSL证据链不足，系统时间不正确，TLS配置不正确等问题。&lt;/p</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="SSL：WRONG-VERSION-NUMBER">SSL：WRONG_VERSION_NUMBER</h2><p>记录一次SSL部署成功后，接口请求依然报SSL错误的问题。</p><p>首先排除SSL证据链不足，系统时间不正确，TLS配置不正确等问题。</p><p>浏览器直接访问可以打开网站，但是postman等接口访问就一直报SSL异常：</p><p>类似参考资料中的这种异常代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">write EPROTO 8936192:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER:..\..\third_party\boringssl\src\ssl\tls_record.cc:231:<br></code></pre></td></tr></table></figure><p>通常通过域名访问80端口，出现阻断页，这里是关键！</p><p>参考资料中的是被上海蓝云阻断，</p><p>我这里遇到的是被当前服务器提供商机房拦截阻断。原因与参考资料中的阻断原因不同，这里是因为对应的景安备案系统中没有当前域名相关信息，域名是在阿里云的而且是在阿里云备案的。根据提示：1是没有在此系统备案，2是没有加入白名单，3是网站存在不适宜传播的内容。显然，3是不符合的。所以就去添加白名单，添加30分钟左右后，postman已可以成功访问。【但提示说未在此系统备案的需尽快完善信息，否则会在几天后将白名单的信息删除】，所以还是需要在此备案系统备案。已经备案的去转入即可。相关信息：<a href="https://beian.zzidc.com/main/help/showHelpContent?id=32">https://beian.zzidc.com/main/help/showHelpContent?id=32</a></p><p>参考资料：<a href="https://www.cnblogs.com/lulight/p/18292669">https://www.cnblogs.com/lulight/p/18292669</a></p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/">异常处理</category>
      
      
      
      <comments>https://superlovelace.top/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FlvPlayer缓冲中断问题</title>
      <link>https://superlovelace.top/2024/12/06/[FlvPlayer]%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/</link>
      <guid>https://superlovelace.top/2024/12/06/[FlvPlayer]%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/</guid>
      <pubDate>Fri, 06 Dec 2024 00:33:16 GMT</pubDate>
      
      <description>OAuth2.0的详细示例</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-title class_">FlvPlayer</span>] &gt; <span class="hljs-title class_">Maximum</span> buffering duration exceeded, suspend transmuxing task<br>[<span class="hljs-title class_">FlvPlayer</span>] &gt; <span class="hljs-title class_">Continue</span> loading <span class="hljs-keyword">from</span> paused position<br>flv.<span class="hljs-property">js</span>:<span class="hljs-number">10093</span> [<span class="hljs-title class_">FLVDemuxer</span>] &gt; <span class="hljs-title class_">Unsupported</span> tag type <span class="hljs-number">70</span>, skipped<br>flv.<span class="hljs-property">js</span>:<span class="hljs-number">10093</span> [<span class="hljs-title class_">FLVDemuxer</span>] &gt; <span class="hljs-title class_">Unsupported</span> tag type <span class="hljs-number">193</span>, skipped<br></code></pre></td></tr></table></figure><p>原因是<code>flv.js</code>缓冲直播视频流超过最大值后会停止继续缓冲，等到播放一定时长后，会自动从暂停点恢复。但是，这时出现不支持的标签类型并跳过的问题。</p><h2 id="问题解决">问题解决</h2><p>若出现此问题，但是视频播放不受影响，可忽略此问题。<br>我这边是出现此问题后，视频还没放完缓冲的数据，等播放到缓冲暂停点时，播放器就开始一直加载，而且无法播放了…<br>我去<code>flv.js</code>的<code>github</code>中的<code>issue</code>中看了，有提到相关的问题，但只是提了缓冲到最大会暂停缓冲的事，而且目前没有答复。</p><h3 id="解决方法：">解决方法：</h3><p>这算是一个异常点，可以通过捕获异常来解决。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> flv = flvjs.<span class="hljs-title function_">createPlayer</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;flv&#x27;</span>, url &#125;);<br>flv.<span class="hljs-title function_">attachMediaElement</span>(video);<br>art.<span class="hljs-property">flv</span> = flv;<br>flv.<span class="hljs-title function_">load</span>();<br>flv.<span class="hljs-title function_">on</span>(flvjs.<span class="hljs-property">Events</span>.<span class="hljs-property">ERROR</span>, <span class="hljs-function">(<span class="hljs-params">errorType, details</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Error: <span class="hljs-subst">$&#123;errorType&#125;</span>, Details: <span class="hljs-subst">$&#123;details&#125;</span>`</span>);<br>    <span class="hljs-comment">// 根据错误类型采取恢复措施</span><br>    <span class="hljs-keyword">switch</span> (errorType) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;NetworkError&#x27;</span>:<br>            <span class="hljs-comment">// 网络错误，尝试重新加载视频</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Network error, reloading video...&#x27;</span>)<br>            flv.<span class="hljs-title function_">load</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;MediaError&#x27;</span>:<br>            <span class="hljs-comment">// 媒体错误，尝试恢复播放</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Media error, recovering playback...&#x27;</span>)<br>            flv.<span class="hljs-title function_">recoverMediaError</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-comment">// 其他错误，尝试重新加载视频</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Unknown error, reloading video...&#x27;</span>)<br>            flv.<span class="hljs-title function_">load</span>();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>可根据自己的代码逻辑自行修改。</p><hr><p>以上为个人浅薄理解，亲身实践，如有更好的方法或者有需要改进的地方，欢迎评论区友好交流指正。</p><p>如果觉得有帮助的话，不妨点个赞和收藏，加个关注吧！</p><p>不定期更新遇到并解决的问题哦。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/">随机数</category>
      
      
      <comments>https://superlovelace.top/2024/12/06/[FlvPlayer]%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>获取springboot所有接口</title>
      <link>https://superlovelace.top/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/</link>
      <guid>https://superlovelace.top/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/</guid>
      <pubDate>Sat, 30 Nov 2024 07:12:40 GMT</pubDate>
      
      <description>获取springboot所有接口</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="获取springboot所有接口">获取springboot所有接口</h2><p><code>EndpointScanner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扫描所有可用接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointScanner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫描所有接口，处理后存到文件中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanAndWriteEndpointsToFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> applicationContext.getBean(RequestMappingHandlerMapping.class);<br><br>        <span class="hljs-comment">// 获取所有映射的路径</span><br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">endpoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 遍历所有的映射关系，获取每个接口的路径</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : handlerMethods.entrySet()) &#123;<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">mappingInfo</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> entry.getValue();<br><br>            Set&lt;String&gt; patterns = mappingInfo.getPatternsCondition().getPatterns();<br>            <span class="hljs-comment">// 获取请求方法</span><br>            Set&lt;RequestMethod&gt; methods = mappingInfo.getMethodsCondition().getMethods();<br>            <br>            <span class="hljs-comment">// 获取控制器类名和处理方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">controllerClass</span> <span class="hljs-operator">=</span> handlerMethod.getBeanType().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> handlerMethod.getMethod().getName();<br><br>            <span class="hljs-keyword">for</span> (String pattern : patterns) &#123;<br>                <span class="hljs-comment">// 过滤掉路径参数&#123;id&#125;</span><br>                <span class="hljs-keyword">if</span> (pattern.contains(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> pattern.substring(<span class="hljs-number">0</span>, pattern.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>));<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(substring).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                         .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                         .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(substring).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(pattern).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(pattern).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将接口路径写入文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file))) &#123;<br>            writer.write(endpoints.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将可用接口写入可访问接口列表文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointLoader</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointLoader</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EndpointScanner endpointScanner;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/secret/access_api_list.txt&quot;</span>;  <span class="hljs-comment">// 文件保存路径</span><br>        endpointScanner.scanAndWriteEndpointsToFile(filePath);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出示例：</p><p>假设接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br><span class="hljs-meta">@PostMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/api/products&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleProducts</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br></code></pre></td></tr></table></figure><p>文件存储：【请求类型】 【请求路径】 -&gt; 【所在类】【方法名】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GET /api/users -&gt; com.example.controller.UserController#getUsers<br>POST /api/users -&gt; com.example.controller.UserController#createUser<br>ANY /api/products -&gt; com.example.controller.ProductController#handleProducts<br></code></pre></td></tr></table></figure><p>可以视情况选择</p><p>例如只获取请求方法类型和请求路径</p><p><code>EndpointScanner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扫描所有可用接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointScanner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫描所有接口，处理后存到文件中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanAndWriteEndpointsToFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> applicationContext.getBean(RequestMappingHandlerMapping.class);<br><br>        <span class="hljs-comment">// 获取所有映射的路径</span><br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">endpoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 遍历所有的映射关系，获取每个接口的路径</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : handlerMethods.entrySet()) &#123;<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">mappingInfo</span> <span class="hljs-operator">=</span> entry.getKey();<br><br>            Set&lt;String&gt; patterns = mappingInfo.getPatternsCondition().getPatterns();<br>            <span class="hljs-comment">// 获取请求方法</span><br>            Set&lt;RequestMethod&gt; methods = mappingInfo.getMethodsCondition().getMethods();<br><br>            <span class="hljs-keyword">for</span> (String pattern : patterns) &#123;<br>                <span class="hljs-keyword">if</span> (pattern.contains(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> pattern.substring(<span class="hljs-number">0</span>, pattern.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>));<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(substring).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(substring).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(pattern).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(pattern).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将接口路径写入文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file))) &#123;<br>            writer.write(endpoints.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/api/">api</category>
      
      
      <comments>https://superlovelace.top/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>格式化控制台打印工具</title>
      <link>https://superlovelace.top/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <guid>https://superlovelace.top/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <pubDate>Fri, 22 Nov 2024 08:08:12 GMT</pubDate>
      
      <description>格式化控制台打印工具</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="格式化控制台打印工具">格式化控制台打印工具</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化控制台打印工具</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormatPrintUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出标题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化信息标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Title</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] --------------------------------[ &quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; ]--------------------------------&quot;</span>;<br>        System.out.println(start+title+end);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出成功信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化成功信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Success</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[32;1mINFO\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出通用信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化通用信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Info</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出警告信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化警告信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Warn</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[33;1mWARN\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出错误信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化错误信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Error</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[31;1mERROR\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出水平线分隔信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化水平线分隔信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Horizontal</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] --------------------------------------------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FormatPrintUtil.Title(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Info(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Warn(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Error(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Success(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Horizontal();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA/">控制台输出</category>
      
      
      <comments>https://superlovelace.top/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</title>
      <link>https://superlovelace.top/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/</link>
      <guid>https://superlovelace.top/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/</guid>
      <pubDate>Sun, 17 Nov 2024 13:42:53 GMT</pubDate>
      
      <description>生产环境下打包报错，记录解决方法。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="The-forked-VM-terminated-without-properly-saying-goodbye-VM-crash-or-System-exit-called">The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</h2><h3 id="完整错误：">完整错误：</h3><blockquote><p><code>The forked VM terminated without properly saying goodbye. VM crash or System.exit called? Command was cmd.exe /X /C &quot;D:\Program\Java\jre\bin\java -jar C:\Users\peter\AppData\Local\Temp\surefire8984743116361215564\surefirebooter3828924104254730190.jar C:\Users\peter\AppData\Local\Temp\surefire8984743116361215564 2024-11-17T20-08-43_528-jvmRun1 surefire1713296022132520594tmp surefire_04804249814728176955tmp&quot; Error occurred in starting fork, check output in log Process Exit Code: 1</code></p></blockquote><p>错误的大致意思是测试进程中遇到<code>System.exit(0);</code>的<code>jvm</code>退出代码，导致打包进程中断。</p><p>我确实有用到这段代码，但这是项目首次启动初始化数据库信息时发生异常的时候才会执行的逻辑！</p><p>去构建输出语句中发现是无法连接数据库：</p><blockquote><p><code>java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)</code></p></blockquote><h3 id="原因分析：">原因分析：</h3><blockquote><p>我是在开发环境下测试打包没问题后，将配置文件改成生产环境进行打包测试出现的。由于测试环境的数据库在本地是无法访问的，但这不应该是打包无法通过的原因。我一顿搜索，发现是我的测试类中有查询数据库的相关测试。因为在我的数据库初始化逻辑中，当Maven打包时，默认会执行到自定义的测试类中的方法，由于没有指定测试类方法的运行环境，所以在生产环境下打包时，在测试阶段Maven也会尝试连接数据库来测试相关测试类方法，因为连接不到测试类的数据库，从而产生了此问题。</p></blockquote><h3 id="解决方法：">解决方法：</h3><p>在测试类中指定测试类运行的环境即可。用注解<code>@ActiveProfiles</code></p><p>测试类示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>补充：</p><h4 id="1-使用-Maven-Surefire-插件配置"><strong>1. 使用 Maven Surefire 插件配置</strong></h4><p>Maven 的 Surefire 插件用于运行测试，可以通过配置参数来有条件地运行或跳过特定的测试。</p><h5 id="配置-pom-xml">配置 <code>pom.xml</code></h5><p>在 <code>pom.xml</code> 中为 Surefire 插件添加一个 <code>&lt;configuration&gt;</code> 节点，设置跳过特定环境（如生产）的测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0-M7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>$&#123;skipTests&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在打包命令中传递 <code>-DskipTests=true</code> 参数跳过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -DskipTests=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-使用-Spring-的-Profile-控制加载数据库相关测试"><strong>2. 使用 Spring 的 Profile 控制加载数据库相关测试</strong></h4><p>通过 Spring 的 <code>@ActiveProfiles</code> 或 <code>@IfProfileValue</code> 注解，可以控制测试方法或测试类是否执行。</p><h5 id="示例代码">示例代码</h5><p>为测试类指定运行环境（例如，只有在开发环境才执行）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDatabaseConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>application.properties</code> 中定义不同环境的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># src/main/resources/application-dev.properties</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/devdb</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">devuser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">devpassword</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># src/main/resources/application-prod.properties</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://prod-host:3306/proddb</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">produser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">prodpassword</span><br></code></pre></td></tr></table></figure><p>在生产环境打包时通过命令设置生产环境 Profile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package -Dspring.profiles.active=prod<br></code></pre></td></tr></table></figure><hr><h4 id="3-使用-EnabledIf-或-IfProfileValue-注解（仅运行特定环境测试）"><strong>3. 使用 <code>@EnabledIf</code> 或 <code>@IfProfileValue</code> 注解（仅运行特定环境测试）</strong></h4><p>你可以基于环境变量有条件地运行测试类。</p><h5 id="示例代码-2">示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IfProfileValue(name = &quot;env&quot;, value = &quot;dev&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDatabaseConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在生产环境打包时传递环境参数跳过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -Denv=prod<br></code></pre></td></tr></table></figure><hr><h4 id="4-通过-Maven-配置排除特定测试"><strong>4. 通过 Maven 配置排除特定测试</strong></h4><p>你可以通过 Maven Surefire 插件的 <code>&lt;excludes&gt;</code> 配置跳过特定测试类。</p><h5 id="配置-pom-xml-2">配置 <code>pom.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0-M7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/DatabaseTests.java<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生产环境打包时这些测试类将不会被执行。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">问题解决</category>
      
      
      <category domain="https://superlovelace.top/tags/junit/">junit</category>
      
      
      <comments>https://superlovelace.top/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>junit单元测试示例</title>
      <link>https://superlovelace.top/2024/11/14/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <guid>https://superlovelace.top/2024/11/14/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Thu, 14 Nov 2024 02:57:42 GMT</pubDate>
      
      <description>junit单元测试使用示例</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="junit单元测试"><code>junit</code>单元测试</h2><p><code>junit4</code>单元测试示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span> <span class="hljs-comment">// 用于指定测试环境，以避免生产环境下打包时运行此测试从而产生访问不到数据库的错误</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span> <span class="hljs-comment">// 使用 Spring 的测试运行器</span><br><span class="hljs-comment">// 不会启动 Web 环境，适用于非 Web 服务的集成测试</span><br><span class="hljs-meta">@SpringBootTest</span> <br><span class="hljs-comment">// 模拟 Web 环境，适用于 Web 层的控制器、过滤器等测试，但没有启动实际的 Web 服务器。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，使用配置文件中定义的端口进行测试。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，随机分配一个可用端口，适用于测试真实的 Web 请求和响应。</span><br><span class="hljs-comment">// @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>junit5</code>单元测试示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span> <span class="hljs-comment">// 用于指定测试环境，以避免生产环境下打包时运行此测试从而产生访问不到数据库的错误</span><br><span class="hljs-comment">// 不会启动 Web 环境，适用于非 Web 服务的集成测试</span><br><span class="hljs-meta">@SpringBootTest</span> <br><span class="hljs-comment">// 模拟 Web 环境，适用于 Web 层的控制器、过滤器等测试，但没有启动实际的 Web 服务器。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，使用配置文件中定义的端口进行测试。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，随机分配一个可用端口，适用于测试真实的 Web 请求和响应。</span><br><span class="hljs-comment">// @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>尽可能用到更多junit功能的测试示例</p><h3 id="JUnit-5-示例代码">JUnit 5 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.jupiter.api.Assertions.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.condition.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.params.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.params.provider.*;<br><br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JUnit5ExampleTest</span> &#123;<br><br>    <span class="hljs-comment">// 1. 定义一个测试前后的生命周期方法</span><br>    <br>    <span class="hljs-meta">@BeforeAll</span>  <span class="hljs-comment">// 所有测试方法执行之前执行一次的静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before All Tests&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterAll</span>  <span class="hljs-comment">// 在所有测试方法执行完毕之后执行一次的静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After All Tests&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeEach</span> <span class="hljs-comment">// 每个测试方法执行之前执行</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before Each Test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span> <span class="hljs-comment">// 每个测试方法执行之后执行</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After Each Test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 一个简单的测试，断言是否相等</span><br>    <span class="hljs-comment">// 断言是为了确保代码按预期运行，而默认的行为是 静默成功 和 失败时输出错误</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + <span class="hljs-number">3</span>;<br>        assertEquals(<span class="hljs-number">5</span>, sum, <span class="hljs-string">&quot;Sum should be 5&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 断言失败的测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">failedTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> * <span class="hljs-number">3</span>;<br>        assertNotEquals(<span class="hljs-number">10</span>, product, <span class="hljs-string">&quot;Product should not be 10&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 测试异常抛出</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> assertThrows(ArithmeticException.class, () -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>        &#125;);<br>        assertEquals(<span class="hljs-string">&quot;/ by zero&quot;</span>, exception.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 条件化测试（例如：只有在 Linux 系统上才会运行）</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledOnOs(OS.LINUX)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOnLinux</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running test on Linux OS&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledOnOs(OS.WINDOWS)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOnWindows</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running test on Windows OS&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 参数化测试 - 使用不同的输入进行多次测试</span><br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@ValueSource(ints = &#123;1, 2, 3&#125;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTestWithValueSource</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        assertTrue(number &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Number should be greater than 0&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 7. 参数化测试 - 使用方法提供参数</span><br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@MethodSource(&quot;provideNumbersForMultiplication&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTestWithMethodSource</span><span class="hljs-params">(<span class="hljs-type">int</span> number1, <span class="hljs-type">int</span> number2, <span class="hljs-type">int</span> expectedResult)</span> &#123;<br>        assertEquals(expectedResult, number1 * number2);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Stream&lt;Arguments&gt; <span class="hljs-title function_">provideNumbersForMultiplication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Stream.of(<br>            Arguments.of(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>),<br>            Arguments.of(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>),<br>            Arguments.of(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>)<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">// 8. 动态测试（动态生成的测试用例）</span><br>    <span class="hljs-meta">@TestFactory</span><br>    Stream&lt;DynamicTest&gt; <span class="hljs-title function_">dynamicTests</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Stream.of(<br>            DynamicTest.dynamicTest(<span class="hljs-string">&quot;Test 1&quot;</span>, () -&gt; assertEquals(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),<br>            DynamicTest.dynamicTest(<span class="hljs-string">&quot;Test 2&quot;</span>, () -&gt; assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">// 9. 快速失败的测试 - 确保一旦测试失败立即停止</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;fastFail&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fastFailTest</span><span class="hljs-params">()</span> &#123;<br>        assertTrue(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;This test should fail and stop immediately&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 10. 分组标记测试 - 用 @Tag 来标记测试的类别</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;unit&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unitTest</span><span class="hljs-params">()</span> &#123;<br>        assertTrue(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;This is a unit test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;integration&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">integrationTest</span><span class="hljs-params">()</span> &#123;<br>        assertTrue(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;This is an integration test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 11. 使用注解标注测试条件 - 条件注解</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledIfSystemProperty(named = &quot;os.name&quot;, matches = &quot;.*Windows.*&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOnlyForWindows</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This test will run only on Windows&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解释">解释</h3><ol><li><strong>生命周期方法 (<code>@BeforeAll</code>, <code>@AfterAll</code>, <code>@BeforeEach</code>, <code>@AfterEach</code>)</strong>:<ul><li><code>@BeforeAll</code>: 在所有测试方法执行之前执行一次的静态方法。</li><li><code>@AfterAll</code>: 在所有测试方法执行完毕之后执行一次的静态方法。</li><li><code>@BeforeEach</code>: 每个测试方法执行之前执行。</li><li><code>@AfterEach</code>: 每个测试方法执行完毕之后执行。</li></ul></li><li><strong>断言 (<code>assertEquals</code>, <code>assertNotEquals</code>, <code>assertTrue</code>, <code>assertThrows</code>)</strong>:<ul><li><code>assertEquals</code> 和 <code>assertNotEquals</code>: 用于断言预期结果与实际结果是否一致。</li><li><code>assertThrows</code>: 用于验证是否抛出了预期的异常。</li></ul></li><li><strong>条件化测试 (<code>@EnabledOnOs</code>, <code>@EnabledIfSystemProperty</code>)</strong>:<ul><li><code>@EnabledOnOs</code>: 只有在特定操作系统上才会运行此测试。</li><li><code>@EnabledIfSystemProperty</code>: 根据系统属性的值来决定是否执行此测试。</li></ul></li><li><strong>参数化测试 (<code>@ParameterizedTest</code>, <code>@ValueSource</code>, <code>@MethodSource</code>)</strong>:<ul><li><code>@ParameterizedTest</code>: 指定这是一个参数化的测试。</li><li><code>@ValueSource</code>: 使用不同的值进行多次测试。</li><li><code>@MethodSource</code>: 使用方法来提供参数。</li></ul></li><li><strong>动态测试 (<code>@TestFactory</code>, <code>DynamicTest</code>)</strong>:<ul><li>使用 <code>@TestFactory</code> 注解来创建动态生成的测试用例，可以根据需要动态地生成多个测试用例。</li></ul></li><li><strong>快速失败的测试 (<code>@Tag</code>)</strong>:<ul><li>使用 <code>@Tag</code> 可以为测试分类，并用 <code>@Tag(&quot;fastFail&quot;)</code> 快速标记失败测试。</li></ul></li></ol>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/">软件测试</category>
      
      
      <category domain="https://superlovelace.top/tags/junit/">junit</category>
      
      
      <comments>https://superlovelace.top/2024/11/14/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>系统信息工具类</title>
      <link>https://superlovelace.top/2024/11/13/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%B1%BB/</link>
      <guid>https://superlovelace.top/2024/11/13/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%B1%BB/</guid>
      <pubDate>Wed, 13 Nov 2024 03:19:53 GMT</pubDate>
      
      <description>定义了项目启动时即初始化并收集系统信息的静态常量，可以直接复制使用。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="系统信息工具类">系统信息工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-keyword">import</span> java.lang.management.ManagementFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系统信息工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> SystemInfo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 定义了系统信息静态常量，包括服务器信息、jvm信息和项目启动时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemInfo</span> &#123;<br><br>    <span class="hljs-comment">/////// 服务器信息 ////////</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 操作系统名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS_NAME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 系统架构</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS_ARCH;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 系统版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 主机名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOST_NAME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 主机ip地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOST_IP;<br><br>    <span class="hljs-comment">///////  Java虚拟机信息 ////////</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; java版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JAVA_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; java路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JAVA_HOME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_NAME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm规范版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_SPECIFICATION_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm启动参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_ARGUMENTS;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 项目路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PROJECT_DIR;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 启动时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String START_TIME;<br><br><br>    <span class="hljs-comment">// 初始化静态常量数据</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">inetAddress</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>            List&lt;String&gt; jvmArguments = ManagementFactory.getRuntimeMXBean().getInputArguments();<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            OS_NAME = System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>            OS_ARCH = System.getProperty(<span class="hljs-string">&quot;os.arch&quot;</span>);<br>            OS_VERSION = System.getProperty(<span class="hljs-string">&quot;os.version&quot;</span>);<br>            HOST_NAME = inetAddress.getHostName();<br>            HOST_IP = inetAddress.getHostAddress();<br><br>            JAVA_VERSION = System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>            JAVA_HOME = System.getProperty(<span class="hljs-string">&quot;java.home&quot;</span>);<br>            JVM_NAME = System.getProperty(<span class="hljs-string">&quot;java.vm.name&quot;</span>);<br>            JVM_VERSION = System.getProperty(<span class="hljs-string">&quot;java.vm.version&quot;</span>);<br>            JVM_SPECIFICATION_VERSION = System.getProperty(<span class="hljs-string">&quot;java.vm.specification.version&quot;</span>);<br>            JVM_ARGUMENTS = String.join(<span class="hljs-string">&quot;, &quot;</span>, jvmArguments);<br>            PROJECT_DIR = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>            START_TIME = sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出系统信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/13</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> SystemInfo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> org.example.utils</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toPrint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;系统信息&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;操作系统:&#x27;&quot;</span> + OS_NAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 系统架构=&#x27;&quot;</span> + OS_ARCH + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 系统版本=&#x27;&quot;</span> + OS_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 主机名称=&#x27;&quot;</span> + HOST_NAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 主机网络地址=&#x27;&quot;</span> + HOST_IP + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 版本=&#x27;&quot;</span> + JAVA_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 安装路径=&#x27;&quot;</span> + JAVA_HOME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 虚拟机名称=&#x27;&quot;</span> + JVM_NAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 虚拟机版本=&#x27;&quot;</span> + JAVA_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 虚拟机简介版本=&#x27;&quot;</span> + JVM_SPECIFICATION_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, JVM 运行参数=&#x27;&quot;</span> + JVM_ARGUMENTS + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 项目路径=&#x27;&quot;</span> + PROJECT_DIR + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 启动时间=&#x27;&quot;</span> + START_TIME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 测试主程序入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">SystemInfo</span> <span class="hljs-variable">systemInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemInfo</span>();<br>        System.out.println(systemInfo.toPrint());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/">工具类</category>
      
      
      <category domain="https://superlovelace.top/tags/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/">系统信息</category>
      
      
      <comments>https://superlovelace.top/2024/11/13/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Springboot 集成 Actuator 使用示例</title>
      <link>https://superlovelace.top/2024/11/13/Actuator%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</link>
      <guid>https://superlovelace.top/2024/11/13/Actuator%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</guid>
      <pubDate>Wed, 13 Nov 2024 01:16:39 GMT</pubDate>
      
      <description>springboot 集成 Actuator的使用示例</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Actuator-服务监控">Actuator &gt;&gt; 服务监控</h2><p>SpringBoot 2.7.18 - Actuator官方文档地址：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/actuator.html">https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/actuator.html</a></p><h3 id="Maven依赖">Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 服务监控 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-comment"># 暴露 EndPoint 以供访问，有jmx和web两种方式，exclude 的优先级高于 include</span><br>    <span class="hljs-attr">jmx:</span><span class="hljs-comment"># 供JMX使用的</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-comment"># 除非使用，否则就别开启</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>    <span class="hljs-comment"># 除非使用，否则就别开启</span><br>    <span class="hljs-attr">web:</span><span class="hljs-comment"># 供web使用的</span><br>      <span class="hljs-attr">exposure:</span><br>      <span class="hljs-comment"># exclude: &#x27;*&#x27;</span><br>        <span class="hljs-comment">#include: [&quot;health&quot;,&quot;info&quot;,&quot;beans&quot;,&quot;mappings&quot;,&quot;logfile&quot;,&quot;metrics&quot;,&quot;shutdown&quot;,&quot;env&quot;,&quot;prometheus&quot;]</span><br>      <span class="hljs-attr">include:</span> <span class="hljs-comment"># 正常开启这几个即可，不要全开，不然容易被攻击注入挖矿程序</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">health</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">info</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span>  <span class="hljs-comment"># 这是供普罗米修斯监控软件使用的</span><br>      <span class="hljs-attr">base-path:</span> <span class="hljs-string">/actuator</span>  <span class="hljs-comment"># 配置 Endpoint 的基础路径</span><br>      <span class="hljs-attr">cors:</span> <span class="hljs-comment"># 配置跨域资源共享</span><br>        <span class="hljs-attr">allowed-origins:</span> <span class="hljs-string">http://example.com</span><br>        <span class="hljs-attr">allowed-methods:</span> <span class="hljs-string">GET,POST</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 修改全局 endpoint 默认设置</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">auditevents:</span> <span class="hljs-comment"># 1、显示当前引用程序的审计事件信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">cache:</span><br>        <span class="hljs-attr">time-to-live:</span> <span class="hljs-string">10s</span> <span class="hljs-comment"># 配置端点缓存响应的时间</span><br>    <span class="hljs-attr">beans:</span> <span class="hljs-comment"># 2、显示一个应用中所有 Spring Beans 的完整列表，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">conditions:</span> <span class="hljs-comment"># 3、显示配置类和自动配置类的状态及它们被应用和未被应用的原因，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">configprops:</span> <span class="hljs-comment"># 4、显示一个所有@ConfigurationProperties的集合列表，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">env:</span> <span class="hljs-comment"># 5、显示来自Spring的 ConfigurableEnvironment的属性，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">flyway:</span> <span class="hljs-comment"># 6、显示数据库迁移路径，如果有的话，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">health:</span> <span class="hljs-comment"># 7、显示健康信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span>   <span class="hljs-comment"># 显示详细信息，例如宕机原因</span><br>    <span class="hljs-attr">info:</span> <span class="hljs-comment"># 8、显示任意的应用信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">liquibase:</span> <span class="hljs-comment"># 9、展示任何Liquibase数据库迁移路径，如果有的话，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">metrics:</span> <span class="hljs-comment"># 10、展示当前应用的metrics信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">mappings:</span> <span class="hljs-comment"># 11、显示一个所有@RequestMapping路径的集合列表，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">scheduledtasks:</span> <span class="hljs-comment"># 12、显示应用程序中的计划任务，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">sessions:</span> <span class="hljs-comment"># 13、允许从Spring会话支持的会话存储中检索和删除(retrieval and deletion)用户会话。使用Spring Session对反应性Web应用程序的支持时不可用。默认开启。</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">shutdown:</span> <span class="hljs-comment"># 14、允许应用以优雅的方式关闭，默认关闭</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">threaddump:</span> <span class="hljs-comment"># 15、执行一个线程dump</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># web 应用时可以使用以下端点</span><br>    <span class="hljs-attr">heapdump:</span> <span class="hljs-comment"># 16、    返回一个GZip压缩的hprof堆dump文件，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">jolokia:</span> <span class="hljs-comment"># 17、通过HTTP暴露JMX beans（当Jolokia在类路径上时，WebFlux不可用），默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">logfile:</span> <span class="hljs-comment"># 18、返回日志文件内容（如果设置了logging.file或logging.path属性的话），支持使用HTTP Range头接收日志文件内容的部分信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">prometheus:</span> <span class="hljs-comment">#19、以可以被Prometheus服务器抓取的格式显示metrics信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="配置类">配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.Info;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义服务器监控信息 &gt;&gt;&gt; Actuator</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> CustomInfoContributor</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> org.example.config</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomInfoContributor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        Map&lt;String, String&gt; infoDetails = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        infoDetails.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;MyApplication&quot;</span>);<br>        infoDetails.put(<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-string">&quot;1.0.0&quot;</span>);<br>        infoDetails.put(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;这是一段描述。&quot;</span>);<br><br>        <span class="hljs-comment">// 将 Map 转为不可修改的 Map</span><br>        infoDetails = Collections.unmodifiableMap(infoDetails);<br><br>        builder.withDetail(<span class="hljs-string">&quot;app&quot;</span>, infoDetails);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用">使用</h3><p>默认接口为 <code>/actuator</code>，其中包含了所有已开放的可供访问的接口</p><p>Spring Boot Actuator 的 <code>/actuator/metrics</code> 端点提供了多种系统和 JVM 指标数据。以下是一些关键的指标：</p><ul><li><strong>CPU</strong>：可以查看当前 CPU 使用情况，例如：<ul><li><code>system.cpu.usage</code>：系统的整体 CPU 使用率（0 到 1 之间的小数）。</li><li><code>process.cpu.usage</code>：当前 Java 进程的 CPU 使用率。</li></ul></li><li><strong>内存</strong>：提供堆内存和非堆内存的使用情况。<ul><li><code>jvm.memory.used</code>：已用内存，按区域（如 <code>heap</code> 和 <code>non-heap</code>）划分。</li><li><code>jvm.memory.max</code>：最大内存。</li><li><code>jvm.memory.committed</code>：已分配给 JVM 的内存量。</li></ul></li><li><strong>磁盘</strong>：磁盘存储信息。<ul><li><code>disk.total</code>：总磁盘空间。</li><li><code>disk.free</code>：剩余磁盘空间。</li><li><code>disk.usable</code>：可用磁盘空间。</li></ul></li><li><strong>Java 虚拟机</strong>：可以监控 JVM 的线程、垃圾回收等。<ul><li><code>jvm.threads.live</code>：当前活动线程数。</li><li><code>jvm.threads.peak</code>：线程的峰值数量。</li><li><code>jvm.gc.*</code>：垃圾回收统计，如 <code>jvm.gc.memory.allocated</code>（分配的内存量）、<code>jvm.gc.pause</code>（GC 暂停时间）。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/">服务监控</category>
      
      
      <category domain="https://superlovelace.top/tags/Actuator/">Actuator</category>
      
      
      <comments>https://superlovelace.top/2024/11/13/Actuator%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
