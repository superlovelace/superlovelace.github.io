<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>四月黎明 | 棱境的个人博客站点</title>
    <link>https://superlovelace.top/</link>
    
    <atom:link href="https://superlovelace.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>记录日常学习内容，分享问题解决方法。主要内容包括Java、Python、C++、爬虫和数据结构等相关知识。其中，技术框架包括Java框架Spring、SpringBoot、SpringMVC和Mybatis；Python框架Django、Flask等。此外还有服务器搭建、项目部署，静态博客的搭建等知识总结，不定时更新中...</description>
    <pubDate>Mon, 06 Nov 2023 15:58:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>MySQL在线安装指南</title>
      <link>https://superlovelace.top/2023/11/06/InstallMySQL/</link>
      <guid>https://superlovelace.top/2023/11/06/InstallMySQL/</guid>
      <pubDate>Mon, 06 Nov 2023 15:52:56 GMT</pubDate>
      
        
        
      <description>&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;MySQL在线安装指南（Linux）&quot;&gt;&lt;a href=&quot;#MySQL在线安装指南（Linux）&quot; class=&quot;headerlink&quot; title=&quot;MySQL在线安装指南（Linux）&quot;&gt;&lt;/a&gt;&lt;strong</description>
        
      
      
      
      <content:encoded><![CDATA[<span id="more"></span><h1 id="MySQL在线安装指南（Linux）"><a href="#MySQL在线安装指南（Linux）" class="headerlink" title="MySQL在线安装指南（Linux）"></a><strong>MySQL在线安装指南（Linux）</strong></h1><p>说明：</p><ul><li>Linux版本为：CentOS 7 </li><li>MySQL版本为：mysql-8.0</li><li>终端为：FinalShell</li></ul><h3 id="一、首次安装MySQL"><a href="#一、首次安装MySQL" class="headerlink" title="一、首次安装MySQL"></a>一、首次安装MySQL</h3><h5 id="1-输入以下命令，获取rpm文件"><a href="#1-输入以下命令，获取rpm文件" class="headerlink" title="1.输入以下命令，获取rpm文件"></a>1.输入以下命令，获取rpm文件</h5><p>（ps：下载文件等一会就好）</p><ul><li>输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">wget -i -c https:<span class="hljs-comment">//dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></code></pre></td></tr></table></figure><p>如果显示wget未找到命令，则需要先安装wget：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install wget<br></code></pre></td></tr></table></figure><p>此时，如果进入目录&#x2F;etc&#x2F;yum.repos.d（命令：cd &#x2F;etc&#x2F;yum.repos.d   之后输入命令：ls ）</p><p>可以看到新增了两个文件:</p><p>mysql-community.repo</p><p>mysql-community-source.repo</p><h5 id="2-安装MySQL需要的RPM文件"><a href="#2-安装MySQL需要的RPM文件" class="headerlink" title="2.安装MySQL需要的RPM文件"></a>2.安装MySQL需要的RPM文件</h5><ul><li>输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install mysql80-community-release-el7-<span class="hljs-number">3.</span>noarch.rpm<br></code></pre></td></tr></table></figure><h5 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3.安装MySQL"></a>3.安装MySQL</h5><h6 id="（ps：下载文件等一会就好）"><a href="#（ps：下载文件等一会就好）" class="headerlink" title="（ps：下载文件等一会就好）"></a>（ps：下载文件等一会就好）</h6><ul><li>输入命令：（这里如果出现问题）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install mysql-community-server<br></code></pre></td></tr></table></figure><ul><li><p>这里如果出现问题:Error Unable to find a match : mysql-community-server</p></li><li><p>则输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">yum module disable mysql<br>yum -y install mysql-community-server<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-启动MySQL"><a href="#4-启动MySQL" class="headerlink" title="4.启动MySQL"></a>4.启动MySQL</h5><h6 id="ps：安装完成后，就可以启动了"><a href="#ps：安装完成后，就可以启动了" class="headerlink" title="(ps：安装完成后，就可以启动了)"></a>(ps：安装完成后，就可以启动了)</h6><ul><li>启动命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">service mysqld start<br></code></pre></td></tr></table></figure><ul><li>检测mysql是否正在启动命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl|grep mysql<br></code></pre></td></tr></table></figure><ul><li>如果出现以下情况，则已经成功启动（首次安装一般很安全，不会有什么错误）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mysqld.service                         loaded active running   MySQL Server<br></code></pre></td></tr></table></figure><h5 id="5-开机自启"><a href="#5-开机自启" class="headerlink" title="5.开机自启"></a>5.开机自启</h5><h6 id="ps：若不想每次手动启动，则可以让其开机自启"><a href="#ps：若不想每次手动启动，则可以让其开机自启" class="headerlink" title="(ps：若不想每次手动启动，则可以让其开机自启)"></a>(ps：若不想每次手动启动，则可以让其开机自启)</h6><ul><li>输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl enable mysqld<br></code></pre></td></tr></table></figure><ul><li>再输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl daemon-reload<br></code></pre></td></tr></table></figure><h5 id="6-修改初始密码"><a href="#6-修改初始密码" class="headerlink" title="6.修改初始密码"></a>6.修改初始密码</h5><h6 id="（ps：MySQL初始密码是自动随机生成的，需要修改后使用）"><a href="#（ps：MySQL初始密码是自动随机生成的，需要修改后使用）" class="headerlink" title="（ps：MySQL初始密码是自动随机生成的，需要修改后使用）"></a>（ps：MySQL初始密码是自动随机生成的，需要修改后使用）</h6><ol><li>默认密码保存在&#x2F;var&#x2F;log&#x2F;mysqld.log文件中</li><li>我们需要进入MySQL日志文件查看初始密码：</li></ol><ul><li>输入命令，打开日志文件：l9pfsN&#x3D;&amp;LE7s</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">vi /<span class="hljs-keyword">var</span>/log/mysqld.log<br></code></pre></td></tr></table></figure><ul><li>找到日志中的这么一行，root@localhost：之后的  GEu9UZmZqu+y  就是初始密码（看看自己的是多少）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2021</span>-<span class="hljs-number">02</span>-01T11:<span class="hljs-number">10</span>:<span class="hljs-number">03.</span>616082Z <span class="hljs-number">1</span> [Note] A temporary password is generated <span class="hljs-keyword">for</span> root<span class="hljs-meta">@localhost</span>: GEu9UZmZqu+y<br></code></pre></td></tr></table></figure><p>然后按一下Esc键，再输入:wq退出文件模式</p><ul><li>输入以下命令，进入MySQL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -u root -p<br></code></pre></td></tr></table></figure><p>根据提示输入之前在日志文件内的初始密码（密码默认在屏幕上不显示，但输入有效）后，即可进入MySQL</p><p>原来一开始是没有密码的,在初始化的时候有个密码,只是相当于临时密码:<br> 直接执行设置密码即可:</p><ul><li>修改密码命令（例如<a href="mailto:&#65;&#x73;&#x64;&#64;&#49;&#50;&#54;&#x2e;&#99;&#111;&#109;">&#65;&#x73;&#x64;&#64;&#49;&#50;&#54;&#x2e;&#99;&#111;&#109;</a>）</li><li>MySQL默认的密码策略是要包含数字、字母及特殊字符（区分大小写）；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter user user() identified by &quot;Asd@126.com&quot;;<br></code></pre></td></tr></table></figure><p>如果出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<br></code></pre></td></tr></table></figure><p>这是因为密码太简单了，可以把密码设的复杂一点或者百度降低密码策略等级。</p><p>（ps：我的示例代码是没问题的哦，可以参考）</p><p><strong>注意：Mysql有自己的密码策略，默认密码策略等级是1，即MEDIUM，中等级别。</strong></p><p>除此之外还有0，即LOW，简单级别。2，即STRONG，复杂级别。复杂级别需要提供密码字典文件。</p><p>详细内容可自行百度查询，这里不再赘述…（ps：嗯，只说自己实践过的，这里没试过，就不说了）</p><p>然后需要给改过的密码授权远程访问权限</p><p>（ps：可以用数据库软件远程连接）</p><ul><li>授权命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;Asd@126.com&#x27;;<br>grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;Asd@126.com&#x27;;<br></code></pre></td></tr></table></figure><p><strong>注意：’  ‘里输入自己设置的mysql密码。</strong></p><ul><li>刷新授权</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">flush privileges;<br></code></pre></td></tr></table></figure><p>然后退出MySQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">exit<br></code></pre></td></tr></table></figure><h5 id="6-开放MySQL端口"><a href="#6-开放MySQL端口" class="headerlink" title="6.开放MySQL端口"></a>6.开放MySQL端口</h5><p><strong>注：阿里的服务器可直接在控制台开放端口，虚拟机的话必须这么弄</strong></p><ul><li>在防火墙开放端口3306</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">firewall-cmd --zone=<span class="hljs-keyword">public</span> --add-port=<span class="hljs-number">3306</span>/tcp --permanent<br></code></pre></td></tr></table></figure><ul><li>刷新防火墙规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>然后就可以用数据库软件navicat或者SQLyog来远程连接数据库了</p><p>主机名或IP地址输入你虚拟机的IP，然后测试连接，如果没成功可再重开放一次端口后进行尝试。</p><h2 id="二、卸载后重装MySQL"><a href="#二、卸载后重装MySQL" class="headerlink" title="二、卸载后重装MySQL"></a>二、卸载后重装MySQL</h2><p>安装方式和首次安装的步骤一样，区别在于有没有卸载干净之前安装的MySQL</p><h3 id="1-卸载MySQL"><a href="#1-卸载MySQL" class="headerlink" title="1.卸载MySQL"></a>1.卸载MySQL</h3><ul><li>查看已安装的mysql</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rpm -qa | grep -i mysql<br></code></pre></td></tr></table></figure><ul><li>逐个卸载列出的文件(这里命令示例的是MySQL5.7)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum remove mysql-community-server-<span class="hljs-number">5.7</span><span class="hljs-number">.33</span>-<span class="hljs-number">1.</span>el7.x86_64<br></code></pre></td></tr></table></figure><ul><li>最重要的一步，删除lib下的mysql文件和log下的mysql.log日志文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rm -R /<span class="hljs-keyword">var</span>/lib/mysql<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/<span class="hljs-keyword">var</span>/log/mysql.log<br></code></pre></td></tr></table></figure><h3 id="2-再次安装MySQL"><a href="#2-再次安装MySQL" class="headerlink" title="2.再次安装MySQL"></a>2.再次安装MySQL</h3><p><strong>注：重复首次安装步骤即可</strong></p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/">安装指南</category>
      
      
      <category domain="https://superlovelace.top/tags/MySQL/">MySQL</category>
      
      
      <comments>https://superlovelace.top/2023/11/06/InstallMySQL/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MyBatis学习笔记二</title>
      <link>https://superlovelace.top/2023/10/25/MyBatis_2/</link>
      <guid>https://superlovelace.top/2023/10/25/MyBatis_2/</guid>
      <pubDate>Wed, 25 Oct 2023 10:57:10 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;本文是第二篇MyBatis的学习笔记，这次的比较深入理论，记录各个分部的功能和作用。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本文是第二篇MyBatis的学习笔记，这次的比较深入理论，记录各个分部的功能和作用。</p></blockquote><span id="more"></span><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis"></p><hr><h2 id="一、XML配置"><a href="#一、XML配置" class="headerlink" title="一、XML配置"></a>一、XML配置</h2><h3 id="1-属性（properties）"><a href="#1-属性（properties）" class="headerlink" title="1.属性（properties）"></a>1.属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 用于连接外部配置文件 --&gt;</span><br><span class="hljs-comment">&lt;!--    外部配置文件路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--同名配置优先使用外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-类型别名（typeAliases）"><a href="#2-类型别名（typeAliases）" class="headerlink" title="2.类型别名（typeAliases）"></a>2.类型别名（typeAliases）</h3><p>1.类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p><p>2.也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zmq.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>实体类比较少的时候，用第一种方式。</p><p>若实体类非常多，则建议用第二种。</p><p>第一种可以DIY别名，第二种不行。如果非要改，要在实体类添加注解</p><h3 id="3-设置（settings）"><a href="#3-设置（settings）" class="headerlink" title="3.设置（settings）"></a>3.设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-映射器（mappers）"><a href="#4-映射器（mappers）" class="headerlink" title="4.映射器（mappers）"></a>4.映射器（mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p><p>方式一：【推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式四：扫描包进行绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些配置会告诉 MyBatis 去哪里找映射文件</p><h2 id="二、XML映射文件"><a href="#二、XML映射文件" class="headerlink" title="二、XML映射文件"></a>二、XML映射文件</h2><h3 id="1-结果映射"><a href="#1-结果映射" class="headerlink" title="1.结果映射"></a>1.结果映射</h3><h4 id="1-resultMap"><a href="#1-resultMap" class="headerlink" title="1.resultMap"></a><code>1.resultMap</code></h4><p>结果集映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>   name   <span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">id</span>   name   password<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    结果集映射--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>            select * from mydb.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点：</p><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂语句，描述他们的关系就可以</li></ul><h3 id="2-日志工厂"><a href="#2-日志工厂" class="headerlink" title="2.日志工厂"></a>2.日志工厂</h3><h4 id="1-STDOUT-LOGGING标准日志"><a href="#1-STDOUT-LOGGING标准日志" class="headerlink" title="1.STDOUT_LOGGING标准日志"></a>1.STDOUT_LOGGING标准日志</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标准日志工厂实现--&gt;</span><br>    <span class="hljs-comment">&lt;!--  日志的值：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一次id查询的控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>Opening JDBC Connection<br>Created connection 786041152.<br>Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>==&gt;  Preparing: select * from mydb.user where id = ? <br>==&gt; Parameters: 1(Integer)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: 1, alice, 123456<br>&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;alice&#x27;, password=&#x27;123456&#x27;&#125;<br>Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>Returned connection 786041152 to pool.<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h4 id="2-LOG4J"><a href="#2-LOG4J" class="headerlink" title="2.LOG4J"></a>2.LOG4J</h4><p>引入Log4j依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加入log4j支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Log4j配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zmq.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><p>一次id查询的控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.<br>[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection 660879561.<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[com.zmq.dao.UserDao.getUserById]-==&gt;  Preparing: select * from mydb.user where id = ? <br>[com.zmq.dao.UserDao.getUserById]-==&gt; Parameters: 1(Integer)<br>[com.zmq.dao.UserDao.getUserById]-&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;alice&#x27;, password=&#x27;123456&#x27;&#125;<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection 660879561 to pool.<br></code></pre></td></tr></table></figure><p>简单使用</p><p>1.在要使用的log4j的类中，导入包import org.apache.log4j.Logger;</p><p>2.日志对象，参数为当前类的Class</p><p>3.日志级别</p><h2 id="三、分页"><a href="#三、分页" class="headerlink" title="三、分页"></a>三、分页</h2><p>减少数据处理量</p><h4 id="1-使用limit分页"><a href="#1-使用limit分页" class="headerlink" title="1.使用limit分页"></a>1.使用limit分页</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">语法：<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> startIndex,pagesize;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>;#[0,n]<br></code></pre></td></tr></table></figure><p>使用Mybatis实现分页，核心SQL</p><p>1.接口</p><p>2.Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from mydb.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByLimit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        HashMap&lt;String,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;();<br>        map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br>        List&lt;User&gt; userList = userDao.getUserByLimit(map);<br>        <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-RowBounds分页"><a href="#2-RowBounds分页" class="headerlink" title="2.RowBounds分页"></a>2.RowBounds分页</h4><p>不再使用SQL 实现分页</p><p>1.接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页二</span><br><span class="hljs-comment">//UserDao.java</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>2.mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Mapper.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from mydb.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>&#123;<br><br>       <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>       <span class="hljs-comment">//获取sqlSession对象</span><br>       <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>       List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.zmq.dao.UserDao.getUserByRowBounds&quot;</span>,<span class="hljs-literal">null</span>,rowBounds);<br><br>       <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>           System.out.println(user);<br>       &#125;<br>       <span class="hljs-comment">//关闭sqlSession</span><br>       sqlSession.close();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="3-分页插件"><a href="#3-分页插件" class="headerlink" title="3.分页插件"></a>3.分页插件</h4><h5 id="pagehelper"><a href="#pagehelper" class="headerlink" title="pagehelper"></a>pagehelper</h5><p><a href="https://pagehelper.github.io/docs/howtouse/">官方文档</a></p><p>官方文档写的很详细，这里不再展开</p><h2 id="四、注解"><a href="#四、注解" class="headerlink" title="四、注解"></a>四、注解</h2><h4 id="1-注解在接口实现"><a href="#1-注解在接口实现" class="headerlink" title="1.注解在接口实现"></a>1.注解在接口实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@select(&quot;select * from user&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//有多个参数时，必须加@Param注解</span><br><span class="hljs-meta">@Select(&quot;Select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><br>User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id，<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;<br><br><span class="hljs-comment">//引用对象不需要写@Param</span><br><span class="hljs-meta">@Insert(&quot;insert into User&#123;id,name,password&#125; values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-comment">//引用对象不需要写@Param</span><br><span class="hljs-meta">@Update(&quot;update User set name=#&#123;name&#125;,pwd=#&#123;passwoord&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">UpdateUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-meta">@Delete(&quot;delete * from user where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-核心配置文件绑定接口"><a href="#2-核心配置文件绑定接口" class="headerlink" title="2.核心配置文件绑定接口"></a>2.核心配置文件绑定接口</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zmq.dao.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>本质：反射机制实现</p><p>底层：动态代理</p><p>对于像 BlogMapper 这样的映射器类来说，还有另一种方法来完成语句映射。         </p><p>它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。比如，上面的 XML         示例可以被替换成如下的配置：       </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> org.mybatis.example;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogMapper</span> </span>&#123;<br>  <span class="hljs-meta">@Select</span>(<span class="hljs-string">&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;</span>)<br>  <span class="hljs-function">Blog <span class="hljs-title">selectBlog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​         使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java  注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。       </p><p>​         选择何种方式来配置映射，以及认为是否应该要统一映射语句定义的形式，完全取决于你和你的团队。         换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和 XML         的语句映射方式间自由移植和切换。       </p><h4 id="4-CRUD"><a href="#4-CRUD" class="headerlink" title="4.CRUD"></a>4.CRUD</h4><p>注：查询是不需要提交事务的！涉及数据库变动的才需要！</p><p>我们可以在工具类的时候实现自动提交事务！</p><p>但是开发测试时，推荐设置为非自动提交，可以防止提交错误的东西进数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SqlSession 完全包含了面向数据库执行SQL命令的所有方法public static SqlSession getSqlSession()&#123;</span><br><span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><p>此处省略。</p><p>方法如4.1代码所示。</p><p><strong>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</strong></p><h5 id="关于-Param-注解："><a href="#关于-Param-注解：" class="headerlink" title="关于@Param()注解："></a>关于@Param()注解：</h5><ul><li>基本类型的参数是String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名 ！</li></ul><h5 id="这里说一下-和-的区别："><a href="#这里说一下-和-的区别：" class="headerlink" title="这里说一下#{}和${}的区别："></a>这里说一下#{}和${}的区别：</h5><ul><li>#{}是预编译处理，${}是字符串替换。</li><li>Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的 set 方法来赋值；</li><li>Mybatis 在处理${}时，就是把${}替换成变量的值。</li><li>使用#{}可以有效的防止 SQL 注入，提高系统安全性。</li></ul><p>Mybatis排序时使用order by动态参数时，使用${}，而不是#{}</p><h4 id="5-Lombok"><a href="#5-Lombok" class="headerlink" title="5.Lombok"></a>5.Lombok</h4><ul><li>是一个Java库</li><li>也是个插件</li><li>也是个工具</li><li>再也不用写get,set等方法了，只需要在类上加注解就可以</li><li>一个可以偷懒的，解决你手动写get和set方法的第三方插件</li></ul><p>使用步骤：</p><ol><li><p>在IDEA中安装Lombok插件！</p></li><li><p>导入jar包（<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok">去Maven仓库搜索</a>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这是我写笔记的时候的最新版，追求稳定就用使用人数多的 --&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上加注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-comment">//无参构造，get和set，tostring,equals和hashcode方法</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">//所有构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">//构建了有参，无参会隐藏，必须显式无参构造</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Lombok可以使用的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span>  -----&gt;Get和Set方法，可以放在类上（构建所有），也可以放在字段上（指定单个构建）<br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span>   -----&gt;ToString方法<br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>  -----&gt;所有构造方法<br><span class="hljs-meta">@RequiredArgsConstructor</span>  -----&gt;有参构造方法<br><span class="hljs-meta">@NoArgsConstructor</span>  -----&gt;无参构造方法<br><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span>, <span class="hljs-meta">@CustomLog</span><br><span class="hljs-meta">@Data</span>  -----&gt;无参构造，get和set，tostring,equals和hashcode方法<br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@With</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@val</span><br><span class="hljs-meta">@var</span><br>experimental <span class="hljs-meta">@var</span><br><span class="hljs-meta">@UtilityClass</span><br></code></pre></td></tr></table></figure><p><code>注：@RequiredArgsConstructor</code>在类上使用，这个注解可以生成带参或者不带参的构造方法。<br>若带参数，只能是类中所有带有<code>@NonNull</code>注解的和以<code>final</code>修饰的未经初始化的字段，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">//但这里爆红未初始化变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以平常还是直接这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-comment">//无参构造，get和set，tostring,equals和hashcode方法</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">//所有构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">//构建了有参，无参会隐藏，必须显式无参构造</span><br><span class="hljs-comment">//有参构造如果要重载的话，还是要自己写代码的</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：此工具看工作环境，用不用看自己，适合开发的才是王道。</p></li></ol><h2 id="五、关系映射"><a href="#五、关系映射" class="headerlink" title="五、关系映射"></a>五、关系映射</h2><h3 id="1-多对一关系"><a href="#1-多对一关系" class="headerlink" title="1.多对一关系"></a>1.多对一关系</h3><p>多对一：多个学生对应一个老师—–&gt;关联</p><p>一对多：一个老师教一群学生———&gt;集合</p><hr><p>注意：</p><p>​多表关联一般会用到外键，外键本身是为了实现强一致性，所以如果需要正确性&gt;性能的话，还是建议使用外键，它可以让我们在数据库的层面保证数据的完整性和一致性。</p><p>​当然不用外键，你也可以在业务层进行实现。不过，这样做也同样存在一定的风险，因为这样，就会让业务逻辑会与数据具备一定的耦合性。也就是业务逻辑和数据必须同时修改。而且在工作中，业务层可能会经常发生变化。</p><p>​当然，很多互联网的公司，尤其是超大型的数据应用场景，大量的插入，更新和删除在外键的约束下会降低性能，同时数据库在水平拆分和分库的情况下，数据库端也做不到执行外键约束。另外，在高并发的情况下，外键的存在也会造成额外的开销。因为每次更新数据，都需要检查另外一张表的数据，也容易造成死锁。<br>所以在这种情况下，尤其是大型项目中后期，可以采用业务层来实现，取消外键提高效率。</p><p>​不过在SQL学习之初，包括在系统最初设计的时候，还是建议你采用规范的数据库设计，也就是采用外键来对数据表进行约束。因为这样可以建立一个强一致性，可靠性高的数据库结构，也不需要在业务层来实现过多的检查。<br>​当然在项目后期，业务量增大的情况下，你需要更多考虑到数据库性能问题，可以取消外键的约束，转移到业务层来实现。而且在大型互联网项目中，考虑到分库分表的情况，也会降低外键的使用。</p><p>​不过在SQL学习，以及项目早期，还是建议你使用外键。在项目后期，你可以分析有哪些外键造成了过多的性能消耗。一般遵循2&#x2F;8原则，会有20%的外键造成80%的资源效率，你可以只把这20%的外键进行开放，采用业务层逻辑来进行实现，当然你需要保证业务层的实现没有错误。不同阶段，考虑的问题不同。当用户和业务量增大的时候，对于大型互联网应用，也会通过减少外键的使用，来减低死锁发生的概率，提高并发处理能力。</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/* 多对一训练数据库准备 */<br>/* 数据库首次执行 */<br>USE mydb<br><br>/* 数据库第二次执行 */<br>/* 创建teacher表 */<br>CREATE TABLE `teacher`(<br>`id` INT(10) NOT NULL,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    PRIMARY KEY (`id`)<br>)ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>/* 数据库第三次执行 */<br>/* 往teacher表插入数据 */<br>INSERT INTO teacher(`id`,`name`) VALUES (1,&#x27;艾莎&#x27;);<br><br>/* 数据库第四次执行 */<br>/* 创建student表 */<br>CREATE TABLE `student`(<br>`id` INT(10) NOT NULL,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    `tid` INT(10) DEFAULT NULL,<br>    PRIMARY KEY (`id`),<br>    KEY `fktid` (`tid`),<br>    CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`)<br>)ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>/* 数据库第五次执行 */<br>/* 往Student表插入数据 */<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (1,&#x27;张三&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (2,&#x27;李四&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (3,&#x27;王五&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (4,&#x27;赵六&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (5,&#x27;孙七&#x27;,1);<br></code></pre></td></tr></table></figure><h4 id="（1）测试环境搭建"><a href="#（1）测试环境搭建" class="headerlink" title="（1）测试环境搭建"></a>（1）测试环境搭建</h4><p>1.导入lombok（可选，自己喜欢就用）</p><p>2.新建实体类 Teacher,Student</p><p>3.建立Mapper 接口</p><p>4.建立Mapper.xml文件</p><p>5.在核心配置文件中绑定注册我们的Mapper接口或文件！【方式很多，随心选】</p><p>6.测试查询是否能成功！</p><h4 id="（2）按照查询嵌套处理"><a href="#（2）按照查询嵌套处理" class="headerlink" title="（2）按照查询嵌套处理"></a>（2）按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.StudentMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        思路：</span><br><span class="hljs-comment">             1.查询所有学生信息</span><br><span class="hljs-comment">             2.根据查询出来的学生的id，寻找对应的老师</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>        select * from student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--  复杂的属性，我们需要单独处理 对象： association 集合：collection --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）按照结果嵌套处理"><a href="#（3）按照结果嵌套处理" class="headerlink" title="（3）按照结果嵌套处理"></a>（3）按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按照结果嵌套处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>        select  s.id sid,s.name sname,t.name tname<br>        from student s,teacher t<br>        where s.tid = t.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-一对多处理"><a href="#2-一对多处理" class="headerlink" title="2.一对多处理"></a>2.一对多处理</h3><p>一个老师拥有多个学生———-&gt;对于老师来说，就是一对多的关系！</p><h4 id="（1）测试环境搭建-1"><a href="#（1）测试环境搭建-1" class="headerlink" title="（1）测试环境搭建"></a>（1）测试环境搭建</h4><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; student;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tid;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.Teacher;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TeacherMapper</span> &#123;<br><br>    <span class="hljs-comment">//获取指定老师的学生和老师的信息</span><br>    Teacher <span class="hljs-title function_">getTeacher2</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br><br>    Teacher <span class="hljs-title function_">getTeacher3</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）按照查询嵌套处理-1"><a href="#（2）按照查询嵌套处理-1" class="headerlink" title="（2）按照查询嵌套处理"></a>（2）按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按结果嵌套查询--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>        select s.id sid,s.name sname,t.name tname,t.id tid<br>        from student s,teacher t<br>        where s.tid = t.id and t.id = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--        javatype指定属性的类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）按照结果嵌套处理-1"><a href="#（3）按照结果嵌套处理-1" class="headerlink" title="（3）按照结果嵌套处理"></a>（3）按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 按照查询嵌套处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher3&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ofType泛型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select * from student where tid = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>关联 - association 【多对一】</li><li>集合 - collection 【一对多】</li><li>JavaType &amp; oftype<ol><li>javaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型。</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><h2 id="六、动态SQL"><a href="#六、动态SQL" class="headerlink" title="六、动态SQL"></a>六、动态SQL</h2><p>简单讲，动态SQL就是指根据不同的条件生成不同的SQL语句。</p><h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog`(<br>`id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>    `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>    `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `views` <span class="hljs-type">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><h3 id="2-创建一个基础工程"><a href="#2-创建一个基础工程" class="headerlink" title="2. 创建一个基础工程"></a>2. 创建一个基础工程</h3><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写实体类对应的Mapper接口和Mapper.xml文件</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.Blog;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlogMapper</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBlog</span><span class="hljs-params">(Blog blog)</span>;<br>    <br>    <span class="hljs-comment">//SQL动态查询IF</span><br>    List&lt;Blog&gt; <span class="hljs-title function_">queryBlogIF</span><span class="hljs-params">(Map map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.BlogMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>        insert into blog(id,title,author,create_time,views)<br>        values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--    动态SQL查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  where 1=1 必定能查出东西，就是参数为空的时候查所有数据 --&gt;</span><br>        select * from blog where 1=1<br>        <span class="hljs-comment">&lt;!--  如果title不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  如果author不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zmq.dao.BlogMapper;<br><span class="hljs-keyword">import</span> com.zmq.pojo.Blog;<br><span class="hljs-keyword">import</span> com.zmq.utils.IDUtils;<br><span class="hljs-keyword">import</span> com.zmq.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mytest</span> &#123;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blog</span>();<br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记&quot;</span>);<br>        blog.setAuthor(<span class="hljs-string">&quot;星空&quot;</span>);<br>        blog.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        blog.setViews(<span class="hljs-number">233</span>);<br><br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记2&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记3&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记4&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;幻境&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Mybatis学习笔记&quot;</span>);<br>        <span class="hljs-comment">//这里的map空值也能查出东西，不是空值就会判断进行SQL拼接</span><br>        List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);<br>        <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>            System.out.println(blog);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-元素种类"><a href="#3-元素种类" class="headerlink" title="3.元素种类"></a>3.元素种类</h3><h4 id="（1）IF"><a href="#（1）IF" class="headerlink" title="（1）IF"></a>（1）IF</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    动态SQL查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  where 1=1 必定能查出东西，就是参数为空的时候查所有数据 --&gt;</span><br>        select * from blog where 1=1<br>        <span class="hljs-comment">&lt;!--  如果title不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  如果author不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）Choose-when，otherwise"><a href="#（2）Choose-when，otherwise" class="headerlink" title="（2）Choose(when，otherwise)"></a>（2）Choose(when，otherwise)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                and title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）trim-where，set"><a href="#（3）trim-where，set" class="headerlink" title="（3）trim(where，set)"></a>（3）trim(where，set)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--  解决Where查询只有第二个有参数时直接拼接and的错误问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</p><h5 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h5><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p><p>1.使用SQL标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>       and title = #&#123;title&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>       and author = #&#123;author&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在需要的地方使用include标签引用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>最好基于单表来定义SQL片段。（适合简单的查询复用）</li><li>不要存在where标签</li></ul><h4 id="（4）Forsech"><a href="#（4）Forsech" class="headerlink" title="（4）Forsech"></a>（4）Forsech</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">    select * from blog where 1=1 and (id =1 or id=2 or id = 3) </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    我们现在传递一个万能的map，在map中可以存在一个集合！</span><br><span class="hljs-comment"> --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queyBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>        select * from blog<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>                id = #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    ArrayList&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    ids.add(<span class="hljs-number">1</span>);<br>    ids.add(<span class="hljs-number">2</span>);<br>    ids.add(<span class="hljs-number">3</span>);<br>    map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);<br><br>    List&lt;Blog&gt; blogList = mapper.queyBlogForeach(map);<br><br>    <span class="hljs-keyword">for</span> (Blog blog : blogList) &#123;<br>        System.out.println(blog);<br>    &#125;<br><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码。</p><p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式去排列组合就好了。</p><p>建议：</p><p>先在MySQL中写出完整的SQL再去对应的去修改成为我们的动态SQL实现通用即可！</p><h2 id="七、缓存（了解）"><a href="#七、缓存（了解）" class="headerlink" title="七、缓存（了解）"></a>七、缓存（了解）</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>查询：连接数据库，耗资源！</p><p>一次查询的结果，给他暂存在一个可以直接取到的地方！–&gt;内存：缓存</p><p>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了。</p></blockquote><p>(1) 什么是缓存【Cache】?</p><p>存在内存中的临时数据。</p><p>将用户经常查询的数据放在缓存中，用户去查询数据就不用从磁盘上直接查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p><p>(2) 为什么使用缓存?</p><p>减少和数据库的交互次数，减小系统开销，提高系统效率。</p><p>(3) 什么样的数据能使用缓存?</p><p>经常查询并且不经常改变的数据（经常读取而不是写入的）</p><h3 id="2-MyBatis缓存"><a href="#2-MyBatis缓存" class="headerlink" title="2.MyBatis缓存"></a>2.MyBatis缓存</h3><p>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便地定制和配置缓存。缓存可以极大地提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存</p><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存</li></ul><h3 id="3-一级缓存"><a href="#3-一级缓存" class="headerlink" title="3.一级缓存"></a>3.一级缓存</h3><p>一级缓存也叫本地缓存：SqlSession</p><p>与数据库同一次会话期间查询到的数据会放在本地缓存中。</p><p>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserLike</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取sqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-comment">//sqlSession.getMapper(UserDao.class);后ALT+回车生成赋给的对象UserDao</span><br>    <span class="hljs-comment">//这里要拿SQL，从Dao包里拿，面向接口编程，可以直接从UserDao接口里拿</span><br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>    <span class="hljs-comment">//执行方法</span><br>    List&lt;User&gt; userList = userDao.getUserLike(<span class="hljs-string">&quot;张&quot;</span>);<br><br>    <span class="hljs-comment">//增强For循环输出</span><br>    <span class="hljs-keyword">for</span>(User user:userList)&#123;<br>        System.out.println(user);<br>    &#125;<br>    List&lt;User&gt; user = userDao.getUserLike(<span class="hljs-string">&quot;张&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (User user1 : user) &#123;<br>        System.out.println(user1);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭sqlSession</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Opening JDBC Connection<br>Created connection <span class="hljs-number">1075738627.</span><br>Setting autocommit to <span class="hljs-literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>==&gt;  Preparing: select * from mydb.user where name like <span class="hljs-string">&quot;%&quot;</span>?<span class="hljs-string">&quot;%&quot;</span> <br>==&gt; Parameters: 张(String)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: <span class="hljs-number">4</span>, 张三, <span class="hljs-number">123456</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Resetting autocommit to <span class="hljs-literal">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>Returned connection <span class="hljs-number">1075738627</span> to pool.<br></code></pre></td></tr></table></figure><p>缓存失效的情况：</p><h3 id="4-二级缓存"><a href="#4-二级缓存" class="headerlink" title="4.二级缓存"></a>4.二级缓存</h3><ol><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制：</li></ol><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存在二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 显式的开启全局缓存  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在当前Mapper.xml中使用二级缓存   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> /&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在当前Mapper.xml中使用二级缓存   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。</p><p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p><p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p><p><strong>提示</strong> 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache&#x3D;true 的 insert&#x2F;delete&#x2F;update 语句时，缓存会获得更新。</p><ol start="3"><li>测试</li></ol><p>1.问题：我们需要将实体类序列化！否则就会报错！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Caused by: java.io.NotSerializableException: com.zmq.pojo.Blog<br></code></pre></td></tr></table></figure><p>解决：实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>或者加上readOnly&#x3D;”true”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>注：<cache/>中的readOnly默认为false，而可读写的缓存会通过序列化返回缓存对象的拷贝，此时需要实体类（这里是Blog）实现Serializable接口或者配置readOnly&#x3D;true</p><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中！</li></ul><h3 id="5-缓存原理"><a href="#5-缓存原理" class="headerlink" title="5.缓存原理"></a>5.缓存原理</h3><p>SqlSession请求—&gt;数据库—–&gt;一级缓存——二级缓存</p><p>用户查询先走二级缓存，二级缓存没有再走一级缓存，再没有就去数据库找结果。</p><h3 id="6-自定义缓存—–-gt-以ehcache为例"><a href="#6-自定义缓存—–-gt-以ehcache为例" class="headerlink" title="6.自定义缓存—–&gt;以ehcache为例"></a>6.自定义缓存—–&gt;以ehcache为例</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,</p><p>要在程序中使用ehcache，先要导包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在Mapper中指定使用ehcache缓存实现！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件 —&gt;   ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;259200&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><p>公司里一般用Redis数据库来做缓存。</p>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/Mybatis/">Mybatis</category>
      
      <category domain="https://superlovelace.top/tags/Java/">Java</category>
      
      
      <comments>https://superlovelace.top/2023/10/25/MyBatis_2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MyBatis学习笔记一</title>
      <link>https://superlovelace.top/2023/10/24/MyBatis_1/</link>
      <guid>https://superlovelace.top/2023/10/24/MyBatis_1/</guid>
      <pubDate>Tue, 24 Oct 2023 10:04:26 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要记录了Java中的MyBatis框架的学习，初次了解其在项目中的具体位置和功能。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本文主要记录了Java中的MyBatis框架的学习，初次了解其在项目中的具体位置和功能。</p></blockquote><span id="more"></span><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis"></p><hr><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://mybatis.org/mybatis-3/zh/index.html">点击前往</a></p><h2 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h2><p>MyBatis 是一款持久层框架，</p><p>它支持自定义 SQL、存储过程以及高级映射。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可。</p><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我学习时的配置:</p><ul><li>MySQL5.7</li><li>Maven3.6.0</li><li>Mybatis3.5.2</li><li>IDEA2019.1</li></ul><p>我学习时的父工程pom.xml文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--  父工程 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 依赖  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        MySQL驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        junit测试单元框架--&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--    资源过滤，防止运行时找不到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子工程pom.xml文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    资源过滤，防止运行时找不到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建MyBatis配置文件"><a href="#创建MyBatis配置文件" class="headerlink" title="创建MyBatis配置文件"></a>创建MyBatis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--            事务管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3307/mydb?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>autoReconnect=true<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    创建接口后注册接口实现文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/zmq/dao/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h2 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MybatisUtils.java</span><br><span class="hljs-keyword">package</span> com.zmq.utils;<br><br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取SqlSession对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//SqlSession 完全包含了面向数据库执行SQL命令的所有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//openSession(true)可以自动提交事务</span><br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建Pojo层实体类"><a href="#创建Pojo层实体类" class="headerlink" title="创建Pojo层实体类"></a>创建Pojo层实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.java</span><br><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br>    <span class="hljs-comment">//getset方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-comment">//toString方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建接口文件-Dao层"><a href="#创建接口文件-Dao层" class="headerlink" title="创建接口文件(Dao层)"></a>创建接口文件(Dao层)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao.java</span><br><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-comment">//获取所有用户</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查询用户</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//新增用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//修改用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">delUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建接口实现配置文件-相当于JavaWeb的impl层"><a href="#创建接口实现配置文件-相当于JavaWeb的impl层" class="headerlink" title="创建接口实现配置文件(相当于JavaWeb的impl层)"></a>创建接口实现配置文件(相当于JavaWeb的impl层)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- UserMapper.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.UserDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    这里相当于实现接口的方法    resultType绑定全限定名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        select * from mydb.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        select * from mydb.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span> &gt;</span><br>        insert into mydb.user(id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        update mydb.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from mydb.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在Dao的文件中，右击要测试的方法，点击goto，创建测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDaoTest.java</span><br><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.User;<br><span class="hljs-keyword">import</span> com.zmq.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br><br>    <span class="hljs-comment">//测试查询全部User</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">//sqlSession.getMapper(UserDao.class);后ALT+回车生成赋给的对象UserDao</span><br>        <span class="hljs-comment">//这里要拿SQL，从Dao包里拿，面向接口编程，可以直接从UserDao接口里拿</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        <span class="hljs-comment">//执行方法</span><br>        List&lt;User&gt; userList = userDao.getUserList();<br><br>        <span class="hljs-comment">//增强For循环输出</span><br>        <span class="hljs-keyword">for</span>(User user:userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试通过id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user);<br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//测试新增用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;alan&quot;</span>,<span class="hljs-string">&quot;852456&quot;</span>));<br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;添加成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试修改用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;alex&quot;</span>,<span class="hljs-string">&quot;159852&quot;</span>));<br><br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//测试删除用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.delUserById(<span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/Mybatis/">Mybatis</category>
      
      <category domain="https://superlovelace.top/tags/Java/">Java</category>
      
      
      <comments>https://superlovelace.top/2023/10/24/MyBatis_1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Git克隆和提交代码</title>
      <link>https://superlovelace.top/2023/10/23/Gituse/</link>
      <guid>https://superlovelace.top/2023/10/23/Gituse/</guid>
      <pubDate>Mon, 23 Oct 2023 05:35:13 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要总结了git初次使用克隆和提交代码。包括git的安装和配置，项目库的创建、项目的克隆和提交。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本文主要总结了git初次使用克隆和提交代码。包括git的安装和配置，项目库的创建、项目的克隆和提交。</p></blockquote><span id="more"></span><h1 id="Git克隆和提交代码"><a href="#Git克隆和提交代码" class="headerlink" title="Git克隆和提交代码"></a>Git克隆和提交代码</h1><p>Progit中文版书籍：<a href="https://www.progit.cn/">https://www.progit.cn/</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>windows系统先下载git，官方下载页：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>创建本地项目文件夹存储库并进入</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>右键打开git bash，执行仓库初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment">#然后回车</span><br></code></pre></td></tr></table></figure><p>此时会在项目存储库生成<code>.git</code>文件夹及其内容 </p><h3 id="设置个人信息"><a href="#设置个人信息" class="headerlink" title="设置个人信息"></a>设置个人信息</h3><p>设置用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;myName&quot;</span>  <br></code></pre></td></tr></table></figure><p>查看用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br></code></pre></td></tr></table></figure><p>设置邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure><p>查看邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.email<br></code></pre></td></tr></table></figure><p>查看配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list <span class="hljs-comment">#可查看当前用户信息以及其他的一些信息</span><br></code></pre></td></tr></table></figure><h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>指定文件名生成密钥（方便查看公钥以后要用的地方），否则文件名将用默认名称</p><p>指定密钥文件名为<code>gitee_id_rsa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br></code></pre></td></tr></table></figure><p>指定密钥文件名为<code>github_id_rsa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Github SSH Key&#x27;</span> -f ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure><hr><p>常用参数注释：</p><p>-t 加&#x2F;解密算法类型（rsa、ed25519等）</p><p>-b 秘钥长度,rsa默认秘钥长度的为 2048</p><p>-C 注释，一般是填写用户名</p><p>-f 指定生成的秘钥文件名，如果不提供此参数则使用默认文件名，如rsa私钥默认文件名 ~&#x2F;.ssh&#x2F;id_rsa ，公钥默认文件名 ~&#x2F;.ssh&#x2F;id_rsa.pub</p><hr><p>首次生成SSH密钥会有三次询问，根据需要设置，想免密推送就不设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br>//生成一对RSA密钥<br>Generating public/private rsa key pair.<br>//密钥文件存储位置，直接回车使用默认路径<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/Users/user/.ssh/gitee_id_rsa):<br>//设置密码，若直接回车则不设置密码<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>//确认密码，和上步操作相同<br>Enter same passphrase again:<br>//文件存储位置<br>Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa<br>Your public key has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa.pub<br><br>The key fingerprint is:<br>SHA256:wXKzkWFbVONiEtSWPXjcjVy0oONsMYbBU59h7mlMwes Gitee SSH Key<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+---[RSA 3072]----+</span><br><span class="hljs-string">|       .*++B+B =o|</span><br><span class="hljs-string">|       o OB.XoO o|</span><br><span class="hljs-string">|      . Xo+B.*.. |</span><br><span class="hljs-string">|       o B+.B..  |</span><br><span class="hljs-string">|        S  +.=   |</span><br><span class="hljs-string">|          . .E   |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">+----[SHA256]-----+</span><br><span class="hljs-string"></span><br><span class="hljs-string">user@DESKTOP MINGW64 ~/Desktop</span><br></code></pre></td></tr></table></figure><h3 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建<code>config</code>文件</h3><p>进入生成的密钥文件夹，创建文件，文件名为<code>config</code>，没有后缀。然后添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_rsa<br><span class="hljs-comment"># github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure><p>注：<code>Host </code>和<code>HostName</code> 填写 git 服务器的域名，<code>IdentityFile</code> 指定私钥的路径</p><p>配置公钥到<code>Gitee</code>或<code>Github</code>：</p><ul><li>Gitee SSH配置地址在：个人资料的安全设置–&gt;SSH公钥</li><li>Github SSH配置地址在：用户头像–&gt;右侧边栏–&gt;Settings–&gt;Access–&gt;SSH and GPG keys</li></ul><p>查看生成的SSH公钥：</p><p>方式一：用记事本打开公钥文件，全选复制。</p><p>方式二：用<code>gitbash</code>查看</p><p>查看<code>.ssh</code>文件夹内的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh/<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">ls</span> ~/.ssh/<br>config        gitee_id_rsa.pub  github_id_rsa.pub  gitee_id_rsa  github_id_rsa<br></code></pre></td></tr></table></figure><ul><li>公钥文件为：<code>gitee_id_rsa.pub</code> 和<code>github_id_rsa.pub</code>，</li><li>私钥文件为：<code>gitee_id_rsa</code> 和<code>github_id_rsa</code></li></ul><p>查看公钥内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDchWfkihfqZgdV6/431en8mUN2dk5FtAJ0TkCYQJXq07nn51c9+3qNjbvxxygFDSOFIyG7nb34H2vAk8RL/drODtBPSxNhtxt/IuKSNNHF7hYt+nh8VqbNTMi9fJVEN6+bS7k7gLTY1IVDd4sUjEKw0mYzPgdHCAyubSARUYzATx2SOn9+6UAo1Iq2Ftt0OVMmoWueIe5E9nQWd8IANbrnvs9VbPYVP5fyPQez+/YT4HxGib5+hYXVEsFh/qN3JxbY3uK34mX3jJtz++ULcQPtS8w0AQWR94po6EH1TJvUWMlTOT8liGd9aebuFrZjjVibvQ6kVcApTtEDJXzeb00fqh3waNc8+vTTwpyzHXy8ictcLCbnAFHzgOJpS0tMgkof0U4p3pHrY4umQ5IHkq5aS2WDch6IHVy3mwRdzK91BAzIcNHMnVKAC528WT4KZ3ZdFjC6XxCoiwf6d8MBCxhMnMbm4i284RoQa9LYEuZtzWCcheYpTN7/knfDksrLiEE= Gitee SSH Key<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>配置完成后回到<code>git bash</code>，测试配置的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@gitee.com<br>ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>成功后，显示如下内容：</p><p>测试<code>gitee</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@gitee.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>测试<code>github</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@github.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h2><p>先进入之前创建的项目文件夹</p><h3 id="链接到远程库"><a href="#链接到远程库" class="headerlink" title="链接到远程库"></a>链接到远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://git.oschina.net/xxxxxx/xxxxxx.git<br></code></pre></td></tr></table></figure><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:AprilDawn/AprilDawn.gitee.io.git<br></code></pre></td></tr></table></figure><p>这样项目就下载到项目仓库了，现在就可以打开项目写代码了。</p><h2 id="项目提交"><a href="#项目提交" class="headerlink" title="项目提交"></a>项目提交</h2><p>当完成代码后，进入克隆的项目里。</p><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>添加项目中新增或改动的文件到缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add . <br></code></pre></td></tr></table></figure><p>注：点表示添加目录下所有文件到缓存库,如果只添加某个文件,只需把 . 换成你要添加的文件名即可;</p><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>用以说明此次提交更改了哪些信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;新增什么功能，修复了什么BUG等等&quot;</span><br></code></pre></td></tr></table></figure><h3 id="推送提交到远程仓库"><a href="#推送提交到远程仓库" class="headerlink" title="推送提交到远程仓库"></a>推送提交到远程仓库</h3><p>这是默认推送到master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>推送到指定分支</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 分支名<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/git/">git</category>
      
      
      <comments>https://superlovelace.top/2023/10/23/Gituse/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二叉树（Binary Tree）</title>
      <link>https://superlovelace.top/2023/10/14/BiTree/</link>
      <guid>https://superlovelace.top/2023/10/14/BiTree/</guid>
      <pubDate>Sat, 14 Oct 2023 01:48:33 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要总结了数据结构关于二叉树的相关知识内容，其中包括定义、过程算法和完整实现代码。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本文主要总结了数据结构关于二叉树的相关知识内容，其中包括定义、过程算法和完整实现代码。</p></blockquote><span id="more"></span><h1 id="二叉树（BiTree）"><a href="#二叉树（BiTree）" class="headerlink" title="二叉树（BiTree）"></a>二叉树（BiTree）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序一次访问二叉树中的所有结点，使得每个结点被访问一次且仅被访问一次。</strong></p><h2 id="过程及其算法"><a href="#过程及其算法" class="headerlink" title="过程及其算法"></a>过程及其算法</h2><h3 id="先序遍历：根左右"><a href="#先序遍历：根左右" class="headerlink" title="先序遍历：根左右"></a>先序遍历：根左右</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 先序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FirstOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 先序遍历左子树</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 先序遍历右子树</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历：左根右"><a href="#中序遍历：左根右" class="headerlink" title="中序遍历：左根右"></a>中序遍历：左根右</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始条件：二叉树T存在</span><br><span class="hljs-comment">// 操作结果：中序递归遍历T，依次输出值</span><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MidOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-built_in">MidOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">MidOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="后序遍历：左右根"><a href="#后序遍历：左右根" class="headerlink" title="后序遍历：左右根"></a>后序遍历：左右根</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始条件：二叉树T存在</span><br><span class="hljs-comment">// 操作结果：后续递归遍历T</span><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">EndOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 后序遍历左子树</span><br><span class="hljs-built_in">EndOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 后序遍历右子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拓展：求树的深度"><a href="#拓展：求树的深度" class="headerlink" title="拓展：求树的深度"></a>拓展：求树的深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-built_in">treeDepth</span>(T-&gt;lchild);<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">treeDepth</span>(T-&gt;rchild);<br><span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-comment">//如果左边不大于右边就加一</span><br>&#123;<br><span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="层序遍历：（借助队列）"><a href="#层序遍历：（借助队列）" class="headerlink" title="层序遍历：（借助队列）"></a>层序遍历：（借助队列）</h3><h4 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h4><ul><li>初始化一个辅助队列</li><li>根节点入队</li><li>若队列非空，则对头结点出队访问该节点，并将其左、右孩子插入队尾（如果有的话）</li><li>重复上步直至队列为空</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkQueue Q ;<br><span class="hljs-built_in">InitQueue</span>(Q);<br>BiTree p;<br>p = <span class="hljs-keyword">new</span> BiTNode;<br><span class="hljs-built_in">Push</span>(Q, T);<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<span class="hljs-comment">//判断队列是否为空</span><br>&#123;<br><span class="hljs-built_in">Pop</span>(Q, p);<br>cout &lt;&lt; p-&gt;data;<br><span class="hljs-keyword">if</span> (p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q,p-&gt;lchild);<br>&#125;<br><span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q, p-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">二叉树的层序遍历</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 二叉树链式存储 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span><br>&#123;<br><span class="hljs-type">char</span> data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>* lchild, * rchild;<br>&#125;BiTNode,*BiTree;<br><br><span class="hljs-comment">/* 链式队列结点 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkNode</span><br>&#123;<br>BiTNode* data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkNode</span>* next;<br>&#125;LinkNode;<br><br><span class="hljs-comment">/* 队列头尾结点 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>LinkNode* front,*rear;<span class="hljs-comment">//队头队尾</span><br>&#125;LinkQueue;<br><br><span class="hljs-comment">/* 按照先序创建树，#代表空 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createBiTree</span><span class="hljs-params">(BiTree &amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch;<br>cin &gt;&gt; ch;<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>&#123;<br>T = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>T = <span class="hljs-keyword">new</span> BiTNode;<br>T-&gt;data = ch;<br><span class="hljs-built_in">createBiTree</span>(T-&gt;lchild);<br><span class="hljs-built_in">createBiTree</span>(T-&gt;rchild);<br>&#125;<br><br>&#125;<br><span class="hljs-comment">/* 初始化树 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBiTree</span><span class="hljs-params">(BiTree&amp; T)</span></span><br><span class="hljs-function"></span>&#123;<br>T-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>T-&gt;data = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化队列 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>L.front = L.rear = <span class="hljs-keyword">new</span> LinkNode;<br>L.front-&gt;data = <span class="hljs-literal">NULL</span>;<br>L.front-&gt;next =  <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//front和rear指向同一地址，所以rear就不用初始化了</span><br>&#125;<br><br><span class="hljs-comment">/* 判断队列是否为空 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (Q.front == Q.rear)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进队列(在队尾插入)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkQueue&amp; S, BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkNode* p = <span class="hljs-keyword">new</span> LinkNode;<br>p-&gt;data = T;<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>S.rear-&gt;next = p; <span class="hljs-comment">//修改后继指针</span><br>S.rear = p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列（在队头弹出）头结点的下一个</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkQueue&amp; S, BiTree&amp; T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>T = S.front-&gt;next-&gt;data;<br>LinkNode* p = S.front-&gt;next;<br>S.front-&gt;next = p-&gt;next;<br><span class="hljs-keyword">if</span> (S.rear == p)<br>&#123;<br>S.rear = S.front;<br>&#125;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 先序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FirstOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MidOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-built_in">MidOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">MidOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">EndOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 后序遍历左子树</span><br><span class="hljs-built_in">EndOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 后序遍历右子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>&#125;<br><br><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkQueue Q ;<br><span class="hljs-built_in">InitQueue</span>(Q);<br>BiTree p;<br>p = <span class="hljs-keyword">new</span> BiTNode;<br><span class="hljs-comment">//InitBiTree(p);</span><br><span class="hljs-built_in">Push</span>(Q, T);<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<br>&#123;<br><span class="hljs-built_in">Pop</span>(Q, p);<br>cout &lt;&lt; p-&gt;data;<br><span class="hljs-keyword">if</span> (p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q,p-&gt;lchild);<br>&#125;<br><span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q, p-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* 二叉树的深度 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-built_in">treeDepth</span>(T-&gt;lchild);<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">treeDepth</span>(T-&gt;rchild);<br><span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-comment">//如果左边不大于右边就加一</span><br>&#123;<br><span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//主程序入口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BiTree bt;<br><span class="hljs-built_in">createBiTree</span>(bt);<br>cout &lt;&lt; <span class="hljs-string">&quot;树的深度为：&quot;</span>&lt;&lt; <span class="hljs-built_in">treeDepth</span>(bt) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;树的先序遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">FirstOrder</span>(bt);<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;树的中序遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">MidOrder</span>(bt);<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;树的后序遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">EndOrder</span>(bt);<br>cout &lt;&lt; endl;<br>cout&lt;&lt; <span class="hljs-string">&quot;树的层次遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">LevelOrder</span>(bt);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>https://superlovelace.top/2023/10/14/BiTree/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>循环队列（链式存储结构）</title>
      <link>https://superlovelace.top/2023/10/13/LinkQueue/</link>
      <guid>https://superlovelace.top/2023/10/13/LinkQueue/</guid>
      <pubDate>Fri, 13 Oct 2023 15:52:21 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要总结了循环队列的另一种实现形式，即循环队列的链式存储结构形式，主要是完整实现代码。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本文主要总结了循环队列的另一种实现形式，即循环队列的链式存储结构形式，主要是完整实现代码。</p></blockquote><span id="more"></span><h1 id="循环队列（链式存储结构）"><a href="#循环队列（链式存储结构）" class="headerlink" title="循环队列（链式存储结构）"></a>循环队列（链式存储结构）</h1><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环队列的链式实现</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链队列存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br><span class="hljs-type">int</span> data;  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> * next;<br>&#125;SNode,*SqQueue;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>SqQueue front;<br>SqQueue rear;<br>&#125;LinkQueue;<br><br><span class="hljs-comment">//初始化队列(有头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.front = S.rear = <span class="hljs-keyword">new</span> SNode;<br>S.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.front == S.rear)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进队列(每次都插在头结点后面)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkQueue&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>SNode* p = <span class="hljs-keyword">new</span> SNode;<br>p-&gt;data = e;<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>S.rear-&gt;next = p; <span class="hljs-comment">//修改后继指针</span><br>S.rear = p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkQueue&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueEmpty</span>(S))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.front-&gt;next-&gt;data;<br>SNode* p = S.front-&gt;next;<br>S.front-&gt;next = p-&gt;next;<br><span class="hljs-keyword">if</span> (S.rear == p)<br>&#123;<br>S.rear = S.front;<br>&#125;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取队列顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(LinkQueue S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueEmpty</span>(S))<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.front-&gt;next-&gt;data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LinkQueue S;<br><span class="hljs-built_in">InitQueue</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取队列顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>https://superlovelace.top/2023/10/13/LinkQueue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>循环队列（顺序存储结构）</title>
      <link>https://superlovelace.top/2023/10/13/SqQueue/</link>
      <guid>https://superlovelace.top/2023/10/13/SqQueue/</guid>
      <pubDate>Fri, 13 Oct 2023 15:44:05 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;循环队列的定义、特点和完整代码实现。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>循环队列的定义、特点和完整代码实现。</p></blockquote><span id="more"></span><h1 id="循环队列（顺序存储结构）"><a href="#循环队列（顺序存储结构）" class="headerlink" title="循环队列（顺序存储结构）"></a>循环队列（顺序存储结构）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>顺序表类型的队列，定义了两个指针，头指针和尾指针。当入队满的时候，每出队一个头指针都要后移，这样到最后就无法入队新元素了，在入队会导致假溢出。为了解决这一问题，入队和出队后，队头队尾对MAXSIZE取模，这样队列就变成了环形，类似于旋转木马，即循环队列，</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>可以有效的利用资源</p><h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><p>主要是判断队列是否为空所采取的方法：</p><ul><li>牺牲一个存储单元</li><li>增加size属性记录元素个数</li><li>增加标志位，判断最近的一次操作是入队还是出队（只有入队会导致队满）</li></ul><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环队列  顺序实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 2 <span class="hljs-comment">//队列元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序队列存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br><span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放队列元素</span><br><span class="hljs-type">int</span> front;  <span class="hljs-comment">//队头指针</span><br><span class="hljs-type">int</span> rear;<span class="hljs-comment">//队尾指针</span><br><span class="hljs-type">int</span> size;  <span class="hljs-comment">//队列元素个数</span><br>&#125;SqQueue; <br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.front = <span class="hljs-number">0</span>;<br>S.rear = <span class="hljs-number">0</span>;<br>S.size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//入队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqQueue&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.data[S.rear] = e;<br>S.rear = (S.rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>S.size++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqQueue&amp; S, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.front];<br>S.front=(S.front+<span class="hljs-number">1</span>)% MAXSIZE;<br>S.size--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取队列顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqQueue S,<span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.front];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqQueue S;<br><span class="hljs-built_in">InitQueue</span>(S);<br>cout &lt;&lt;<span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a2 = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a1)&lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a2) &lt;&lt; endl;<br><span class="hljs-built_in">GetElem</span>(S, b);<br>cout&lt;&lt;<span class="hljs-string">&quot;读取队列顶元素：&quot;</span> &lt;&lt;b &lt;&lt;endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a1) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a2) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>https://superlovelace.top/2023/10/13/SqQueue/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>链栈</title>
      <link>https://superlovelace.top/2023/10/12/LinkStack/</link>
      <guid>https://superlovelace.top/2023/10/12/LinkStack/</guid>
      <pubDate>Wed, 11 Oct 2023 16:34:10 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要总结了栈的链式存储方式，包括有无头结点两种情况和相关的完整实现代码。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>本文主要总结了栈的链式存储方式，包括有无头结点两种情况和相关的完整实现代码。</p></blockquote><span id="more"></span><h1 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h1><h2 id="有头结点的完整实现代码"><a href="#有头结点的完整实现代码" class="headerlink" title="有头结点的完整实现代码"></a>有头结点的完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">链栈（有头结点）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链栈存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br><span class="hljs-type">int</span> data;  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> * next;<br><span class="hljs-type">int</span> top;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SNode,*SqStack;<br><br><span class="hljs-comment">//初始化栈(有头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S = <span class="hljs-keyword">new</span> SNode;<br>S-&gt;top = <span class="hljs-number">-1</span>;<br>S-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进栈(每次都插在头结点后面)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>SNode* p = <span class="hljs-keyword">new</span> SNode;<br>p-&gt;data = e;<br>p-&gt;next = S-&gt;next;<br>S-&gt;next = p;<br>p-&gt;top = ++(S-&gt;top);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S-&gt;next-&gt;data;<br><span class="hljs-keyword">if</span> (!S-&gt;next-&gt;next)<br>&#123;<br>S-&gt;top--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>S-&gt;next = S-&gt;next-&gt;next;<br>S-&gt;top--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S-&gt;next-&gt;data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无头结点的完整实现代码"><a href="#无头结点的完整实现代码" class="headerlink" title="无头结点的完整实现代码"></a>无头结点的完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">链栈(无头结点)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链栈存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br><span class="hljs-type">int</span> data;  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span>* next;<br><span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SNode, * SqStack;<br><br><span class="hljs-comment">//初始化栈(无头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>SNode* p = S;<br>S = <span class="hljs-keyword">new</span> SNode;<br>S-&gt;data = e;<br>S-&gt;next = p;<br><span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">//如果p为NULL</span><br>&#123;<br>S-&gt;top++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>S-&gt;top = p-&gt;top+<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S-&gt;data;<br>SNode* p = S;<br><br>S = p-&gt;next;<br><br><span class="hljs-comment">//delete p;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S-&gt;data;<br>&#125;<br><span class="hljs-comment">//读取栈元素个数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetSize</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> S-&gt;top;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>https://superlovelace.top/2023/10/12/LinkStack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>共享顺序栈</title>
      <link>https://superlovelace.top/2023/10/11/ShareSqStack/</link>
      <guid>https://superlovelace.top/2023/10/11/ShareSqStack/</guid>
      <pubDate>Wed, 11 Oct 2023 01:21:25 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;共享顺序栈的特点和完整代码实现。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>共享顺序栈的特点和完整代码实现。</p></blockquote><span id="more"></span><h1 id="共享顺序栈"><a href="#共享顺序栈" class="headerlink" title="共享顺序栈"></a>共享顺序栈</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>两个顺序栈用一个数组空间，可看作单通道的隧道停车厂，一边占用的空间多了，另一边的剩余空间就少了。</p><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">共享栈：两个栈用一个数组空间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10 <span class="hljs-comment">//栈元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序栈表存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br><span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-type">int</span> top1;  <span class="hljs-comment">//1号栈顶指针</span><br><span class="hljs-type">int</span> top2; <span class="hljs-comment">//2号栈顶指针</span><br>&#125;SqStack;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.top1 = <span class="hljs-number">-1</span>;<br>S.top2 = MAXSIZE;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span> || S.top2 == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进1号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push1</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 +<span class="hljs-number">1</span> == S.top2)<span class="hljs-comment">//top指的是数组的下标位置</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.top1++;<span class="hljs-comment">//指针先+1</span><br>S.data[S.top1] = e; <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[++S.top1] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//进2号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push2</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 + <span class="hljs-number">1</span> == S.top2)<span class="hljs-comment">//top指的是数组的下标位置</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.top2--;<span class="hljs-comment">//指针先-1</span><br>S.data[S.top2] = e; <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[--S.top2] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出1号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop1</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.top1];<br>S.top1--;<br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[S.top--] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出2号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop2</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top2 == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.top2];<br>S.top2++;<br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[S.top2++] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取1号栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop1</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.top1];<br>&#125;<br><br><span class="hljs-comment">//读取2号栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop2</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top2 == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.top2];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入1号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push1</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop1</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取1号栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出1号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop1</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入2号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push2</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop2</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取2号栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出2号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop2</span>(S, a) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>https://superlovelace.top/2023/10/11/ShareSqStack/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>顺序栈（SqStack）</title>
      <link>https://superlovelace.top/2023/10/11/SqStack/</link>
      <guid>https://superlovelace.top/2023/10/11/SqStack/</guid>
      <pubDate>Wed, 11 Oct 2023 00:54:43 GMT</pubDate>
      
      <description>&lt;blockquote&gt;
&lt;p&gt;顺序栈的特点和完整代码实现。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>顺序栈的特点和完整代码实现。</p></blockquote><span id="more"></span><h1 id="顺序栈（SqStack）"><a href="#顺序栈（SqStack）" class="headerlink" title="顺序栈（SqStack）"></a>顺序栈（SqStack）</h1><p>注：SqStack为简写，完整名为Sequential Stack。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>栈也是一种线性表。</li><li>只允许在一端进行插入和删除的线性表。</li><li>先进后出。</li></ul><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><ul><li>定义顺序栈结构</li><li>初始化顺序栈</li><li>判断顺序栈空方法</li><li>顺序栈的进栈方法</li><li>顺序栈的出栈方法</li><li>顺序栈的读取栈顶元素方法</li><li>主函数用以测试</li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序栈表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10 <span class="hljs-comment">//栈元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序栈表存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br><span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-type">int</span> top;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SqStack; <br><br><span class="hljs-comment">/* 初始化栈 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 判断栈空 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 进栈 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == MAXSIZE<span class="hljs-number">-1</span>)<span class="hljs-comment">//top指的是数组的下标位置</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.top++;<span class="hljs-comment">//指针先+1</span><br>S.data[S.top] = e; <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[++S.top] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 出栈 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.top];<br>S.top--;<br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[S.top--] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 读取栈顶元素 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S,<span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.top];<br>&#125;<br><br><span class="hljs-comment">/* 主函数 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S; <span class="hljs-comment">//实例化栈</span><br><span class="hljs-built_in">InitStack</span>(S);  <span class="hljs-comment">//初始化栈</span><br>cout &lt;&lt;<span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl; <span class="hljs-comment">//判断栈空</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义入栈元素a</span><br><span class="hljs-type">int</span> b;    <span class="hljs-comment">//定义接收栈顶元素b</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a)&lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout&lt;&lt;<span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt;b &lt;&lt;endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://superlovelace.top/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="https://superlovelace.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>https://superlovelace.top/2023/10/11/SqStack/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
