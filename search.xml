<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>折半插入排序（BInsertSort）</title>
    <url>/2023/10/09/BInsertSort/</url>
    <content><![CDATA[<blockquote>
<p>折半插入排序的特点和折半插入排序的完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>折半查找找到应插入的位置，仅适用于顺序表。时间复杂度O(n^2)，并没有比插入排序快多少。</p>
<p>注意：一直到low&gt;high时才停止折半查找。当mid所指元素等于当前元素时，应继续令low &#x3D; mid +1,以保证“稳定性”。最终应将当前元素插入到low所指位置（即high+1）</p>
<h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 折半插入排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BInsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> i, j, low, mid, high;<br>	<span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= len; i++)<span class="hljs-comment">//依次将A[2]~A[n]插入前面的已排序序列</span><br>	&#123;<br>		A[<span class="hljs-number">0</span>] = A[i];<span class="hljs-comment">//将A[i]暂存到A[0]</span><br>		low = <span class="hljs-number">1</span>; <span class="hljs-comment">//设置折半查找的范围</span><br>		high = i - <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">while</span> (low&lt;=high)<span class="hljs-comment">//折半查找（默认递增有序）</span><br>		&#123;<br>			mid = (low + high) / <span class="hljs-number">2</span>;<span class="hljs-comment">//取中间点</span><br>			<span class="hljs-keyword">if</span> (A[mid]&gt;A[<span class="hljs-number">0</span>])<br>			&#123;<br>				high = mid - <span class="hljs-number">1</span>;<span class="hljs-comment">//查找左半子表</span><br>			&#125;<br>			<span class="hljs-keyword">else</span><br>			&#123;<br>				low = mid + <span class="hljs-number">1</span>;<span class="hljs-comment">//查找右半子表</span><br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">for</span> (j = i<span class="hljs-number">-1</span>; j &gt;= high+<span class="hljs-number">1</span>; --j)<br>		&#123;<br>			A[j + <span class="hljs-number">1</span>] = A[j]; <span class="hljs-comment">//统一后移元素，空出插入位置</span><br>		&#125;<br>		A[high + <span class="hljs-number">1</span>] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//插入操作</span><br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//哨兵是用来判断程序何时结束的</span><br>	<span class="hljs-comment">//有暂存单元的数组，第一个是暂存单元</span><br>	<span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>	<span class="hljs-built_in">BInsertSort</span>(A, <span class="hljs-number">8</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;折半插入排序后：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>	&#123;<br>		cout &lt;&lt; A[i];<br>		<span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>		&#123;<br>			cout &lt;&lt;endl;;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树（Binary Tree）</title>
    <url>/2023/10/14/BiTree/</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结了数据结构关于二叉树的相关知识内容，其中包括定义、过程算法和完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="二叉树（BiTree）"><a href="#二叉树（BiTree）" class="headerlink" title="二叉树（BiTree）"></a>二叉树（BiTree）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序一次访问二叉树中的所有结点，使得每个结点被访问一次且仅被访问一次。</strong></p>
<h2 id="过程及其算法"><a href="#过程及其算法" class="headerlink" title="过程及其算法"></a>过程及其算法</h2><h3 id="先序遍历：根左右"><a href="#先序遍历：根左右" class="headerlink" title="先序遍历：根左右"></a>先序遍历：根左右</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 先序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FirstOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>	<span class="hljs-built_in">FirstOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 先序遍历左子树</span><br>	<span class="hljs-built_in">FirstOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 先序遍历右子树</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="中序遍历：左根右"><a href="#中序遍历：左根右" class="headerlink" title="中序遍历：左根右"></a>中序遍历：左根右</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始条件：二叉树T存在</span><br><span class="hljs-comment">// 操作结果：中序递归遍历T，依次输出值</span><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MidOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<br>	<span class="hljs-built_in">MidOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>	cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>	<span class="hljs-built_in">MidOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="后序遍历：左右根"><a href="#后序遍历：左右根" class="headerlink" title="后序遍历：左右根"></a>后序遍历：左右根</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始条件：二叉树T存在</span><br><span class="hljs-comment">// 操作结果：后续递归遍历T</span><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-built_in">EndOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 后序遍历左子树</span><br>	<span class="hljs-built_in">EndOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 后序遍历右子树</span><br>	cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="拓展：求树的深度"><a href="#拓展：求树的深度" class="headerlink" title="拓展：求树的深度"></a>拓展：求树的深度</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-type">int</span> left = <span class="hljs-built_in">treeDepth</span>(T-&gt;lchild);<br>		<span class="hljs-type">int</span> right = <span class="hljs-built_in">treeDepth</span>(T-&gt;rchild);<br>		<span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-comment">//如果左边不大于右边就加一</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="层序遍历：（借助队列）"><a href="#层序遍历：（借助队列）" class="headerlink" title="层序遍历：（借助队列）"></a>层序遍历：（借助队列）</h3><h4 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h4><ul>
<li>初始化一个辅助队列</li>
<li>根节点入队</li>
<li>若队列非空，则对头结点出队访问该节点，并将其左、右孩子插入队尾（如果有的话）</li>
<li>重复上步直至队列为空</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	LinkQueue Q ;<br>	<span class="hljs-built_in">InitQueue</span>(Q);<br>	BiTree p;<br>	p = <span class="hljs-keyword">new</span> BiTNode;<br>	<span class="hljs-built_in">Push</span>(Q, T);<br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<span class="hljs-comment">//判断队列是否为空</span><br>	&#123;<br>		<span class="hljs-built_in">Pop</span>(Q, p);<br>		cout &lt;&lt; p-&gt;data;<br>		<span class="hljs-keyword">if</span> (p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-built_in">Push</span>(Q,p-&gt;lchild);<br>		&#125;<br>		<span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-built_in">Push</span>(Q, p-&gt;rchild);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	二叉树的层序遍历</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 二叉树链式存储 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span><br>&#123;<br>	<span class="hljs-type">char</span> data;<br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>* lchild, * rchild;<br>&#125;BiTNode,*BiTree;<br><br><span class="hljs-comment">/* 链式队列结点 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkNode</span><br>&#123;<br>	BiTNode* data;<br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkNode</span>* next;<br>&#125;LinkNode;<br><br><span class="hljs-comment">/* 队列头尾结点 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	LinkNode* front,*rear;<span class="hljs-comment">//队头队尾</span><br>&#125;LinkQueue;<br><br><span class="hljs-comment">/* 按照先序创建树，#代表空 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createBiTree</span><span class="hljs-params">(BiTree &amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">char</span> ch;<br>	cin &gt;&gt; ch;<br>	<span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>	&#123;<br>		T = <span class="hljs-literal">NULL</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		T = <span class="hljs-keyword">new</span> BiTNode;<br>		T-&gt;data = ch;<br>		<span class="hljs-built_in">createBiTree</span>(T-&gt;lchild);<br>		<span class="hljs-built_in">createBiTree</span>(T-&gt;rchild);<br>	&#125;<br><br>&#125;<br><span class="hljs-comment">/* 初始化树 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBiTree</span><span class="hljs-params">(BiTree&amp; T)</span></span><br><span class="hljs-function"></span>&#123;<br>	T-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>	T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>	T-&gt;data = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化队列 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>	L.front = L.rear = <span class="hljs-keyword">new</span> LinkNode;<br>	L.front-&gt;data = <span class="hljs-literal">NULL</span>;<br>	L.front-&gt;next =  <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//front和rear指向同一地址，所以rear就不用初始化了</span><br>&#125;<br><br><span class="hljs-comment">/* 判断队列是否为空 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (Q.front == Q.rear)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//进队列(在队尾插入)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkQueue&amp; S, BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	LinkNode* p = <span class="hljs-keyword">new</span> LinkNode;<br>	p-&gt;data = T;<br>	p-&gt;next = <span class="hljs-literal">NULL</span>;<br>	S.rear-&gt;next = p; <span class="hljs-comment">//修改后继指针</span><br>	S.rear = p;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列（在队头弹出）头结点的下一个</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkQueue&amp; S, BiTree&amp; T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S))<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	T = S.front-&gt;next-&gt;data;<br>	LinkNode* p = S.front-&gt;next;<br>	S.front-&gt;next = p-&gt;next;<br>	<span class="hljs-keyword">if</span> (S.rear == p)<br>	&#123;<br>		S.rear = S.front;<br>	&#125;<br>	<span class="hljs-keyword">delete</span> p;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 先序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FirstOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>	<span class="hljs-built_in">FirstOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>	<span class="hljs-built_in">FirstOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MidOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<br>	<span class="hljs-built_in">MidOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>	cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>	<span class="hljs-built_in">MidOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	<span class="hljs-built_in">EndOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 后序遍历左子树</span><br>	<span class="hljs-built_in">EndOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 后序遍历右子树</span><br>	cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>&#125;<br><br><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>	LinkQueue Q ;<br>	<span class="hljs-built_in">InitQueue</span>(Q);<br>	BiTree p;<br>	p = <span class="hljs-keyword">new</span> BiTNode;<br>	<span class="hljs-comment">//InitBiTree(p);</span><br>	<span class="hljs-built_in">Push</span>(Q, T);<br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<br>	&#123;<br>		<span class="hljs-built_in">Pop</span>(Q, p);<br>		cout &lt;&lt; p-&gt;data;<br>		<span class="hljs-keyword">if</span> (p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-built_in">Push</span>(Q,p-&gt;lchild);<br>		&#125;<br>		<span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>		&#123;<br>			<span class="hljs-built_in">Push</span>(Q, p-&gt;rchild);<br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-comment">/* 二叉树的深度 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span><br>	&#123;<br>		<span class="hljs-type">int</span> left = <span class="hljs-built_in">treeDepth</span>(T-&gt;lchild);<br>		<span class="hljs-type">int</span> right = <span class="hljs-built_in">treeDepth</span>(T-&gt;rchild);<br>		<span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-comment">//如果左边不大于右边就加一</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			<span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//主程序入口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	BiTree bt;<br>	<span class="hljs-built_in">createBiTree</span>(bt);<br>	cout &lt;&lt; <span class="hljs-string">&quot;树的深度为：&quot;</span>&lt;&lt; <span class="hljs-built_in">treeDepth</span>(bt) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;树的先序遍历为：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-built_in">FirstOrder</span>(bt);<br>	cout &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;树的中序遍历为：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-built_in">MidOrder</span>(bt);<br>	cout &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;树的后序遍历为：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-built_in">EndOrder</span>(bt);<br>	cout &lt;&lt; endl;<br>	cout&lt;&lt; <span class="hljs-string">&quot;树的层次遍历为：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-built_in">LevelOrder</span>(bt);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>交换排序之冒泡排序（Bubble Sort）</title>
    <url>/2023/09/29/BubbleSort/</url>
    <content><![CDATA[<blockquote>
<p>本篇文章主要总结了冒泡排序的相关内容，包括选择排序的概念，特点和完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>从后往前两两比较相邻元素值，若为逆序就交换，直到序列比较完成。每一趟可以使一个元素移动到最终位置，已经确定的元素，之后无需再次对比。若一趟下来未发生交换，则算法可提前结束。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>空间复杂度：O(1)</li>
<li>平均时间复杂度：O(n^2)</li>
<li>算法稳定，顺序表和链表都可用</li>
</ul>
<h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 冒泡排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> * arr ,<span class="hljs-type">int</span> len)</span><span class="hljs-comment">//升序排列</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++) <br>    &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) <span class="hljs-comment">//每次确定一个最大值在后面</span><br>        &#123;<br>			<span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) <span class="hljs-comment">//前一个比后一个大就交换</span><br>            &#123;<br>				<span class="hljs-type">int</span> temp = arr[j];<br>				arr[j] = arr[j+<span class="hljs-number">1</span>];<br>				arr[j+<span class="hljs-number">1</span>] = temp;<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><p><a href="https://visualgo.net/zh/sorting">排序动画演示</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>优化C++控制台输出字体颜色方法</title>
    <url>/2023/10/01/C++ConsoleTextColor/</url>
    <content><![CDATA[<blockquote>
<p>C++的系统调用输出颜色的方法参数很冗长，而且没有中文注释，很不方便，所以进行了优化处理，各位可以直接复制保存使用。</p>
</blockquote>
<span id="more"></span>

<h1 id="优化C-控制台输出字体颜色方法"><a href="#优化C-控制台输出字体颜色方法" class="headerlink" title="优化C++控制台输出字体颜色方法"></a>优化C++控制台输出字体颜色方法</h1><blockquote>
<p>所用工具为：Microsoft Virtual Studio</p>
</blockquote>
<h2 id="原版"><a href="#原版" class="headerlink" title="原版"></a>原版</h2><h3 id="字体颜色："><a href="#字体颜色：" class="headerlink" title="字体颜色："></a>字体颜色：</h3><p>使用方法：先包含windows头文件<code>Windows.h</code></p>
<p>必须在方法体内：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//调用此方法设置参数</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_RED);<br><span class="hljs-comment">//颜色参数之间用|分隔</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br></code></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="center">文本颜色</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">红色</td>
<td align="center">FOREGROUND_RED</td>
</tr>
<tr>
<td align="center">绿色</td>
<td align="center">FOREGROUND_GREEN</td>
</tr>
<tr>
<td align="center">蓝色</td>
<td align="center">FOREGROUND_BLUE</td>
</tr>
<tr>
<td align="center">白色</td>
<td align="center">FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED</td>
</tr>
<tr>
<td align="center">天蓝色</td>
<td align="center">FOREGROUND_BLUE | FOREGROUND_GREEN</td>
</tr>
<tr>
<td align="center">黄色</td>
<td align="center">FOREGROUND_GREEN | FOREGROUND_RED</td>
</tr>
<tr>
<td align="center">粉色</td>
<td align="center">FOREGROUND_RED | FOREGROUND_BLUE</td>
</tr>
<tr>
<td align="center">颜色增强</td>
<td align="center">FOREGROUND_INTENSITY</td>
</tr>
</tbody></table>
<h3 id="字体背景颜色："><a href="#字体背景颜色：" class="headerlink" title="字体背景颜色："></a>字体背景颜色：</h3><p>使用方法同字体颜色，主要是参数不一样</p>
<p>使用方法：先包含windows头文件<code>Windows.h</code></p>
<p>必须在方法体内：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//调用此方法设置参数</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_RED);<br><span class="hljs-comment">//颜色参数之间用|分隔</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br></code></pre></td></tr></table></figure>

<p>注：相关参数源码是用宏定义的，不可修改</p>
<table>
<thead>
<tr>
<th align="center">背景颜色</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">红色</td>
<td align="center">BACKGROUND_RED</td>
</tr>
<tr>
<td align="center">绿色</td>
<td align="center">BACKGROUND_GREEN</td>
</tr>
<tr>
<td align="center">蓝色</td>
<td align="center">BACKGROUND_BLUE</td>
</tr>
<tr>
<td align="center">白色</td>
<td align="center">BACKGROUND_BLUE | BACKGROUND_GREEN |BACKGROUND_RED</td>
</tr>
<tr>
<td align="center">天蓝色</td>
<td align="center">BACKGROUND_BLUE | BACKGROUND_GREEN</td>
</tr>
<tr>
<td align="center">黄色</td>
<td align="center">BACKGROUND_GREEN | BACKGROUND_RED</td>
</tr>
<tr>
<td align="center">粉色</td>
<td align="center">BACKGROUND_RED | BACKGROUND_BLUE</td>
</tr>
<tr>
<td align="center">颜色增强</td>
<td align="center">BACKGROUND_INTENSITY</td>
</tr>
</tbody></table>
<p>注：</p>
<ul>
<li>相关参数源码是用宏定义的，不可修改。</li>
<li>颜色为三基色，且不可与非颜色增强的混合搭配，即要么都增强，要么都不增强</li>
<li>设置后，后面的就全是这个颜色了</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Attributes flags:</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_BLUE      0x0001 <span class="hljs-comment">// text color contains blue.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_GREEN     0x0002 <span class="hljs-comment">// text color contains green.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_RED       0x0004 <span class="hljs-comment">// text color contains red.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_INTENSITY 0x0008 <span class="hljs-comment">// text color is intensified.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_BLUE      0x0010 <span class="hljs-comment">// background color contains blue.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_GREEN     0x0020 <span class="hljs-comment">// background color contains green.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_RED       0x0040 <span class="hljs-comment">// background color contains red.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_INTENSITY 0x0080 <span class="hljs-comment">// background color is intensified.</span></span><br></code></pre></td></tr></table></figure>



<h2 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h2><p>由于方法参数很长，不便使用，因此进行了简化。</p>
<p>使用方法：</p>
<ul>
<li>只需要创建个头文件，名称自定义，例如<code>printcolor</code>，然后复制下面的代码粘贴。</li>
<li>在源文件内包含此头文件<code>printcolor.h</code>，然后打印输出前调用方法<code>setTextColor()</code>设置字体颜色，调用方法<code>setTextBackgroundColor()</code>设置字体背景颜色，传入相应的<code>string</code>类型的英文颜色字符串即可。</li>
</ul>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once<span class="hljs-comment">//防止头文件重复包含</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	注意：</span><br><span class="hljs-comment">        设置后，在此之后输出的都将是设置的颜色。</span><br><span class="hljs-comment">        若再想恢复默认颜色，可通过不传参数执行此方法恢复默认颜色。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    设置字体颜色：</span><br><span class="hljs-comment">        方法支持15种颜色（请传入相应的英文参数）：</span><br><span class="hljs-comment">            0、浅白色：littlewhite</span><br><span class="hljs-comment">            1、红色：red      2、绿色：green     3、蓝色：blue</span><br><span class="hljs-comment">            4、白色: white    5、天蓝色：skyblue   6、黄色：yellow</span><br><span class="hljs-comment">            7、粉色: pink</span><br><span class="hljs-comment">            11、亮红色：lightred      12、亮绿色：lightgreen     13、亮蓝色：lightblue</span><br><span class="hljs-comment">            14、亮白色: lightwhite    15、亮天蓝色：lightskyblue   16、亮黄色：lightyellow</span><br><span class="hljs-comment">            17、亮粉色: lightpink</span><br><span class="hljs-comment">            其它参数或不传参数：默认色(白色)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTextColor</span><span class="hljs-params">(string color = <span class="hljs-string">&quot;white&quot;</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//设置Windows控制台打印颜色</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;littlewhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;red&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;green&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;blue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;white&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;skyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;yellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">6</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;pink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">7</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightred&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">11</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightgreen&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">12</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">13</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightwhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">14</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightskyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">15</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightyellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightpink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">17</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (num)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//浅白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-comment">//白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-comment">//天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-comment">//黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-comment">//粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<span class="hljs-comment">//增强红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<span class="hljs-comment">//增强绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<span class="hljs-comment">//增强蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<span class="hljs-comment">//增强白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<span class="hljs-comment">//增强天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<span class="hljs-comment">//增强黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<span class="hljs-comment">//增强粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<span class="hljs-comment">//默认</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    设置字体背景色：</span><br><span class="hljs-comment">        方法支持15种颜色（请传入相应的英文参数）：</span><br><span class="hljs-comment">            0、浅白色：littlewhite</span><br><span class="hljs-comment">            1、红色：red      2、绿色：green     3、蓝色：blue</span><br><span class="hljs-comment">            4、白色: white    5、天蓝色：skyblue   6、黄色：yellow</span><br><span class="hljs-comment">            7、粉色: pink</span><br><span class="hljs-comment">            11、亮红色：lightred      12、亮绿色：lightgreen     13、亮蓝色：lightblue</span><br><span class="hljs-comment">            14、亮白色: lightwhite    15、亮天蓝色：lightskyblue   16、亮黄色：lightyellow</span><br><span class="hljs-comment">            17、亮粉色: lightpink</span><br><span class="hljs-comment">    注意：背景色一旦设置，就恢复不了原来的黑色字体背景了，除非不设置背景色</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTextBackgroundColor</span><span class="hljs-params">(string color = <span class="hljs-string">&quot;white&quot;</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//设置Windows控制台打印颜色</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;littlewhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;red&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;green&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;blue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;white&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;skyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;yellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">6</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;pink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">7</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightred&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">11</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightgreen&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">12</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">13</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightwhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">14</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightskyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">15</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightyellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightpink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">17</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (num)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//浅白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-comment">//白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-comment">//天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-comment">//黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-comment">//粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<span class="hljs-comment">//增强红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<span class="hljs-comment">//增强绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<span class="hljs-comment">//增强蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<span class="hljs-comment">//增强白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<span class="hljs-comment">//增强天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<span class="hljs-comment">//增强黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<span class="hljs-comment">//增强粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<span class="hljs-comment">//默认</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>示例：源文件demo.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;printcolor.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;red&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;红色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;green&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;绿色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;white&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;白色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;skyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;天蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;yellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;黄色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;pink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;粉色字体：***************&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightred&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮红色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightgreen&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮绿色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightwhite&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮白色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightskyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮天蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightyellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮黄色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightpink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮粉色字体：***************&quot;</span> &lt;&lt; endl;<br><br><br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;red&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体红色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;green&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体绿色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;white&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体白色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;skyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体天蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;yellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体黄色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;pink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体粉色背景：***************&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightred&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮红色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightgreen&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮绿色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightwhite&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮白色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightskyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮天蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightyellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮黄色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightpink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮粉色背景：***************&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>程序优化</tag>
      </tags>
  </entry>
  <entry>
    <title>循环链表（Circular Link List）</title>
    <url>/2023/10/06/CircularLinkList/</url>
    <content><![CDATA[<blockquote>
<p>循环链表与单链表的主要区别和完整实现代码。</p>
</blockquote>
<span id="more"></span>

<hr>
<p>前置文章：<a href="https://superlovelace.top/2022/12/10/LinkList/">单链表</a></p>
<h1 id="循环链表-Circular-Link-List"><a href="#循环链表-Circular-Link-List" class="headerlink" title="循环链表(Circular Link List)"></a>循环链表(Circular Link List)</h1><p>初始循环链表的头结点的后继指向自己</p>
<h2 id="与单链表主要区别"><a href="#与单链表主要区别" class="headerlink" title="与单链表主要区别"></a>与单链表主要区别</h2><ul>
<li>在遍历时判断结点是否为头结点 而不是 是否为空</li>
<li>空的双向循环链表的头结点的前驱和后继都指向自己</li>
<li>两个循环链表可以合并为一个，循环链表A、B 定义指针 p</li>
<li>p指向B链表的最后一个结点指向的下下个结点的地址，即B的头结点指向的第一个数据</li>
<li>把A链表的最后一个结点的后继（A的头结点）赋值给 B链表的最后一个结点的后继（B的头结点）</li>
<li>把p的地址赋值给A链表的最后一个结点的后继</li>
<li>p &#x3D; B-&gt;next-&gt;next;&#x2F;&#x2F;把B的头结点地址指向给p</li>
<li>B-&gt;next &#x3D; A-&gt;next; &#x2F;&#x2F;把B的尾结点地址指向A的头结点</li>
<li>A-&gt;next &#x3D; p;&#x2F;&#x2F;把A的尾结点地址指向B的头结点指向的地址（B的第一个有值结点）</li>
</ul>
<h2 id="代码不同处"><a href="#代码不同处" class="headerlink" title="代码不同处"></a>代码不同处</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始化 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>	L = <span class="hljs-keyword">new</span> LNode;<br>	L-&gt;next = L;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode *p = L-&gt;next;<br>	<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> (p!=L &amp;&amp; j&lt;i)<span class="hljs-comment">//这里的改动！类似这种循环遍历的地方都要改</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (p==L || j &gt; i) <br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	e = p-&gt;data;<br>	<span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环链表 Circular Link List</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>	ElemType data;<br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化循环链表 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>	L = <span class="hljs-keyword">new</span> LNode;<br>	L-&gt;next = L;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环链表的取值（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要取值的循环链表</span><br><span class="hljs-comment">	参数二：要取值的位置</span><br><span class="hljs-comment">	参数三：待保存的对象</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode *p = L-&gt;next;<br>	<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> (p!=L &amp;&amp; j&lt;i)<span class="hljs-comment">//循环链表修改处！！！</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (p==L || j &gt; i) <span class="hljs-comment">//循环链表修改处！！！</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	e = p-&gt;data;<br>	<span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环链表的查找（按值查找）:   时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要查找的循环链表</span><br><span class="hljs-comment">	参数二：要查找的数据</span><br><span class="hljs-comment">	注意：成功：返回下标地址；失败：返回NULL。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode* p = L-&gt;next;<span class="hljs-comment">//创建新结点，并指向第一块数据</span><br>	<span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="hljs-comment">//如果p不为空且data == e,返回p的地址</span><br>	&#123;<br>		p = p-&gt;next;<br>	&#125;<br>	<span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环链表的插入（按位序插入）:时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要插入的循环链表</span><br><span class="hljs-comment">	参数二：要插入的位置</span><br><span class="hljs-comment">	参数三：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br>	<span class="hljs-comment">//循环链表修改处！！！</span><br>	<span class="hljs-keyword">while</span> (p-&gt;next!=L &amp;&amp; (j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-comment">//循环链表修改处！！！</span><br>	<span class="hljs-keyword">if</span> (p==L || j&gt;i<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果地址p为NULL就退出，头结点的地址也不为空</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* s = <span class="hljs-keyword">new</span> LNode; <span class="hljs-comment">//创建新结点</span><br>	s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>	s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>	p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环链表的删除:   时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要删除的循环链表</span><br><span class="hljs-comment">	参数二：要删除的位置</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br>	<span class="hljs-comment">//循环链表修改处！！！</span><br>	<span class="hljs-keyword">while</span> (p-&gt;next != L &amp;&amp;(j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-comment">//循环链表修改处！！！</span><br>	<span class="hljs-keyword">if</span> (p-&gt;next == L||(j&gt;i<span class="hljs-number">-1</span>))<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>	p-&gt;next = q-&gt;next;<span class="hljs-comment">//p的指针指向q的指针指向的下一个数据地址</span><br>	<span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	LinkList L;<br>	<span class="hljs-comment">//初始化循环链表</span><br>	<span class="hljs-built_in">InitList</span>(L);<br>	<span class="hljs-comment">//插入循环链表</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">ListInsert</span>(L, <span class="hljs-number">1</span>, i);<br>	&#125;<br>	<span class="hljs-comment">//取值</span><br>	<span class="hljs-type">int</span> e;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>	&#125;<br>	<br>	<span class="hljs-comment">//查找</span><br>	cout &lt;&lt; <span class="hljs-string">&quot;5的地址为：&quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(L, <span class="hljs-number">5</span>) &lt;&lt; endl;<br>	<span class="hljs-comment">//删除</span><br>	<span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">1</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;删除第一个元素5：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>	&#125;<br>	<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>CNPM安装指南（Windows）</title>
    <url>/2023/10/01/Cnpm-install/</url>
    <content><![CDATA[<blockquote>
<p>npm在国内使用总会出现些问题，例如下载速度慢，连接失败等；所以今天分享在Windows系统下安装在国内的CNPM。</p>
</blockquote>
<span id="more"></span>

<h2 id="CNPM安装教程（Windows系统版）"><a href="#CNPM安装教程（Windows系统版）" class="headerlink" title="CNPM安装教程（Windows系统版）"></a>CNPM安装教程（Windows系统版）</h2><p><strong>CNPM淘宝镜像官网：</strong><a href="https://npmmirror.com/">https://npmmirror.com/</a></p>
<h3 id="1、打开CNPM淘宝镜像官网"><a href="#1、打开CNPM淘宝镜像官网" class="headerlink" title="1、打开CNPM淘宝镜像官网"></a>1、打开CNPM淘宝镜像官网</h3><p>有很多信息：</p>
<ul>
<li>当前 <a href="https://npmmirror.com/">npmmirror.com</a> 运行版本是: <a href="mailto:&#99;&#110;&#x70;&#109;&#x63;&#x6f;&#114;&#x65;&#64;&#51;&#46;&#x32;&#48;&#46;&#51;">&#99;&#110;&#x70;&#109;&#x63;&#x6f;&#114;&#x65;&#64;&#51;&#46;&#x32;&#48;&#46;&#51;</a></li>
<li>本系统运行在 <a href="https://nodejs.org/?spm=a2c6h.24755359.0.0.6d446e513fj62f">Node.js</a>@v18.16.0 上</li>
<li>开源镜像: <a href="https://npmmirror.com/mirrors/">https://npmmirror.com/mirrors/</a></li>
<li>Node.js 镜像: <a href="https://npmmirror.com/mirrors/node/">https://npmmirror.com/mirrors/node/</a></li>
<li>alinode 镜像: <a href="https://npmmirror.com/mirrors/alinode/">https://npmmirror.com/mirrors/alinode/</a></li>
<li>ChromeDriver 镜像: <a href="https://npmmirror.com/mirrors/chromedriver/">https://npmmirror.com/mirrors/chromedriver/</a></li>
<li>OperaDriver 镜像: <a href="https://npmmirror.com/mirrors/operadriver/">https://npmmirror.com/mirrors/operadriver/</a></li>
<li>Selenium 镜像: <a href="https://npmmirror.com/mirrors/selenium/">https://npmmirror.com/mirrors/selenium/</a></li>
<li>electron 镜像: <a href="https://npmmirror.com/mirrors/electron/">https://npmmirror.com/mirrors/electron/</a></li>
</ul>
<p>注意：主要查看–&gt;<strong>本系统运行在 <a href="https://nodejs.org/?spm=a2c6h.24755359.0.0.6d446e513fj62f">Node.js</a>@v18.16.0 上</strong></p>
<p><strong>这里不同时间会有所不同，具体以你当前打开的官网这里写的为准，一定要匹配，不然后期安装CNMP会出现一堆错误。例如什么操作被系统拒绝，需要权限允许等等，网上的方法我都试过，什么删除npmrc文件，更改文件权限之类的，都没用…</strong></p>
<h3 id="2、打开Node-js官网"><a href="#2、打开Node-js官网" class="headerlink" title="2、打开Node.js官网"></a>2、打开Node.js官网</h3><p><strong>Node,js中文官网地址</strong>：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p>
<p>选择CNPM支持的版本下载（我现在是v18.16.0），下载会有些慢，请耐心等待，然后安装。</p>
<p>安装就没什么特别的，就安装路径根据需要改一下，其他的都默认。</p>
<p>安装成功后，打开cmd命令提示符，输入<code>npm</code>，会出现以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;npm<br>npm &lt;command&gt;<br><br>Usage:<br><br>npm install        install all the dependencies in your project<br>npm install &lt;foo&gt;  add the &lt;foo&gt; dependency to your project<br>npm test           run this project&#x27;s tests<br>npm run &lt;foo&gt;      run the script named &lt;foo&gt;<br>npm &lt;command&gt; -h   quick help on &lt;command&gt;<br>npm -l             display usage info for all commands<br>npm help &lt;term&gt;    search for help on &lt;term&gt; (in a browser)<br>npm help npm       more involved overview (in a browser)<br><br>All commands:<br><br>    access, adduser, audit, bugs, cache, ci, completion,<br>    config, dedupe, deprecate, diff, dist-tag, docs, doctor,<br>    edit, exec, explain, explore, find-dupes, fund, get, help,<br>    hook, init, install, install-ci-test, install-test, link,<br>    ll, login, logout, ls, org, outdated, owner, pack, ping,<br>    pkg, prefix, profile, prune, publish, query, rebuild, repo,<br>    restart, root, run-script, search, set, shrinkwrap, star,<br>    stars, start, stop, team, test, token, uninstall, unpublish,<br>    unstar, update, version, view, whoami<br><br>Specify configs in the ini-formatted file:<br>    C:\Users\user\.npmrc<br>or on the command line via: npm &lt;command&gt; --key=value<br><br>More configuration info: npm help config<br>Configuration fields: npm help 7 config<br><br>npm@9.5.1 D:\nodejs\node_modules\npm<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

<p>证明已安装成功。</p>
<h3 id="3、安装CNPM"><a href="#3、安装CNPM" class="headerlink" title="3、安装CNPM"></a>3、安装CNPM</h3><p>CNPM淘宝镜像官网有详细说明：</p>
<p>在<code>cmd</code>输入以下命令进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure>

<p>稍等片刻，成功后出现如下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;npm install -g cnpm --registry=https://registry.npmmirror.com<br>npm WARN deprecated @npmcli/move-file@2.0.1: This functionality has been moved to @npmcli/fs<br><br>added 470 packages in 42s<br><br>27 packages are looking for funding<br>  run `npm fund` for details<br>npm notice<br>npm notice New minor version of npm available! 9.5.1 -&gt; 9.6.7<br>npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.6.7<br>npm notice Run npm install -g npm@9.6.7 to update!<br>npm notice<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

<p>在<code>cmd</code>输入<code>cnpm</code>已验证可用性，成功则出现以下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;cnpm<br>Usage: cnpm [option] &lt;command&gt;<br>Help: http://cnpmjs.org/help/cnpm<br><br>  Extend command<br>    web                            open cnpm web (ex.: cnpm web)<br>    check [ingoreupdate]           check project dependencies, add ignoreupdate will not check modules&#x27; latest version(ex.: cnpm check, cnpm check -i)<br>    doc [moduleName]               open document page (ex.: cnpm doc egg)<br>    sync [moduleName]              sync module from source npm (ex.: cnpm sync egg)<br>    user [username]                open user profile page (ex.: cnpm user fengmk2)<br><br>  npm command use --registry=https://registry.npmmirror.com<br>    where &lt;command&gt; is one of:<br>    add-user, adduser, apihelp, author, bin, bugs, c, cache,<br>    completion, config, ddp, dedupe, deprecate, docs, edit,<br>    explore, faq, find, find-dupes, get, help, help-search,<br>    home, i, info, init, install, isntall, la, link, list, ll,<br>    ln, login, ls, outdated, owner, pack, prefix, prune,<br>    publish, r, rb, rebuild, remove, restart, rm, root,<br>    run-script, s, se, search, set, show, shrinkwrap, star,<br>    start, stop, submodule, tag, test, tst, un, uninstall,<br>    unlink, unpublish, unstar, up, update, v, version, view,<br>    whoami<br>      npm &lt;cmd&gt; -h     quick help on &lt;cmd&gt;<br>      npm -l           display full usage info<br>      npm faq          commonly asked questions<br>      npm help &lt;term&gt;  search for help on &lt;term&gt;<br>      npm help npm     involved overview<br><br>      Specify configs in the ini-formatted file:<br>          C:\Users\user\.cnpmrc<br>      or on the command line via: npm &lt;command&gt; --key value<br>      Config info can be viewed via: npm help config<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

<p>OK，到此CNPM就安装完成了，去开启你的奇妙之旅吧！</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>VsCode启动警告：无法导入Django</title>
    <url>/2023/10/05/DjangoStartError/</url>
    <content><![CDATA[<blockquote>
<p>ImportError: Couldn’t import Django. Are you sure it’s installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?</p>
</blockquote>
<span id="more"></span>

<h2 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">PS F:\mysite\mysite&gt; python manage.py runserver<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;manage.py&quot;</span>, line <span class="hljs-number">8</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> django.core.management <span class="hljs-keyword">import</span> execute_from_command_line<br>ModuleNotFoundError: No module named <span class="hljs-string">&#x27;django&#x27;</span><br><br>The above exception was the direct cause of the following exception:<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;manage.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">raise</span> ImportError(<br>ImportError: Couldn<span class="hljs-string">&#x27;t import Django. Are you sure it&#x27;</span>s installed <span class="hljs-keyword">and</span> available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?<br>PS F:\mysite\mysite&gt; <br></code></pre></td></tr></table></figure>

<p>错误信息翻译：</p>
<p>不能导入Django，您确定PYTHONPATH环境变量已安装并可用吗？您是否忘记激活虚拟环境？</p>
<hr>
<h2 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h2><p>发现系统的环境变量PATH里没有python，然后去用户环境变量，发现PAYH内容如下：</p>
<table>
<thead>
<tr>
<th>用户PATH内容</th>
</tr>
</thead>
<tbody><tr>
<td>D:\anaconda3</td>
</tr>
<tr>
<td>D:\anaconda3\Library\mingw-w64\bin</td>
</tr>
<tr>
<td>D:\anaconda3\Library\usr\bin</td>
</tr>
<tr>
<td>D:\anaconda3\Library\bin</td>
</tr>
<tr>
<td>D:\anaconda3\Scripts</td>
</tr>
<tr>
<td>D:\python\Scripts\</td>
</tr>
<tr>
<td>D:\python\</td>
</tr>
</tbody></table>
<p>这样先找的就是anaconda里的python</p>
<hr>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>将D:\python\上移到第一个，然后确定。</p>
<table>
<thead>
<tr>
<th>用户PATH更改后</th>
</tr>
</thead>
<tbody><tr>
<td>D:\python\</td>
</tr>
<tr>
<td>D:\anaconda3</td>
</tr>
<tr>
<td>D:\anaconda3\Library\mingw-w64\bin</td>
</tr>
<tr>
<td>D:\anaconda3\Library\usr\bin</td>
</tr>
<tr>
<td>D:\anaconda3\Library\bin</td>
</tr>
<tr>
<td>D:\anaconda3\Scripts</td>
</tr>
<tr>
<td>D:\python\Scripts\</td>
</tr>
<tr>
<td></td>
</tr>
</tbody></table>
<h2 id="重启VSCode"><a href="#重启VSCode" class="headerlink" title="重启VSCode"></a>重启VSCode</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">PS F:\mysite\mysite&gt; python manage.py runserver<br>Watching <span class="hljs-keyword">for</span> file changes <span class="hljs-keyword">with</span> StatReloader<br>Performing system checks...<br><br>System check identified no issues (<span class="hljs-number">0</span> silenced).<br>October <span class="hljs-number">13</span>, <span class="hljs-number">2021</span> - <span class="hljs-number">11</span>:<span class="hljs-number">25</span>:<span class="hljs-number">26</span><br>Django version <span class="hljs-number">3.0</span>, using settings <span class="hljs-string">&#x27;mysite.settings&#x27;</span> <br>Starting development server at http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8000</span>/<br>Quit the server <span class="hljs-keyword">with</span> CTRL-BREAK.<br><br></code></pre></td></tr></table></figure>

<p>OK，启动成功！</p>
]]></content>
      <categories>
        <category>异常处理</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>双向链表（DuLinkList）</title>
    <url>/2023/10/07/DuLinkList/</url>
    <content><![CDATA[<blockquote>
<p>双向链表与单链表的主要区别和完整实现代码。</p>
</blockquote>
<span id="more"></span>
<hr>
<p>前置文章：<a href="https://superlovelace.top/2022/12/10/LinkList/">单链表</a></p>
<h1 id="双向链表（DuLinkList）"><a href="#双向链表（DuLinkList）" class="headerlink" title="双向链表（DuLinkList）"></a>双向链表（DuLinkList）</h1><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span><br>&#123;<br>	ElemType data; <span class="hljs-comment">//数据域</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* prior; <span class="hljs-comment">//直接前驱</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* next; <span class="hljs-comment">//直接后继</span><br>&#125;DuLNode, * DuLinkList;<br></code></pre></td></tr></table></figure>

<h2 id="与单链表主要区别"><a href="#与单链表主要区别" class="headerlink" title="与单链表主要区别"></a>与单链表主要区别</h2><p>比单链表多了个头结点，因此可以从最后一个结点往前遍历<br>与单链表主要区别在 存储结构、初始化、插入和删除的方法上，其他的可通用</p>
<p>与单链表代码不同的地方：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 双向链表结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span><br>&#123;<br>	ElemType data; <span class="hljs-comment">//数据域</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* prior; <span class="hljs-comment">//直接前驱</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* next; <span class="hljs-comment">//直接后继</span><br>&#125;DuLNode, * DuLinkList;<br><br><span class="hljs-comment">//初始化双链表 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(DuLinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>	L = <span class="hljs-keyword">new</span> DuLNode;<br>	L-&gt;prior = <span class="hljs-literal">NULL</span>;<br>	L-&gt;next = <span class="hljs-literal">NULL</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的取址（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要取址的双链表</span><br><span class="hljs-comment">	参数二：要取址的位置</span><br><span class="hljs-comment">	这是获取插入位置前一个的地址</span><br><span class="hljs-comment">	如果想把数据插入1号位置，就返回第1-1号位置的地址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DuLNode* <span class="hljs-title">GetElem_Dul</span><span class="hljs-params">(DuLinkList L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = L;<br>	<span class="hljs-comment">//if (p-&gt;next == NULL)//如果头结点L的后继为空，则返回头结点L的地址</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	return p;</span><br>	<span class="hljs-comment">//&#125;</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i<span class="hljs-number">-1</span>)<br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!p || j &gt; i)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<br>	<span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的插入（按位序前插入）:时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要插入的双链表</span><br><span class="hljs-comment">	参数二：要插入的位置</span><br><span class="hljs-comment">	参数三：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = <span class="hljs-built_in">GetElem_Dul</span>(L, i);<span class="hljs-comment">//获取插入位置的前驱结点</span><br>	DuLNode* s = <span class="hljs-keyword">new</span> DuLNode; <span class="hljs-comment">//创建新结点</span><br>	s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>	s-&gt;next = p-&gt;next;<span class="hljs-comment">//改s的前驱和后继</span><br>	<span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		p-&gt;next-&gt;prior = s;<span class="hljs-comment">//p的指针指向新节点s</span><br>	&#125;<br>	<br>	s-&gt;prior = p;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>	p-&gt;next = s;<br>	<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的删除:   时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要删除的双链表</span><br><span class="hljs-comment">	参数二：要删除的位置</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br>	<span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; (j &lt; i - <span class="hljs-number">1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!(p-&gt;next) || (j &gt; i - <span class="hljs-number">1</span>))<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	DuLNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>	p-&gt;next-&gt;next-&gt;prior = p;<span class="hljs-comment">//修改q-&gt;next的前驱</span><br>	p-&gt;next = p-&gt;next-&gt;next;<span class="hljs-comment">//修改p的后继</span><br>	<span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>


<h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表 Double Link List</span><br><span class="hljs-comment">	比单链表多了个头结点，因此可以从最后一个结点往前遍历</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	与单链表主要区别在 存储结构、插入和删除的方法上，其他的可通用</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span><br>&#123;<br>	ElemType data; <span class="hljs-comment">//数据域</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* prior; <span class="hljs-comment">//直接前驱</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* next; <span class="hljs-comment">//直接后继</span><br>&#125;DuLNode, * DuLinkList;<br><br><span class="hljs-comment">//初始化双链表 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(DuLinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>	L = <span class="hljs-keyword">new</span> DuLNode;<br>	L-&gt;prior = <span class="hljs-literal">NULL</span>;<br>	L-&gt;next = <span class="hljs-literal">NULL</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的取值（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要取值的双链表</span><br><span class="hljs-comment">	参数二：要取值的位置</span><br><span class="hljs-comment">	参数三：待保存的对象</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(DuLinkList L, <span class="hljs-type">int</span> i, ElemType&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = L-&gt;next;<br>	<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i)<br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!p || j &gt; i)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	e = p-&gt;data;<br>	<span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的取址（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要取址的双链表</span><br><span class="hljs-comment">	参数二：要取址的位置</span><br><span class="hljs-comment">	这是获取插入位置前一个的地址</span><br><span class="hljs-comment">	如果想把数据插入1号位置，就返回第1-1号位置的地址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DuLNode* <span class="hljs-title">GetElem_Dul</span><span class="hljs-params">(DuLinkList L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = L;<br>	<span class="hljs-comment">//if (p-&gt;next == NULL)//如果头结点L的后继为空，则返回头结点L的地址</span><br>	<span class="hljs-comment">//&#123;</span><br>	<span class="hljs-comment">//	return p;</span><br>	<span class="hljs-comment">//&#125;</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i<span class="hljs-number">-1</span>)<br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!p || j &gt; i)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<br>	<span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的查找（按值查找）:   时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要查找的双链表</span><br><span class="hljs-comment">	参数二：要查找的数据</span><br><span class="hljs-comment">	注意：成功：返回下标地址；失败：返回NULL。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DuLNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(DuLinkList L, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = L-&gt;next;<span class="hljs-comment">//创建新结点，并指向第一块数据</span><br>	<span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data != e)<span class="hljs-comment">//如果p不为空且data != e,指向下一个</span><br>	&#123;<br>		p = p-&gt;next;<br>	&#125;<br>	<span class="hljs-keyword">return</span> p;<span class="hljs-comment">//找到e返回p的地址，没找到返回NULL</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的插入（按位序前插入）:时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要插入的双链表</span><br><span class="hljs-comment">	参数二：要插入的位置</span><br><span class="hljs-comment">	参数三：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = <span class="hljs-built_in">GetElem_Dul</span>(L, i);<span class="hljs-comment">//获取插入位置的前驱结点</span><br>	DuLNode* s = <span class="hljs-keyword">new</span> DuLNode; <span class="hljs-comment">//创建新结点</span><br>	s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>	s-&gt;next = p-&gt;next;<span class="hljs-comment">//改s的前驱和后继</span><br>	<span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		p-&gt;next-&gt;prior = s;<span class="hljs-comment">//p的指针指向新节点s</span><br>	&#125;<br>	<br>	s-&gt;prior = p;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>	p-&gt;next = s;<br>	<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	双链表的删除:   时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要删除的双链表</span><br><span class="hljs-comment">	参数二：要删除的位置</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br>	<span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; (j &lt; i - <span class="hljs-number">1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!(p-&gt;next) || (j &gt; i - <span class="hljs-number">1</span>))<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	DuLNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>	p-&gt;next-&gt;next-&gt;prior = p;<span class="hljs-comment">//修改q-&gt;next的前驱</span><br>	p-&gt;next = p-&gt;next-&gt;next;<span class="hljs-comment">//修改p的后继</span><br>	<span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	DuLinkList L;<br>	<span class="hljs-comment">//初始化双链表</span><br>	<span class="hljs-built_in">InitList</span>(L);<br>	<span class="hljs-comment">//插入双链表</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">ListInsert</span>(L, i, i);<br>	&#125;<br>	<span class="hljs-comment">//取值</span><br>	<span class="hljs-type">int</span> e;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>	&#125;<br><br>	<span class="hljs-comment">//查找</span><br>	cout &lt;&lt; <span class="hljs-string">&quot;5的地址为：&quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(L, <span class="hljs-number">1</span>) &lt;&lt; endl;<br>	<span class="hljs-comment">//删除</span><br>	<span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">2</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;删除第一个元素1：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>英语语法综述</title>
    <url>/2023/09/30/EnglishGrammar/</url>
    <content><![CDATA[<blockquote>
<p>英语语法学习笔记，包括谓语动词、非谓语动词、句子成分、词类和时态等。</p>
</blockquote>
<span id="more"></span>

<p>注：本文为学习笔记，视频学习地址为：<a href="https://www.bilibili.com/video/BV1XY411J7aG/">英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系)</a>，更多英语学习视频请关注B站UP主：<a href="https://space.bilibili.com/483162496">英语兔</a></p>
<h1 id="英语语法综述"><a href="#英语语法综述" class="headerlink" title="英语语法综述"></a>英语语法综述</h1><p>当句子拆分到不能拆的时候，大都是以下此类句型：</p>
<p>主语(人&#x2F;物) + 谓语(动作&#x2F;发生了什么事)</p>
<p>此刻的动作是广义的动作，即动词</p>
<h2 id="一、谓语动词"><a href="#一、谓语动词" class="headerlink" title="一、谓语动词"></a>一、谓语动词</h2><h3 id="1、可以独立完成的动作（不及物动词）"><a href="#1、可以独立完成的动作（不及物动词）" class="headerlink" title="1、可以独立完成的动作（不及物动词）"></a>1、可以独立完成的动作（不及物动词）</h3><p>例如：<code>Papa Rabbit sleeps.</code> (译文：兔老爹睡觉。)</p>
<p>动词<code>sleep</code> 没有承受者，是不及物动词。</p>
<h6 id="对应句型：主语-动词"><a href="#对应句型：主语-动词" class="headerlink" title="对应句型：主语+动词"></a>对应句型：<code>主语+动词</code></h6><h3 id="2、有1个动作的承受者（单及物动词）"><a href="#2、有1个动作的承受者（单及物动词）" class="headerlink" title="2、有1个动作的承受者（单及物动词）"></a>2、有<code>1</code>个动作的承受者（单及物动词）</h3><p>例如：<code>Papa Rabbit like you.</code> (译文：兔老爹喜欢你。)</p>
<p>动词<code>like</code> 为及物动词，若只是<code>Papa Rabbit like</code> 兔老爹喜欢，喜欢什么呢，我们会觉得意思不完整，或者没有意义。而此例句的动作承受着<code>you</code>就是宾语。</p>
<h6 id="对应句型：主语-单及物动词-宾语"><a href="#对应句型：主语-单及物动词-宾语" class="headerlink" title="对应句型：主语+单及物动词+宾语"></a>对应句型：<code>主语+单及物动词+宾语</code></h6><h3 id="3、有2个动作的承受者（双及物动词）"><a href="#3、有2个动作的承受者（双及物动词）" class="headerlink" title="3、有2个动作的承受者（双及物动词）"></a>3、有<code>2</code>个动作的承受者（双及物动词）</h3><p>例如：<code>Papa Rabbit teaches you English.</code> (译文：兔老爹教你英语。)</p>
<p>此句有两个承受者，其中，核心词为<code>teach </code>教，教的知识是<code>English</code>英语，知识的接受对象是<code>you </code>你。动词的这两个承受者被称为直接宾语和间接宾语。若只是<code>Papa Rabbit teaches English</code> 兔老爹教英语，句意已经完整了，而<code>Papa Rabbit teaches you</code> 兔老爹教你，则不完整，仍需补充，所以<code>English</code>为直接宾语，<code>you</code>为间接宾语。</p>
<h6 id="对应句型：主语-双及物动词-间接宾语-直接宾语"><a href="#对应句型：主语-双及物动词-间接宾语-直接宾语" class="headerlink" title="对应句型：主语+双及物动词+间接宾语+直接宾语"></a>对应句型：<code>主语+双及物动词+间接宾语+直接宾语</code></h6><h3 id="4、只有1个动作的承受者但需补充说明（复杂及物动词）"><a href="#4、只有1个动作的承受者但需补充说明（复杂及物动词）" class="headerlink" title="4、只有1个动作的承受者但需补充说明（复杂及物动词）"></a>4、只有<code>1</code>个动作的承受者但需补充说明（复杂及物动词）</h3><p>例如：<code>Papa Rabbit considers you smart.</code> (译文：兔老爹认为你聪明。)</p>
<p><code>you</code>为动作承受者，是宾语。而<code>smart</code>为形容词，并不能是动作承受者，在英语中，宾语只包含名词和代词。但只是认为你，意义不完整，需要补充，而<code>smart</code>在这里充当补语，用来说明认为的状态。这种需要补语的动词被称为复杂及物动词。</p>
<h6 id="对应句型：主语-复杂及物动词-宾语-宾语-补语"><a href="#对应句型：主语-复杂及物动词-宾语-宾语-补语" class="headerlink" title="对应句型：主语+复杂及物动词+宾语+(宾语)补语"></a>对应句型：<code>主语+复杂及物动词+宾语+(宾语)补语</code></h6><h3 id="5、非动作（系动词）"><a href="#5、非动作（系动词）" class="headerlink" title="5、非动作（系动词）"></a>5、非动作（系动词）</h3><p>例如：<code>Papa Rabbit is tall.</code> (译文：兔老爹很高。)</p>
<p><code>is</code> 通常翻译成 ” 是 “，在这里只是把<code>tall</code>(高的)这个信息赋予<code>Papa Rabbit</code>，大白话就是把两者连系起来，所以这类词被称为连系动词。系动词后的补充信息就是补语，更精确说是主语补语，主语补语又称为表语。</p>
<h6 id="对应句型：主语-系动词-主语-补语-表语"><a href="#对应句型：主语-系动词-主语-补语-表语" class="headerlink" title="对应句型：主语+系动词+(主语)补语/表语"></a>对应句型：<code>主语+系动词+(主语)补语/表语</code></h6><h2 id="二、句子成分"><a href="#二、句子成分" class="headerlink" title="二、句子成分"></a>二、句子成分</h2><p>以上已经提到了5种句子成分：</p>
<ol>
<li>主语</li>
<li>谓语动词</li>
<li>宾语</li>
<li>宾语补语</li>
<li>主语补语</li>
</ol>
<p>6、定语（主要用来主语和宾语）</p>
<p>例如：<code>The little white rabbit ate a large carrot.</code>译文：这只小白兔吃了一根大胡萝卜。</p>
<p>其中，<code>The little white</code> 就是主语<code>rabbit</code>的定语，而<code>a large</code>就是宾语<code>carrot</code>的定语</p>
<p>7、状语（主要用来修饰谓语动词）</p>
<p>例如：<code>The rabbit ate quickly.</code>译文：兔子快速地吃。</p>
<p><code>quickly</code>就是<code>ate</code>的状语</p>
<p>8、同位语（主要是把主语或宾语换个说法再说一遍）</p>
<p><code>Papa Rabbit，an English teacher，eats carrots.</code>译文：兔老爹，一个英语老师，吃胡萝卜。</p>
<p><code>an English teacher</code>就是把<code>Papa Rabbit</code>换个方式说了一遍，与主语同等地位。</p>
<h2 id="三、简单句"><a href="#三、简单句" class="headerlink" title="三、简单句"></a>三、简单句</h2><p>以上皆为简单句，而简单句的简单相加就变成了复合句，而简单句的嵌套就组成了复杂句。</p>
<p>一个句子套一个句子——&gt;主句+从句(嵌套的句子)，而从句本质上就是修改简单句成为另一个句子的句子成分。</p>
<p>名词性从句：</p>
<ul>
<li>简单句作主语–&gt;主语从句</li>
<li>简单句作宾语–&gt;宾语从句</li>
<li>简单句作表语–&gt;表语从句</li>
<li>简单句作同位语–&gt;同位语从句</li>
</ul>
<p>简单句作定语–&gt;定语从句</p>
<p>简单句作状语–&gt;状语从句</p>
<h2 id="四、词类（充当句子成分）"><a href="#四、词类（充当句子成分）" class="headerlink" title="四、词类（充当句子成分）"></a>四、词类（充当句子成分）</h2><ol>
<li>动词（表示动作行为）</li>
<li>名词（表示人和物）</li>
<li>冠词（说明人和物）<code>a</code>、<code>an</code>和<code>the</code></li>
<li>代词（替代人和物）<code>he</code>、<code>she</code>、<code>I</code>、<code>they</code>、<code>it</code>等等</li>
<li>形容词（形容人和物）</li>
<li>数词（表数量）</li>
<li>副词（修饰动词或形容词）</li>
<li>介词（表示和其他词关系的词）</li>
<li>叹词（表感叹）</li>
<li>连词（连接词和句）<code>and</code>、<code>because</code>等等</li>
</ol>
<h2 id="五、时态"><a href="#五、时态" class="headerlink" title="五、时态"></a>五、时态</h2><p>谓语动词的”三大本领“：</p>
<ol>
<li>动作时间（过去、现在、将来和过去将来）</li>
<li>动作状态（一般，进行、完成和完成进行）</li>
<li>动作假设，情感…（语气）</li>
</ol>
<p>时态 &#x3D;&#x3D; 动作时间 + 动作状态</p>
<p>谓语动词本身并不能直接把其本领表示出来，需要借助助动词来完成。</p>
<h2 id="六、助动词"><a href="#六、助动词" class="headerlink" title="六、助动词"></a>六、助动词</h2><p>例如<code>eat</code>吃：</p>
<ul>
<li>(协助)表示 ”吃过了“（完成）–&gt; <code>have</code> –&gt; <code>have eaten</code></li>
<li>(协助)表示 ”正在吃“（进行）–&gt; <code>be</code> –&gt; <code>is eating</code></li>
<li>(协助)表示 ”被吃“–&gt; <code>be</code> –&gt; <code>is eaten</code></li>
<li>(协助)表示 ”有能力吃“–&gt; <code>can</code>–&gt; <code>can eat</code></li>
<li>(协助)表示 ”有可能吃“ –&gt; <code>might</code>–&gt; <code>might eat</code></li>
<li>(协助)表示 ”有义务吃“–&gt; <code>must</code>–&gt; <code>must eat</code></li>
<li>(协助)表示 ”不吃“（否定）–&gt; <code>do</code> –&gt; <code>do not eat</code></li>
</ul>
<p>这些词做助动词时，没有实际意义，只是帮助作用。</p>
<p>但是这些词本身作为实义动词还是有具体意义的，甚至具有其它词性：</p>
<p><code>can</code>可以是 ”易拉罐“、<code>be</code>可以是 “存在”、<code>might</code>可以是 ”力量“、<code>musty</code>可以是发霉的、<code>do</code>可以是 ”做某事“、<code>have</code>可以是拥有等等…</p>
<h2 id="七、非谓语动词"><a href="#七、非谓语动词" class="headerlink" title="七、非谓语动词"></a>七、非谓语动词</h2><p>几乎可以取代所有从句，从而简化句子，但此类动词丧失了表示<strong>动作时间</strong>，<strong>状态</strong>，<strong>语态语气</strong>的功能，即没有时态的变化。</p>
<p>有以下四种：</p>
<ul>
<li>动词不定式（形式为 to do）</li>
<li>现在分词（形式为 动词+ing）</li>
<li>动名词（形式为 动词+ing）</li>
<li>过去分词（形式为 动词+ed）</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>英语语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Git deploy 部署报错</title>
    <url>/2022/11/29/Git-error/</url>
    <content><![CDATA[<blockquote>
<p>ssh_exchange_identification: Connection closed by remote host. fatal: Could not read from remote repository.</p>
</blockquote>
<span id="more"></span>

<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>今天部署到GitHub时，出现此错误。昨天还正常，今天突然这样。</p>
<h2 id="详细错误信息："><a href="#详细错误信息：" class="headerlink" title="详细错误信息："></a>详细错误信息：</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@192 hexo]# hexo deploy<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">位于分支 master</span><br>无文件要提交，干净的工作区<br>ssh_exchange_identification: Connection closed by remote host<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/www/wwwroot/hexo/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:513:28)<br>    at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12)<br>[root@192 hexo]# <br></code></pre></td></tr></table></figure>

<h2 id="解析错误信息："><a href="#解析错误信息：" class="headerlink" title="解析错误信息："></a>解析错误信息：</h2><p>错误信息翻译成中文后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">SSH交换识别:连接被远程主机关闭<br>致命的:无法从远程存储库读取。<br>请确保您拥有正确的访问权限<br>而且存储库已经存在。<br>致命错误。也许你可以在这里找到解决方案:https://hexo.io/docs/troubleshooting.html<br>错误:生成失败<br>	at ChildProcess.&lt;anonymous&gt; (/www/wwwroot/hexo/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:513:28)<br>    at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12)<br></code></pre></td></tr></table></figure>

<p>通过以上可知：</p>
<p>系统连接不到GitHub，因此无法用SSH密钥进行识别。 —-&gt;   说明是网络问题。</p>
<h2 id="实践探索-解决过程："><a href="#实践探索-解决过程：" class="headerlink" title="实践探索 - 解决过程："></a>实践探索 - 解决过程：</h2><ul>
<li>出现错误的时候，我又多次部署了几次，依然这样。</li>
<li>然后，我打开了手机热点，让电脑连接。</li>
<li>再次部署，部署成功。</li>
<li>然后我关闭热点，换回无线网。</li>
<li>再次部署，部署失败，无法连接，同样的错误。</li>
<li>再打开热点，再部署，这次用手机热点部署失败，依旧报这个错误。</li>
<li>关闭手机热点，再部署，部署成功…</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过多次实践可知，这就是网络波动导致的问题，GitHub在国内连接本来就有时能连上有时连不上，而且我昨天部署过多次，都可以成功。这是今天突然发生的问题，而且我也没修改过其他东西，那么错误就不在自己这。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>尝试更换其他网络。</li>
<li>过一段时间再试。</li>
</ol>
]]></content>
      <categories>
        <category>异常处理</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub使用自己域名实现https</title>
    <url>/2022/11/25/Github-https/</url>
    <content><![CDATA[<blockquote>
<p>Hexo托管到GitHub并使用自己域名实现https。</p>
</blockquote>
<span id="more"></span>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>以阿里云为例，新增解析：</p>
<p>记录类型	主机记录	记录值<br>CNAME	@	username.github.io<br>CNAME	www	username.github.io</p>
<h2 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h2><p>然后去Github，在个人系统仓库设置里，找到GitHub Pages，在Custom domain里输入你新买的域名，保存。<br>在系统根目录Source下新增无后缀的CNAME文件，文件内写上你的新域名。<br>然后用git把项目更新托管到github<br>回到GitHub Pages，在<code>Custom domain</code>的DNS确认无误后，勾上下面的<code>Enforce HTTPS checkbox</code>，从而强制执行<code>HTTPS</code></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git克隆和提交代码</title>
    <url>/2023/10/23/Gituse/</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结了git初次使用克隆和提交代码。包括git的安装和配置，项目库的创建、项目的克隆和提交。</p>
</blockquote>
<span id="more"></span>

<h1 id="Git克隆和提交代码"><a href="#Git克隆和提交代码" class="headerlink" title="Git克隆和提交代码"></a>Git克隆和提交代码</h1><p>Progit中文版书籍：<a href="https://www.progit.cn/">https://www.progit.cn/</a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>windows系统先下载git，官方下载页：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li>
<li>创建本地项目文件夹存储库并进入</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>右键打开git bash，执行仓库初始化命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment">#然后回车</span><br></code></pre></td></tr></table></figure>

<p>此时会在项目存储库生成<code>.git</code>文件夹及其内容 </p>
<h3 id="设置个人信息"><a href="#设置个人信息" class="headerlink" title="设置个人信息"></a>设置个人信息</h3><p>设置用户名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;myName&quot;</span>  <br></code></pre></td></tr></table></figure>

<p>查看用户名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config user.name<br></code></pre></td></tr></table></figure>

<p>设置邮箱：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure>

<p>查看邮箱：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config user.email<br></code></pre></td></tr></table></figure>

<p>查看配置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --list <span class="hljs-comment">#可查看当前用户信息以及其他的一些信息</span><br></code></pre></td></tr></table></figure>

<h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>指定文件名生成密钥（方便查看公钥以后要用的地方），否则文件名将用默认名称</p>
<p>指定密钥文件名为<code>gitee_id_rsa</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br></code></pre></td></tr></table></figure>

<p>指定密钥文件名为<code>github_id_rsa</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Github SSH Key&#x27;</span> -f ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure>

<hr>
<p>常用参数注释：</p>
<p>-t 加&#x2F;解密算法类型（rsa、ed25519等）</p>
<p>-b 秘钥长度,rsa默认秘钥长度的为 2048</p>
<p>-C 注释，一般是填写用户名</p>
<p>-f 指定生成的秘钥文件名，如果不提供此参数则使用默认文件名，如rsa私钥默认文件名 ~&#x2F;.ssh&#x2F;id_rsa ，公钥默认文件名 ~&#x2F;.ssh&#x2F;id_rsa.pub</p>
<hr>
<p>首次生成SSH密钥会有三次询问，根据需要设置，想免密推送就不设置密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br>//生成一对RSA密钥<br>Generating public/private rsa key pair.<br>//密钥文件存储位置，直接回车使用默认路径<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/Users/user/.ssh/gitee_id_rsa):<br>//设置密码，若直接回车则不设置密码<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>//确认密码，和上步操作相同<br>Enter same passphrase again:<br>//文件存储位置<br>Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa<br>Your public key has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa.pub<br><br>The key fingerprint is:<br>SHA256:wXKzkWFbVONiEtSWPXjcjVy0oONsMYbBU59h7mlMwes Gitee SSH Key<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+---[RSA 3072]----+</span><br><span class="hljs-string">|       .*++B+B =o|</span><br><span class="hljs-string">|       o OB.XoO o|</span><br><span class="hljs-string">|      . Xo+B.*.. |</span><br><span class="hljs-string">|       o B+.B..  |</span><br><span class="hljs-string">|        S  +.=   |</span><br><span class="hljs-string">|          . .E   |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">+----[SHA256]-----+</span><br><span class="hljs-string"></span><br><span class="hljs-string">user@DESKTOP MINGW64 ~/Desktop</span><br></code></pre></td></tr></table></figure>

<h3 id="创建config文件"><a href="#创建config文件" class="headerlink" title="创建config文件"></a>创建<code>config</code>文件</h3><p>进入生成的密钥文件夹，创建文件，文件名为<code>config</code>，没有后缀。然后添加以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_rsa<br><span class="hljs-comment"># github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure>

<p>注：<code>Host </code>和<code>HostName</code> 填写 git 服务器的域名，<code>IdentityFile</code> 指定私钥的路径</p>
<p>配置公钥到<code>Gitee</code>或<code>Github</code>：</p>
<ul>
<li>Gitee SSH配置地址在：个人资料的安全设置–&gt;SSH公钥</li>
<li>Github SSH配置地址在：用户头像–&gt;右侧边栏–&gt;Settings–&gt;Access–&gt;SSH and GPG keys</li>
</ul>
<p>查看生成的SSH公钥：</p>
<p>方式一：用记事本打开公钥文件，全选复制。</p>
<p>方式二：用<code>gitbash</code>查看</p>
<p>查看<code>.ssh</code>文件夹内的所有文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh/<br></code></pre></td></tr></table></figure>

<p>输出内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">ls</span> ~/.ssh/<br>config        gitee_id_rsa.pub  github_id_rsa.pub  gitee_id_rsa  github_id_rsa<br></code></pre></td></tr></table></figure>

<ul>
<li>公钥文件为：<code>gitee_id_rsa.pub</code> 和<code>github_id_rsa.pub</code>，</li>
<li>私钥文件为：<code>gitee_id_rsa</code> 和<code>github_id_rsa</code></li>
</ul>
<p>查看公钥内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br></code></pre></td></tr></table></figure>

<p>输出内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDchWfkihfqZgdV6/431en8mUN2dk5FtAJ0TkCYQJXq07nn51c9+3qNjbvxxygFDSOFIyG7nb34H2vAk8RL/drODtBPSxNhtxt/IuKSNNHF7hYt+nh8VqbNTMi9fJVEN6+bS7k7gLTY1IVDd4sUjEKw0mYzPgdHCAyubSARUYzATx2SOn9+6UAo1Iq2Ftt0OVMmoWueIe5E9nQWd8IANbrnvs9VbPYVP5fyPQez+/YT4HxGib5+hYXVEsFh/qN3JxbY3uK34mX3jJtz++ULcQPtS8w0AQWR94po6EH1TJvUWMlTOT8liGd9aebuFrZjjVibvQ6kVcApTtEDJXzeb00fqh3waNc8+vTTwpyzHXy8ictcLCbnAFHzgOJpS0tMgkof0U4p3pHrY4umQ5IHkq5aS2WDch6IHVy3mwRdzK91BAzIcNHMnVKAC528WT4KZ3ZdFjC6XxCoiwf6d8MBCxhMnMbm4i284RoQa9LYEuZtzWCcheYpTN7/knfDksrLiEE= Gitee SSH Key<br></code></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>配置完成后回到<code>git bash</code>，测试配置的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh -T git@gitee.com<br>ssh -T git@github.com<br></code></pre></td></tr></table></figure>

<p>成功后，显示如下内容：</p>
<p>测试<code>gitee</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@gitee.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></code></pre></td></tr></table></figure>

<p>测试<code>github</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@github.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure>

<h2 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h2><p>先进入之前创建的项目文件夹</p>
<h3 id="链接到远程库"><a href="#链接到远程库" class="headerlink" title="链接到远程库"></a>链接到远程库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git remote add origin https://git.oschina.net/xxxxxx/xxxxxx.git<br></code></pre></td></tr></table></figure>

<h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:AprilDawn/AprilDawn.gitee.io.git<br></code></pre></td></tr></table></figure>

<p>这样项目就下载到项目仓库了，现在就可以打开项目写代码了。</p>
<h2 id="项目提交"><a href="#项目提交" class="headerlink" title="项目提交"></a>项目提交</h2><p>当完成代码后，进入克隆的项目里。</p>
<h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>添加项目中新增或改动的文件到缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git add . <br></code></pre></td></tr></table></figure>

<p>注：点表示添加目录下所有文件到缓存库,如果只添加某个文件,只需把 . 换成你要添加的文件名即可;</p>
<h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>用以说明此次提交更改了哪些信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;新增什么功能，修复了什么BUG等等&quot;</span><br></code></pre></td></tr></table></figure>

<h3 id="推送提交到远程仓库"><a href="#推送提交到远程仓库" class="headerlink" title="推送提交到远程仓库"></a>推送提交到远程仓库</h3><p>这是默认推送到master分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure>

<p>推送到指定分支</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 分支名<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构 - 图</title>
    <url>/2022/12/10/Graph/</url>
    <content><![CDATA[<blockquote>
<p>数据结构第六章图的学习笔记。</p>
</blockquote>
<span id="more"></span>
<html>
<div class="box1">
         <span class="leftline"></span>
         <span class="text">正文部分</span>
         <span class="rightline"></span>
     </div>
</html>

<h3 id="1、图的定义、存储结构"><a href="#1、图的定义、存储结构" class="headerlink" title="1、图的定义、存储结构"></a>1、图的定义、存储结构</h3><h4 id="1-1、图的定义和术语"><a href="#1-1、图的定义和术语" class="headerlink" title="1.1、图的定义和术语"></a>1.1、图的定义和术语</h4><blockquote>
<p>线性表可以是空表，树可以是空树，但图不可以空</p>
<p>即图的顶点不能空，但边可以空</p>
</blockquote>
<p>图: G&#x3D;(V,E)</p>
<p>V: 顶点(数据元素)的有穷非空集合</p>
<p>E: 边的有穷集合</p>
<p>简单图：1.不存在重复边 2.不存在顶点到自身的边 </p>
<p>多重图：两点间的边多于一条，允许自己的边连接自己</p>
<ol>
<li>无向图: 每条边都是无方向的  (x,y)为边，且与(y,x)相同</li>
<li>有向图: 每条边都是有方向的  &lt;x,y&gt;为边，且与&lt;y,x&gt;不同</li>
<li>完全图: 任意两个点都有一条边相连</li>
<li>稀疏图: 有很少边或弧的图(e&lt;nlogn)</li>
<li>稠密图: 有较多边或弧的图</li>
<li>网: 边&#x2F;弧带权的图</li>
<li>邻接: 有边&#x2F;弧相连的两个顶点之间的关系(圆括号是无向图，尖括号是有向图)</li>
</ol>
<blockquote>
<p>存在(Vi,Vj),则称Vi和Vj互为邻接点</p>
<p>存在&lt;Vi,Vj&gt;,则称Vi邻接到Vi，Vj邻接于Vi</p>
</blockquote>
<ol start="8">
<li>关联(依附): 边&#x2F;弧与顶点之间的关系</li>
</ol>
<blockquote>
<p>存在(Vi,Vj)&#x2F;&lt;Vi,Vj&gt;,则称该边&#x2F;弧关联于Vi和Vj</p>
</blockquote>
<ol start="9">
<li>顶点的度: 与该顶点相关联的边的数目，记为TD(v)</li>
</ol>
<blockquote>
<p>在有向图中，顶点的度等于该顶点的入度与出度之和</p>
<p>顶点v的入度是以v为终点的有向边的条数，记作ID(v)  指向V结点的</p>
<p>顶点v的出度是以v为始点的有向边的条数，记作OD(v) V结点指出的</p>
</blockquote>
<ol start="10">
<li>当有向图中仅1个顶点的入度为0，其余顶点的入度均为1，此时是何形状?</li>
</ol>
<blockquote>
<p>答: 是树!而且是一棵有向树!</p>
</blockquote>
<h4 id="1-2、图的相关概念"><a href="#1-2、图的相关概念" class="headerlink" title="1.2、图的相关概念"></a>1.2、图的相关概念</h4><p>点到点的距离，即最短路径。两点无连接，则这两点的距离为无穷</p>
<ol>
<li>路径: 接续的边构成的顶点序列</li>
<li>路径长度: 路径上边或弧的数目&#x2F;权值之和</li>
<li>回路(环): 第一个顶点和最后一个顶点相同的路径</li>
<li>简单路径: 除路径起点和终点可以相同外，其余顶点均不相同的路径</li>
<li>简单回路(简单环): 除路径起点和终点相同外，其余顶点均不相同的路径</li>
<li>连通图(强连通图): 在无(有)向图G&#x3D;{V,{E}}中，若对任何两个顶点v、u都存在从v、u的路径，则称G是连通图(强连通图)</li>
<li>权与网: 图中边或弧所具有的相关数称为权，表明从一个顶点到另一个顶点的距离或耗费带权的图称为网</li>
<li>子图: 设有两个图G&#x3D;(V,{E})、G1&#x3D;(V1,{E1}),若则称G1是G的子图</li>
</ol>
<h4 id="1-3、连通分量"><a href="#1-3、连通分量" class="headerlink" title="1.3、连通分量"></a>1.3、连通分量</h4><ol>
<li>无向图G的极大连通子图称为G的连通分量</li>
<li>极大连通子图:该子图是G的连通子图，将G的任何不在该子图中的顶点加入，子图不再连通</li>
<li>有向图G的极大强连通子图称为G的连强通分量</li>
<li>极大强连通子图:该子图是G的强连通子图，将G的任何不在该子图中的顶点加入，子图不再强连通</li>
<li>极小连通子图:该子图是G的连通子图，在该子图中删除任何一条边，子图不再连通</li>
<li>生成森林: 对非连通图，由各个连通分量的生成树的集合</li>
</ol>
<h4 id="1-4、图的存储结构"><a href="#1-4、图的存储结构" class="headerlink" title="1.4、图的存储结构"></a>1.4、图的存储结构</h4><h5 id="1-4-1、邻接矩阵法："><a href="#1-4-1、邻接矩阵法：" class="headerlink" title="1.4.1、邻接矩阵法："></a>1.4.1、邻接矩阵法：</h5><p>数组实现的顺序存储，空间复杂度高，不适合存储稀疏图 n^2</p>
<p>无向图的邻接矩阵：（右上和左下是对称重复的）</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">D</th>
<th align="center">E</th>
<th align="center">F</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>无向图邻接矩阵特点：第<code>i</code>个结点的度 &#x3D; 第<code>i</code>行（或第<code>i</code>列）的非零元素个数</p>
<hr>
<p>有向图的邻接矩阵：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">D</th>
<th align="center">E</th>
<th align="center">F</th>
</tr>
</thead>
<tbody><tr>
<td align="center">A</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">C</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">D</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">F</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
</tbody></table>
<p>有向图邻接矩阵特点：</p>
<ul>
<li>第<code>i</code>个结点的出度 &#x3D; 第<code>i</code>行（或第<code>i</code>列）的非零元素个数</li>
<li>第<code>i</code>个结点的入度 &#x3D; 第<code>i</code>行（或第<code>i</code>列）的非零元素个数</li>
<li>第<code>i</code>个结点的度 &#x3D; 第<code>i</code>行、第<code>i</code>列的非零元素个数之和</li>
</ul>
<p>邻接矩阵性质：</p>
<p>两个矩阵A,B相乘，新的矩阵的C(1,4)位置的值为：A的第一行的第一个值*B的第四列的第一个值，有几个就+几个<br>$$<br>C(1,4) &#x3D; A(1,1)*B(1,4)+A(1,2)*B(2,4)+A(1,3)*B(3,4)+A(1,4)*B(4,4)<br>$$</p>
<h5 id="1-4-2、邻接表（顺序存储-链式存储）"><a href="#1-4-2、邻接表（顺序存储-链式存储）" class="headerlink" title="1.4.2、邻接表（顺序存储+链式存储）"></a>1.4.2、邻接表（顺序存储+链式存储）</h5><p>计算图的入读和找图的入边不方便，只能遍历</p>
<p>指针顺序不唯一，适合存稀疏图</p>
<table>
<thead>
<tr>
<th align="center">index</th>
<th align="center">data</th>
<th align="center">*指针1</th>
<th align="center">*指针2</th>
<th align="center">*指针3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">A</td>
<td align="center">–&gt; 1</td>
<td align="center">–&gt; 2</td>
<td align="center">–&gt; 3</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">B</td>
<td align="center">–&gt; 0</td>
<td align="center">–&gt; 4</td>
<td align="center">–&gt; 5</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">C</td>
<td align="center">–&gt; 0</td>
<td align="center">–&gt; 4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">D</td>
<td align="center">–&gt; 0</td>
<td align="center">–&gt; 5</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">E</td>
<td align="center">–&gt; 1</td>
<td align="center">–&gt; 2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">F</td>
<td align="center">–&gt; 1</td>
<td align="center">–&gt; 3</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>拓展，逆邻接表：</p>
<p>存的是指向它的结点（前驱）</p>
<h5 id="1-4-3、十字链表（有向图）（了解即可）："><a href="#1-4-3、十字链表（有向图）（了解即可）：" class="headerlink" title="1.4.3、十字链表（有向图）（了解即可）："></a>1.4.3、十字链表（有向图）（了解即可）：</h5><p>数据域后的第一个橙色可以找到入边，第二个绿色找出边。这是相对于有向图来说的</p>
<h5 id="1-4-4、邻接多重表（无向图）（了解即可）："><a href="#1-4-4、邻接多重表（无向图）（了解即可）：" class="headerlink" title="1.4.4、邻接多重表（无向图）（了解即可）："></a>1.4.4、邻接多重表（无向图）（了解即可）：</h5><h3 id="2、图的遍历过程及算法"><a href="#2、图的遍历过程及算法" class="headerlink" title="2、图的遍历过程及算法"></a>2、图的遍历过程及算法</h3><h4 id="2-1、广度优先遍历（BFS）"><a href="#2-1、广度优先遍历（BFS）" class="headerlink" title="2.1、广度优先遍历（BFS）"></a>2.1、广度优先遍历（BFS）</h4><p>图的广度优先遍历就类似树的层次遍历</p>
<blockquote>
<p>同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一</p>
<p>同一个图的邻接表表示方式不唯一，因此广度优先遍历序列不唯一</p>
</blockquote>
<p>算法要点：</p>
<ul>
<li>需要一个辅助队列</li>
<li>如何从一个结点找到与之邻接的其他顶点</li>
<li>visited数组，防止重复访问</li>
<li>如何处理非连通图</li>
</ul>
<p>复杂度：</p>
<ul>
<li>空间复杂度：O(n)  —- 辅助队列</li>
<li>时间复杂度：<ul>
<li>访问结点的时间+访问所有边的时间</li>
<li>邻接矩阵：O(|V|^2)</li>
<li>邻接表：O(|V|+|E|)</li>
</ul>
</li>
</ul>
<p>广度优先生成树：</p>
<ul>
<li>即为广度优先遍历确定的树</li>
<li>邻接表存储的图表示方式不唯一，遍历序列，生成树也不唯一</li>
<li>遍历非连通图可得广度优先生成森林</li>
</ul>
<p>伪代码描述广度优先遍历：</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 伪代码 */</span><br><span class="hljs-comment">/* 访问标记数组 */</span><br><span class="hljs-type">bool</span> visited[MAX_VERTEX_NUM];<br><br><span class="hljs-comment">/* 对图G进行广度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(Graph G)</span><span class="hljs-comment">//主要是处理连通图多的情况</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G.vexnum; ++i)<br>	&#123;<br>		visited[i] = FALSE;<span class="hljs-comment">//访问标记数组初始化</span><br>	&#125;<br>	<span class="hljs-built_in">InitQueue</span>(Q); <span class="hljs-comment">//初始化辅助队列</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G.vexnum; ++i)<span class="hljs-comment">//从0号顶点开始遍历</span><br>	&#123;<br>		<span class="hljs-keyword">if</span> (!visited[i])<span class="hljs-comment">//对每个连通分量调用一次BFS</span><br>		&#123;<br>			<span class="hljs-built_in">BFS</span>(G, i);<span class="hljs-comment">//vi未访问过，从Vi开始BFS</span><br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-comment">/* 广度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph G, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//从顶点v出发，广度优先遍历图G</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">visit</span>(v); <span class="hljs-comment">//访问初始顶点v</span><br>	visited[v] = TRUE;<span class="hljs-comment">//对v做已访问标记</span><br>	<span class="hljs-built_in">Enqueue</span>(Q, v);<span class="hljs-comment">//顶点v入队列Q</span><br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isEmpty</span>(Q))<br>	&#123;<br>		<span class="hljs-built_in">DeQueue</span>(Q, v);<span class="hljs-comment">//顶点v出队列</span><br>        <span class="hljs-comment">//检测v所有邻接点</span><br>		<span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstNeighbor</span>(G,v); w &gt;=<span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextNeighbor</span>(G, v, w))<br>		&#123;	<br>			<span class="hljs-keyword">if</span> (!visited[w])  <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>			&#123;<br>				visited[w];<span class="hljs-comment">//访问顶点w</span><br>				visited[w] = TRUE;<span class="hljs-comment">//对w做已访问标记</span><br>				<span class="hljs-built_in">EnQueue</span>(Q, w);<span class="hljs-comment">//顶点w入队列</span><br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="2-2、深度优先遍历（DFS）"><a href="#2-2、深度优先遍历（DFS）" class="headerlink" title="2.2、深度优先遍历（DFS）"></a>2.2、深度优先遍历（DFS）</h4><p>图的深度优先遍历就类似树的先序遍历</p>
<p>算法要点：</p>
<ul>
<li>递归地深入探索未被访问过的邻接点（类似于树的先根遍历）</li>
<li>如何从一个结点找到与之邻接的其他顶点</li>
<li>visited数组，防止重复访问</li>
<li>如何处理非连通图</li>
</ul>
<p>复杂度：</p>
<ul>
<li>空间复杂度：O(|V|)  —- 来自递归工作站</li>
<li>时间复杂度：<ul>
<li>访问结点的时间+访问所有边的时间</li>
<li>邻接矩阵：O(|V|^2)</li>
<li>邻接表：O(|V|+|E|)</li>
</ul>
</li>
</ul>
<p>深度优先生成树：</p>
<ul>
<li>即为深度优先遍历确定的树</li>
<li>邻接表存储的图表示方式不唯一，深度优先遍历序列，生成树也不唯一</li>
<li>深度优先遍历非连通图可得深度优先生成森林</li>
</ul>
<p>伪代码描述深度优先遍历：</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 访问标记数组 */</span><br><span class="hljs-type">bool</span> visited[MAX_VERTEX_NUM];<br><br><span class="hljs-comment">/* 对图G进行深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(Graph G)</span><span class="hljs-comment">//主要是处理连通图多的情况</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<br>	&#123;<br>		visited[i] = FALSE;<span class="hljs-comment">//访问标记数组初始化</span><br>	&#125;<br>	<br>	<span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<span class="hljs-comment">//从0号顶点开始遍历</span><br>	&#123;<br>		<span class="hljs-keyword">if</span> (!visited[v])<span class="hljs-comment">//对每个连通分量调用一次BFS</span><br>		&#123;<br>			<span class="hljs-built_in">DFS</span>(G, v);<span class="hljs-comment">//vi未访问过，从Vi开始BFS</span><br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-comment">/* 深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//从顶点v出发，深度优先遍历图G</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">visit</span>(v); <span class="hljs-comment">//访问初始顶点v</span><br>	visited[v] = TRUE;<span class="hljs-comment">//对v做已访问标记</span><br>    <span class="hljs-comment">//检测v所有邻接点</span><br>    <span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstNeighbor</span>(G,v); w &gt;=<span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextNeighbor</span>(G, v, w))<br>    &#123;	<br>        <span class="hljs-keyword">if</span> (!visited[w])  <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>        &#123;<br>           <span class="hljs-built_in">DFS</span>(G,w);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>图的遍历和连通性：</p>
<ul>
<li>无向图：DFS&#x2F;BFS函数调用次数 &#x3D; 连通分量数</li>
<li>有向图<ul>
<li>若从起始顶点到其他顶点都有路径，则只需调用一次DFS&#x2F;BFS函数</li>
<li>对于强连通图，从任一顶点出发都只需调用一次DFS&#x2F;BFS函数</li>
</ul>
</li>
</ul>
<h3 id="3、最小生成树构造过程及算法（MST）"><a href="#3、最小生成树构造过程及算法（MST）" class="headerlink" title="3、最小生成树构造过程及算法（MST）"></a>3、最小生成树构造过程及算法（MST）</h3><p>针对的是带权连通无向图</p>
<p>边的权值之和最小的生成树，就是最小生成树</p>
<p>普利姆算法（Prim）：</p>
<ul>
<li><p>时间复杂度为：O(|V|^2)  适合边稠密图</p>
</li>
<li><p>从某个顶点开始构建生成树，每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。</p>
</li>
</ul>
<p>克鲁斯卡尔算法（Kruskal）: </p>
<ul>
<li>时间复杂度为：O(|E|log2|E|)  适合边稀疏图</li>
<li>每次选择一条权值最小的边，使这两条边的两头连通（已经连通的不选），直到所有结点都连通</li>
</ul>
<h3 id="4、拓扑排序过程及算法"><a href="#4、拓扑排序过程及算法" class="headerlink" title="4、拓扑排序过程及算法"></a>4、拓扑排序过程及算法</h3><h4 id="4-1、AOV网："><a href="#4-1、AOV网：" class="headerlink" title="4.1、AOV网："></a>4.1、AOV网：</h4><ul>
<li>顶点代表活动，有向边&lt;Vi,Vj&gt;表示活动Vi必须先于Vj进行</li>
<li>AOV网一定是DAG图（有向无环图），不能有环。</li>
</ul>
<h4 id="4-2、拓扑排序"><a href="#4-2、拓扑排序" class="headerlink" title="4.2、拓扑排序"></a>4.2、拓扑排序</h4><ol>
<li>从AOV网中选择一个没有前驱（入度为0）的顶点并输出</li>
<li>从网中删除该顶点和所有以它为起点的有向边</li>
<li>重复 1 和 2 直到当前的AOV网为空</li>
</ol>
<h4 id="4-3、逆拓扑排序"><a href="#4-3、逆拓扑排序" class="headerlink" title="4.3、逆拓扑排序"></a>4.3、逆拓扑排序</h4><ol>
<li>从AOV网中选择一个没有后继（出度为0）的顶点并输出</li>
<li>从网中删除该顶点和所有以它为终点的有向边</li>
<li>重复 1 和 2 直到当前的AOV网为空</li>
</ol>
<p><strong>另一种实现方式：用DFS实现拓扑排序&#x2F;逆拓扑排序</strong></p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 访问标记数组 */</span><br><span class="hljs-type">bool</span> visited[MAX_VERTEX_NUM];<br><br><span class="hljs-comment">/* 对图G进行深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(Graph G)</span><span class="hljs-comment">//主要是处理连通图多的情况</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<br>	&#123;<br>		visited[i] = FALSE;<span class="hljs-comment">//访问标记数组初始化</span><br>	&#125;<br>	<br>	<span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<span class="hljs-comment">//从0号顶点开始遍历</span><br>	&#123;<br>		<span class="hljs-keyword">if</span> (!visited[v])<span class="hljs-comment">//对每个连通分量调用一次BFS</span><br>		&#123;<br>			<span class="hljs-built_in">DFS</span>(G, v);<span class="hljs-comment">//vi未访问过，从Vi开始BFS</span><br>		&#125;<br>	&#125;<br>&#125;<br><span class="hljs-comment">/* 深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//从顶点v出发，深度优先遍历图G</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">visit</span>(v); <span class="hljs-comment">//访问初始顶点v</span><br>	visited[v] = TRUE;<span class="hljs-comment">//对v做已访问标记</span><br>    <span class="hljs-comment">//检测v所有邻接点</span><br>    <span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstNeighbor</span>(G,v); w &gt;=<span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextNeighbor</span>(G, v, w))<br>    &#123;	<br>        <span class="hljs-keyword">if</span> (!visited[w])  <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>        &#123;<br>           <span class="hljs-built_in">DFS</span>(G,w);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//用在拓扑排序的主要改动</span><br>    cout &lt;&lt; v;<span class="hljs-comment">//输出顶点</span><br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="4-4、性质"><a href="#4-4、性质" class="headerlink" title="4.4、性质"></a>4.4、性质</h4><ul>
<li>拓扑排序、逆拓扑排序序列可能不唯一</li>
<li>若图中有环，则不存在拓扑排序序列&#x2F;逆拓扑排序序列</li>
</ul>
<h3 id="5、关键路径相关内容"><a href="#5、关键路径相关内容" class="headerlink" title="5、关键路径相关内容"></a>5、关键路径相关内容</h3><h4 id="5-1、AOV网"><a href="#5-1、AOV网" class="headerlink" title="5.1、AOV网"></a>5.1、AOV网</h4><p>在带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销</p>
<p>相关概念：</p>
<ul>
<li>在AOE网中仅有一个入度为0的顶点，称为开始顶点（源点），表示整个工程的开始；</li>
<li>也仅有一个出度为0的顶点，称为结束顶点（汇点），表示整个工程的结束</li>
<li>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为关键路径，而把关键路径上的活动称为关键活动</li>
</ul>
<h4 id="5-2、求解方法"><a href="#5-2、求解方法" class="headerlink" title="5.2、求解方法"></a>5.2、求解方法</h4><ol>
<li>求所有事件的最早发生时间ve( ) 正序取最大值 （指的是结点）</li>
<li>求所有事件的最迟发生时间vl( ) 倒序取最小值（指的是结点）</li>
<li>求所有活动的最早发生时间e( )   （指的是边）从前往后算发出边的的结点值</li>
<li>求所有活动的最迟发生时间 l( )（指的是边）从后往前算  结点值减路径值</li>
<li>求所有活动的时间余量 d ( )  &#x3D; （活动的最迟发生时间 - 活动的最早发生时间）<ol>
<li>d( i ) &#x3D; 0的活动就是关键活动，由关键活动可得关键路径</li>
</ol>
</li>
</ol>
<h4 id="5-3、特性"><a href="#5-3、特性" class="headerlink" title="5.3、特性"></a>5.3、特性</h4><ul>
<li>若关键活动耗时增加，则整个工期的工程将延长</li>
<li>缩短关键活动的时间，可以缩短整个工程的工期</li>
<li>当缩短到一定程度时，关键活动可能会变成非关键活动</li>
<li>可能有多条关键路径，只提高一条关键路径上的关键活动速度并不能缩短整个工程的工期，只有加快那些包括在所有关键路径上的关键活动才能达到缩短工期的目的</li>
</ul>
<h3 id="6、最短路径相关内容"><a href="#6、最短路径相关内容" class="headerlink" title="6、最短路径相关内容"></a>6、最短路径相关内容</h3><h4 id="6-1、单源最短路径"><a href="#6-1、单源最短路径" class="headerlink" title="6.1、单源最短路径"></a>6.1、单源最短路径</h4><h5 id="6-1-1、BFS算法（无权图）"><a href="#6-1-1、BFS算法（无权图）" class="headerlink" title="6.1.1、BFS算法（无权图）"></a>6.1.1、BFS算法（无权图）</h5><p>对BFS算法进行修改：在visit一个顶点时，修改其最短路径长度d[ ]并在path[ ]记录前驱结点</p>
<h5 id="6-1-2、Dijkstra算法（带权图、无权图）"><a href="#6-1-2、Dijkstra算法（带权图、无权图）" class="headerlink" title="6.1.2、Dijkstra算法（带权图、无权图）"></a>6.1.2、Dijkstra算法（带权图、无权图）</h5><p>就是上学路径问题，就是找到达学校路程最短的那条路</p>
<p>标记最短路径数组、最短路径长度数组、路径前驱数组</p>
<p>不适用于有负权值的带权图</p>
<h4 id="6-2、各顶点间的最短路径"><a href="#6-2、各顶点间的最短路径" class="headerlink" title="6.2、各顶点间的最短路径"></a>6.2、各顶点间的最短路径</h4><p><strong>Floyd算法（带权图、无权图）</strong></p>
<p>可以解决带负权值的图</p>
<p>添加中转点</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//.....准备工作，初始化矩阵A和path</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<span class="hljs-comment">//考虑以Vk作为中转点</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-comment">//遍历整个矩阵，i为行号，j为列号</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A[i][j]&gt;A[i][k]+A[k][j]) <span class="hljs-comment">//如果以Vk为中转点的路径更短</span><br>            &#123;<br>                A[i][j] = A[i][k] + A[k][j];<span class="hljs-comment">//更新最短路径长度</span><br>                path[i][j] = k;<span class="hljs-comment">//中转点</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<p>注：以上算法均不能解决带负权回路的图</p>
<h3 id="7、与图的应用相关的递归算法"><a href="#7、与图的应用相关的递归算法" class="headerlink" title="7、与图的应用相关的递归算法"></a>7、与图的应用相关的递归算法</h3><p>有向无环图：一个有向图中不存在环。简称DAG图</p>
<p>用来描述表达式：算数表达式用树的形式展示，合并相同层次的操作数和操作符</p>
<html>
<div class="box1">
    <span class="leftline"></span>
    <span class="text">更多内容请在评论区留言讨论</span>
    <span class="rightline"></span>
</div>
</html>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序之堆排序（Heap Sort）</title>
    <url>/2023/09/29/HeapSort/</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结了堆排序相关知识，其中包括堆排序的概念、算法思想、特点和完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ul>
<li>顺序存储地 “ 完全二叉树 ”<ul>
<li>结点 <code>i</code> 地左孩子是<code>2i</code>；右孩子是<code>2i+1</code>；父结点是<code>i/2</code></li>
</ul>
</li>
<li>大根堆（根&gt;&#x3D;左、右）；小根堆（根&lt;&#x3D;左、右）；</li>
</ul>
<h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><ul>
<li>建堆<ul>
<li>编号&lt;&#x3D; n&#x2F;2 的所有结点依次 “ 下坠 ”调整（自底向上处理各分支结点）</li>
<li>调整规则：小元素逐层 “ 下坠 ”（与关键字更大的孩子交换）</li>
</ul>
</li>
<li>排序<ul>
<li>将堆顶元素加入有序子序列（堆顶元素与堆底元素交换）</li>
<li>堆底元素换到堆顶后，需要进行“ 下坠 ”调整，恢复“ 大根堆 ”的特性</li>
<li>上述过程重复 n~1 趟</li>
</ul>
</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>空间复杂度：O(1)</li>
<li>时间复杂度：建堆O(n)、排序O(nlogn)；总的时间复杂度&#x3D; O(nlogn)</li>
<li>稳定性：不稳定</li>
<li>基于大根堆的堆排序得到 “ 递增序列 ”，基于小根堆的堆排序得到 “ 递减序列 ”</li>
</ul>
<h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><blockquote>
<p>大根堆：按升序排列</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 堆排序 */</span><br><br><span class="hljs-comment">//将以k为根的子树调整为大根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeadAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	A[<span class="hljs-number">0</span>] = A[k];  <span class="hljs-comment">//A[0]暂存子树的根结点</span><br>	<span class="hljs-comment">//沿key较大的子结点向下筛选</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>*k; i &lt;= len; i*=<span class="hljs-number">2</span>)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (i&lt;len&amp;&amp;A[i]&lt;A[i+<span class="hljs-number">1</span>]) <br>		&#123;<br>			i++; <span class="hljs-comment">//取key较大的子结点的下标</span><br>		&#125;<br>		<span class="hljs-keyword">if</span> (A[<span class="hljs-number">0</span>]&gt;=A[i])<br>		&#123;<br>			<span class="hljs-keyword">break</span>;<span class="hljs-comment">//筛选结束</span><br>		&#125;<br>		<span class="hljs-keyword">else</span> <br>		&#123;<br>			A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>			k = i;  <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>		&#125;<br>	&#125;<br>	A[k] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br><br><span class="hljs-comment">//建立大根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildMaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//从后往前调整所有非终端结点</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>	&#123;<br>		<span class="hljs-built_in">HeadAdjust</span>(A, i, len);<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//堆排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">BuildMaxHeap</span>(A,len);  <span class="hljs-comment">//初始建堆</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &gt; <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//n-1 趟的交换和建堆过程</span><br>	&#123;<br>		<span class="hljs-built_in">swap</span>(A[i], A[<span class="hljs-number">1</span>]);   <span class="hljs-comment">//堆顶元素和堆底元素交换</span><br>		<span class="hljs-built_in">HeadAdjust</span>(A, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>); <span class="hljs-comment">//把剩余的待排序元素整理成堆</span><br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//有哨兵的数组</span><br>	<span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>	<span class="hljs-built_in">HeapSort</span>(A, <span class="hljs-number">8</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;堆排序后：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>	&#123;<br>		cout &lt;&lt; A[i];<br>		<span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>		&#123;<br>			cout &lt;&lt;endl;;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>小根堆：按降序排列</p>
</blockquote>
<p>修改部分：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将以k为根的子树调整为小根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MinHeadAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	A[<span class="hljs-number">0</span>] = A[k];  <span class="hljs-comment">//A[0]暂存子树的根结点</span><br>	<span class="hljs-comment">//沿key较大的子结点向下筛选</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * k; i &lt;= len; i *= <span class="hljs-number">2</span>)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (i &lt; len &amp;&amp; A[i] &gt; A[i + <span class="hljs-number">1</span>]) <span class="hljs-comment">//大根堆改小根堆第一步把小于号改为大于</span><br>		&#123;<br>			i++; <span class="hljs-comment">//取key较小的子结点的下标</span><br>		&#125;<br>		<span class="hljs-keyword">if</span> (A[<span class="hljs-number">0</span>] &lt;= A[i]) <span class="hljs-comment">////大根堆改小根堆第二步把大于等于号改为小于等于</span><br>		&#123;<br>			<span class="hljs-keyword">break</span>;<span class="hljs-comment">//筛选结束</span><br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>			k = i;  <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>		&#125;<br>	&#125;<br>	A[k] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>完整实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 堆排序 */</span><br><br><span class="hljs-comment">//将以k为根的子树调整为小根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MinHeadAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	A[<span class="hljs-number">0</span>] = A[k];  <span class="hljs-comment">//A[0]暂存子树的根结点</span><br>	<span class="hljs-comment">//沿key较大的子结点向下筛选</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * k; i &lt;= len; i *= <span class="hljs-number">2</span>)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (i &lt; len &amp;&amp; A[i] &gt; A[i + <span class="hljs-number">1</span>]) <span class="hljs-comment">//大根堆改小根堆第一步把小于号改为大于</span><br>		&#123;<br>			i++; <span class="hljs-comment">//取key较小的子结点的下标</span><br>		&#125;<br>		<span class="hljs-keyword">if</span> (A[<span class="hljs-number">0</span>] &lt;= A[i]) <span class="hljs-comment">////大根堆改小根堆第二步把大于等于号改为小于等于</span><br>		&#123;<br>			<span class="hljs-keyword">break</span>;<span class="hljs-comment">//筛选结束</span><br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>			k = i;  <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>		&#125;<br>	&#125;<br>	A[k] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br><br><span class="hljs-comment">//建立小根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildMinHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//从后往前调整所有非终端结点</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>	&#123;<br>		<span class="hljs-built_in">MinHeadAdjust</span>(A, i, len);<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//堆排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">BuildMinHeap</span>(A,len);  <span class="hljs-comment">//初始建堆</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &gt; <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//n-1 趟的交换和建堆过程</span><br>	&#123;<br>		<span class="hljs-built_in">swap</span>(A[i], A[<span class="hljs-number">1</span>]);   <span class="hljs-comment">//堆顶元素和堆底元素交换</span><br>		<span class="hljs-built_in">MinHeadAdjust</span>(A, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>); <span class="hljs-comment">//把剩余的待排序元素整理成堆</span><br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//有哨兵的数组</span><br>	<span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>	<span class="hljs-built_in">HeapSort</span>(A, <span class="hljs-number">8</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;堆排序后：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>	&#123;<br>		cout &lt;&lt; A[i];<br>		<span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>		&#123;<br>			cout &lt;&lt;endl;;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-自定义404文件</title>
    <url>/2022/11/27/Hexo-404/</url>
    <content><![CDATA[<blockquote>
<p>Hexo-自定义404文件</p>
</blockquote>
<span id="more"></span>
<html>
<div class="box1">
         <span class="leftline"></span>
         <span class="text">正文部分</span>
         <span class="rightline"></span>
     </div>
</html>

<p>自定义404文件非常简单，你需要去source文件夹下，创建一个404文件夹，然后创建index.md<br>然后写入文件头信息：</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">---<br>title: &#x27;404&#x27;<br>layout: false<br>permalink: /404.html<br>---<br>上面是文档标题，不使用主题布局，permalink: 是404页面必须的<br><br>这里把你写的404HTML代码复制过来就好了，注意不要外链引入相对地址的css，<br>不然容易在其他页面找不到引入的相关文件。<br>代码标签别有大换行，不然下面会被md识别成代码块，从而导致网页不完整。<br></code></pre></td></tr></table></figure>

<html>
<div class="box1">
    <span class="leftline"></span>
    <span class="text">更多内容请在评论区留言讨论</span>
    <span class="rightline"></span>
</div>
</html>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next主题配置文件</title>
    <url>/2022/11/22/Hexo-Next/</url>
    <content><![CDATA[<blockquote>
<p>Hexo-Next主题配置文件注释翻译</p>
</blockquote>
<span id="more"></span>
<html>
<div class="box1">
         <span class="leftline"></span>
         <span class="text">正文部分</span>
         <span class="rightline"></span>
     </div>
</html>

<p>Hexo-Next主题配置文件主要注释翻译：</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ===============================================================</span><br><span class="hljs-comment"># 建议使用Alternate Theme Config来配置NexT</span><br><span class="hljs-comment"># 修改此文件可能导致合并冲突</span><br><span class="hljs-comment"># 参见网址: https://theme-next.js.org/docs/getting-started/configuration</span><br><span class="hljs-comment"># ===============================================================</span><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 主题核心配置设置</span><br><span class="hljs-comment"># 参见网址: https://theme-next.js.org/docs/theme-settings/</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 允许缓存内容生成。</span><br><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在hexo生成后删除不必要的文件。</span><br><span class="hljs-attr">minify:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 定义自定义文件路径。</span><br><span class="hljs-comment"># 在站点目录“source/_data”中创建您的自定义文件，并在下面取消所需文件的注释。</span><br><span class="hljs-attr">custom_file_path:</span><br>  <span class="hljs-comment">#head: source/_data/head.njk</span><br>  <span class="hljs-comment">#header: source/_data/header.njk</span><br>  <span class="hljs-comment">#sidebar: source/_data/sidebar.njk</span><br>  <span class="hljs-comment">#postMeta: source/_data/post-meta.njk</span><br>  <span class="hljs-comment">#postBodyEnd: source/_data/post-body-end.njk</span><br>  <span class="hljs-comment">#footer: source/_data/footer.njk</span><br>  <span class="hljs-comment">#bodyEnd: source/_data/body-end.njk</span><br>  <span class="hljs-comment">#variable: source/_data/variables.styl</span><br>  <span class="hljs-comment">#mixin: source/_data/mixins.styl</span><br>  <span class="hljs-comment">#style: source/_data/styles.styl</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 方案设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 方案</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Muse</span><br><span class="hljs-comment">#scheme: Mist</span><br><span class="hljs-comment">#scheme: Pisces</span><br><span class="hljs-comment">#scheme: Gemini</span><br><br><span class="hljs-comment"># 夜间模式</span><br><span class="hljs-attr">darkmode:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 网站信息设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">favicon:</span><br>  <span class="hljs-attr">small:</span> <span class="hljs-string">/images/favicon-16x16-next.png</span><br>  <span class="hljs-attr">medium:</span> <span class="hljs-string">/images/favicon-32x32-next.png</span><br>  <span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/images/apple-touch-icon-next.png</span><br>  <span class="hljs-attr">safari_pinned_tab:</span> <span class="hljs-string">/images/logo.svg</span><br>  <span class="hljs-comment">#android_manifest: /manifest.json</span><br><br><span class="hljs-comment"># 自定义标志(警告:不支持Mist方案)</span><br><span class="hljs-attr">custom_logo:</span> <span class="hljs-comment">#/uploads/custom-logo.jpg</span><br><br><span class="hljs-comment"># 知识共享4.0国际许可。</span><br><span class="hljs-comment"># See: https://creativecommons.org/about/cclicenses/</span><br><span class="hljs-attr">creative_commons:</span><br>  <span class="hljs-comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span><br>  <span class="hljs-attr">license:</span> <span class="hljs-string">by-nc-sa</span><br>  <span class="hljs-comment"># Available values: big | small</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-string">small</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">post:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果您喜欢CC许可的翻译版本，您可以设置语言值，例如. deed.zh</span><br>  <span class="hljs-comment"># CC许可有39种语言，您可以在https://creativecommons.org上找到您需要的具体和正确的缩写</span><br>  <span class="hljs-attr">language:</span><br><br><span class="hljs-comment"># 打开图形设置</span><br><span class="hljs-comment"># See: https://hexo.io/docs/helpers#open-graph</span><br><span class="hljs-attr">open_graph:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-comment">#twitter_card: &lt;twitter:card&gt;</span><br>    <span class="hljs-comment">#twitter_id: &lt;twitter:creator&gt;</span><br>    <span class="hljs-comment">#twitter_site: &lt;twitter:site&gt;</span><br>    <span class="hljs-comment">#twitter_image: &lt;twitter:image&gt;</span><br>    <span class="hljs-comment">#google_plus: &lt;g+:profile_link&gt;</span><br>    <span class="hljs-comment">#fb_admins: &lt;fb:admin_id&gt;</span><br>    <span class="hljs-comment">#fb_app_id: &lt;fb:app_id&gt;</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 菜单设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Usage: `Key: /link/ || icon`</span><br><span class="hljs-comment"># Key是菜单项的名称。如果此项的翻译可用，则将加载翻译后的文本，否则将使用Key名称。Key区分大小写。</span><br><span class="hljs-comment"># &#x27; || &#x27;分隔符前的值是目标链接，&#x27; || &#x27;分隔符后的值是字体Awesome图标的名称。</span><br><span class="hljs-comment"># 外部url应该以http://或https://开头</span><br><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-user</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">/schedule/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-calendar</span><br>  <span class="hljs-attr">sitemap:</span> <span class="hljs-string">/sitemap.xml</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-sitemap</span><br>  <span class="hljs-attr">commonweal:</span> <span class="hljs-string">/404/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-heartbeat</span><br><br><span class="hljs-comment"># 启用/禁用菜单图标/项目徽章。</span><br><span class="hljs-attr">menu_settings:</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">badges:</span> <span class="hljs-literal">false</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 侧栏设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/sidebar</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">sidebar:</span><br>  <span class="hljs-comment"># 侧边栏的位置。</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>  <span class="hljs-comment">#position: right</span><br><br>  <span class="hljs-comment"># 手动定义侧边栏宽度。如果注释，将是默认的:</span><br>  <span class="hljs-comment"># Muse | Mist: 320</span><br>  <span class="hljs-comment"># Pisces | Gemini: 240</span><br>  <span class="hljs-comment">#width: 300</span><br><br>  <span class="hljs-comment"># 侧边栏显示(仅适用于Muse | Mist)，可用值:</span><br>  <span class="hljs-comment">#  - post    expand on posts automatically. Default.</span><br>  <span class="hljs-comment">#  - always  expand for all pages automatically.</span><br>  <span class="hljs-comment">#  - hide    expand only when click on the sidebar toggle icon.</span><br>  <span class="hljs-comment">#  - remove  totally remove sidebar including sidebar toggle.</span><br>  <span class="hljs-attr">display:</span> <span class="hljs-string">post</span><br><br>  <span class="hljs-comment"># 侧边栏内边距(以像素为单位)。</span><br>  <span class="hljs-attr">padding:</span> <span class="hljs-number">18</span><br>  <span class="hljs-comment"># 从顶部菜单栏的侧边栏偏移(以像素计)(只针对 Pisces | Gemini).</span><br>  <span class="hljs-attr">offset:</span> <span class="hljs-number">12</span><br><br><span class="hljs-comment"># 侧边栏头像</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-comment"># 替换默认图像并在这里设置url。</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-comment">#/images/avatar.gif</span><br>  <span class="hljs-comment"># 如果为true，头像将以圆圈的形式显示。</span><br>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果为true，头像将随着光标旋转。</span><br>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 侧边栏中的文章/类别/标签。</span><br><span class="hljs-attr">site_state:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 社交网站</span><br><span class="hljs-comment"># Usage: `Key: permalink || icon`</span><br><span class="hljs-comment"># Key是显示给终端用户的链接标签。</span><br><span class="hljs-comment"># &#x27; || &#x27;分隔符前的值是目标永久链接，&#x27; || &#x27;分隔符后的值是字体Awesome图标的名称。</span><br><span class="hljs-attr">social:</span><br>  <span class="hljs-comment">#GitHub: https://github.com/yourname || fab fa-github</span><br>  <span class="hljs-comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br>  <span class="hljs-comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span><br>  <span class="hljs-comment">#Google: https://plus.google.com/yourname || fab fa-google</span><br>  <span class="hljs-comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span><br>  <span class="hljs-comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br>  <span class="hljs-comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br>  <span class="hljs-comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span><br>  <span class="hljs-comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span><br>  <span class="hljs-comment">#Skype: skype:yourname?call|chat || fab fa-skype</span><br><br><span class="hljs-attr">social_icons:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">icons_only:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">transition:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 博客滚动</span><br><span class="hljs-attr">links_settings:</span><br>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-globe</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Links</span><br>  <span class="hljs-comment"># 可用值: block | inline</span><br>  <span class="hljs-attr">layout:</span> <span class="hljs-string">block</span><br><br><span class="hljs-attr">links:</span><br>  <span class="hljs-comment">#Title: https://example.com</span><br><br><span class="hljs-comment"># 侧边栏中的目录</span><br><span class="hljs-comment"># Front-matter variable (nonsupport wrap expand_all).</span><br><span class="hljs-attr">toc:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 自动添加列表数量到文章目录中。</span><br>  <span class="hljs-attr">number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 如果为true，如果标题宽度大于侧边栏宽度，则所有单词将放在下一行。</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果为true，将显示帖子中所有级别的文章目录，而不是激活的部分</span><br>  <span class="hljs-attr">expand_all:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 文章目录生成的最大深度。</span><br>  <span class="hljs-attr">max_depth:</span> <span class="hljs-number">6</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 页脚设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/footer</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 在页脚中显示多语言切换器。</span><br><span class="hljs-attr">language_switcher:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 指定网站设置的年份。如果没有定义，则使用当前年份。</span><br>  <span class="hljs-comment"># since: 2021</span><br><br>  <span class="hljs-comment"># 年份和版权信息之间的图标。</span><br>  <span class="hljs-attr">icon:</span><br>    <span class="hljs-comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-heart</span><br>    <span class="hljs-comment"># 如果你想要图标动起来，将它设置为true。</span><br>    <span class="hljs-attr">animated:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 改变图标的颜色，使用十六进制代码。</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#ff0000&quot;</span><br><br>  <span class="hljs-comment"># 如果没有定义， 将使用Hexo的配置文件`_config.yml`中的`author`</span><br>  <span class="hljs-attr">copyright:</span><br><br>  <span class="hljs-comment"># 由 Hexo &amp; NexT 强力驱动</span><br>  <span class="hljs-attr">powered:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 面向中国用户的公安ICP备案信息. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">icp:</span><br>    <span class="hljs-comment"># 公安ICP备案数字</span><br>    <span class="hljs-attr">gongan_id:</span><br>    <span class="hljs-comment"># 公安ICP备案全数字</span><br>    <span class="hljs-attr">gongan_num:</span><br>    <span class="hljs-comment"># 备案信息图标. See: http://www.beian.gov.cn/portal/download</span><br>    <span class="hljs-attr">gongan_icon_url:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 文章设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/posts</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 自动撷取正文中的描述作为摘要文本。</span><br><span class="hljs-attr">excerpt_description:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 阅读更多按钮</span><br><span class="hljs-comment"># 如果为true，则在摘录部分将显示“阅读更多”按钮。</span><br><span class="hljs-attr">read_more_btn:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 文章显示设置</span><br><span class="hljs-attr">post_meta:</span><br>  <span class="hljs-attr">item_text:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">created_at:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">updated_at:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">another_day:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 文章字数统计设置</span><br><span class="hljs-comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 使用图标代替符号#来表示文章底部的标签</span><br><span class="hljs-attr">tag_icon:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 捐赠(赞助)设置</span><br><span class="hljs-comment"># Front-matter variable (nonsupport animation).</span><br><span class="hljs-attr">reward_settings:</span><br>  <span class="hljs-comment"># 如果为true，默认情况下每篇文章都会显示一个捐赠按钮。</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">animation:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment">#comment: Buy me a coffee</span><br><br><span class="hljs-attr">reward:</span><br>  <span class="hljs-comment">#wechatpay: /images/wechatpay.png</span><br>  <span class="hljs-comment">#alipay: /images/alipay.png</span><br>  <span class="hljs-comment">#paypal: /images/paypal.png</span><br>  <span class="hljs-comment">#bitcoin: /images/bitcoin.png</span><br><br><span class="hljs-comment"># 通过Telegram Channel、Twitter等订阅。</span><br><span class="hljs-comment"># Usage: `Key: permalink || icon` (Font Awesome)</span><br><span class="hljs-attr">follow_me:</span><br>  <span class="hljs-comment">#Twitter: https://twitter.com/username || fab fa-twitter</span><br>  <span class="hljs-comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span><br>  <span class="hljs-comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span><br>  <span class="hljs-comment">#RSS: /atom.xml || fa fa-rss</span><br><br><span class="hljs-comment"># 相关热门帖子</span><br><span class="hljs-comment"># Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts</span><br><span class="hljs-attr">related_posts:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-comment"># 自定义标题，留空以使用默认标题</span><br>  <span class="hljs-attr">display_in_home:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 文章编辑</span><br><span class="hljs-comment"># 轻松地在线浏览和编辑博客源代码。</span><br><span class="hljs-attr">post_edit:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name/</span> <span class="hljs-comment"># Link for view source</span><br>  <span class="hljs-comment">#url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/ # Link for fork &amp; edit</span><br><br><span class="hljs-comment"># 如果存在，在文章页脚中显示上一篇文章和下一篇文章</span><br><span class="hljs-comment"># Available values: left | right | false</span><br><span class="hljs-attr">post_navigation:</span> <span class="hljs-string">left</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 自定义页面设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/custom-pages</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 标签页的标签云设置。</span><br><span class="hljs-attr">tagcloud:</span><br>  <span class="hljs-attr">min:</span> <span class="hljs-number">12</span> <span class="hljs-comment"># Minimum font size in px</span><br>  <span class="hljs-attr">max:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># Maximum font size in px</span><br>  <span class="hljs-attr">amount:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># Total amount of tags</span><br>  <span class="hljs-attr">orderby:</span> <span class="hljs-string">name</span> <span class="hljs-comment"># Order of tags</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># Sort order</span><br><br><span class="hljs-comment"># 谷歌日历</span><br><span class="hljs-comment"># 通过日历页面向他人分享您最近的日程安排。</span><br><span class="hljs-attr">calendar:</span><br>  <span class="hljs-attr">calendar_id:</span> <span class="hljs-string">&lt;required&gt;</span> <span class="hljs-comment"># Your Google account E-Mail</span><br>  <span class="hljs-attr">api_key:</span> <span class="hljs-string">&lt;required&gt;</span><br>  <span class="hljs-attr">orderBy:</span> <span class="hljs-string">startTime</span><br>  <span class="hljs-attr">showLocation:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">offsetMax:</span> <span class="hljs-number">72</span> <span class="hljs-comment"># Time Range</span><br>  <span class="hljs-attr">offsetMin:</span> <span class="hljs-number">4</span> <span class="hljs-comment"># Time Range</span><br>  <span class="hljs-attr">showDeleted:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">singleEvents:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">maxResults:</span> <span class="hljs-number">250</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 杂项主题设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/miscellaneous</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 预连接字体和插件的CDN。</span><br><span class="hljs-comment"># For more information: https://www.w3.org/TR/resource-hints/#preconnect</span><br><span class="hljs-attr">preconnect:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 设置文章/页面中的文本对齐方式。</span><br><span class="hljs-attr">text_align:</span><br>  <span class="hljs-comment"># Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br>  <span class="hljs-attr">desktop:</span> <span class="hljs-string">justify</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-string">justify</span><br><br><span class="hljs-comment"># 在宽度较窄的设备上减少填充/边距缩进。</span><br><span class="hljs-attr">mobile_layout_economy:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 浏览器标题面板颜色。</span><br><span class="hljs-attr">theme_color:</span><br>  <span class="hljs-attr">light:</span> <span class="hljs-string">&quot;#222&quot;</span><br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&quot;#222&quot;</span><br><br><span class="hljs-comment"># 覆盖浏览器的默认行为。</span><br><span class="hljs-attr">body_scrollbar:</span><br>  <span class="hljs-comment"># 将滚动条放置在内容上。</span><br>  <span class="hljs-attr">overlay:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 即使内容没有溢出，也要显示滚动条。</span><br>  <span class="hljs-attr">stable:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-comment"># Highlight代码主题</span><br>  <span class="hljs-comment"># All available themes: https://theme-next.js.org/highlight/</span><br>  <span class="hljs-attr">theme:</span><br>    <span class="hljs-attr">light:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">dark:</span> <span class="hljs-string">stackoverflow-dark</span><br>  <span class="hljs-attr">prism:</span><br>    <span class="hljs-attr">light:</span> <span class="hljs-string">prism</span><br>    <span class="hljs-attr">dark:</span> <span class="hljs-string">prism-dark</span><br>  <span class="hljs-comment"># 在代码块上添加复制按钮</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Available values: default | flat | mac</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">mac</span><br><br><span class="hljs-attr">back2top:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 侧边栏的回到顶部。</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 回到顶部的按钮上显示百分比</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 阅读进度条</span><br><span class="hljs-attr">reading_progress:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Available values: left | right</span><br>  <span class="hljs-attr">start_at:</span> <span class="hljs-string">left</span><br>  <span class="hljs-comment"># Available values: top | bottom</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">reversed:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#37c6c0&quot;</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-string">3px</span><br><br><span class="hljs-comment"># 书签支持</span><br><span class="hljs-attr">bookmark:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 自定义书签的颜色。</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#222&quot;</span><br>  <span class="hljs-comment"># 如果为自动，则在关闭页面或单击书签图标时保存阅读进度。</span><br>  <span class="hljs-comment"># 如果是手动的，只能通过点击书签图标来保存。</span><br>  <span class="hljs-attr">save:</span> <span class="hljs-string">auto</span><br><br><span class="hljs-comment"># “在GitHub上关注我”的横幅。</span><br><span class="hljs-attr">github_banner:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">permalink:</span> <span class="hljs-string">https://github.com/yourname</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Follow</span> <span class="hljs-string">me</span> <span class="hljs-string">on</span> <span class="hljs-string">GitHub</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 字体设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 在谷歌字体上查找字体 (https://fonts.google.com)</span><br><span class="hljs-comment"># 这里设置的所有字体都将具有以下样式:</span><br><span class="hljs-comment">#   light | light italic | normal | normal italic | bold | bold italic</span><br><span class="hljs-comment"># 注意设置过多的字体会导致网站运行缓慢</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># Web安全字体推荐用于&#x27; global &#x27;(和&#x27; title &#x27;):</span><br><span class="hljs-comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 字体主机的Uri, e.g. https://fonts.googleapis.com (Default).</span><br>  <span class="hljs-attr">host:</span><br><br>  <span class="hljs-comment"># 字体选项:</span><br>  <span class="hljs-comment"># `external: true` 将从上面的&#x27; host &#x27;加载这个字体族。</span><br>  <span class="hljs-comment"># `family: Times New Roman`. 没有任何引号</span><br>  <span class="hljs-comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><br>  <span class="hljs-comment"># 用于&lt;body&gt;内所有元素的全局字体设置。</span><br>  <span class="hljs-attr">global:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span> <span class="hljs-string">Lato</span><br>    <span class="hljs-attr">size:</span><br><br>  <span class="hljs-comment"># 网站标题的字体设置(.site-title)。</span><br>  <span class="hljs-attr">title:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br>    <span class="hljs-attr">size:</span><br><br>  <span class="hljs-comment"># 标题的字体设置 (&lt;h1&gt; to &lt;h6&gt;).</span><br>  <span class="hljs-attr">headings:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br>    <span class="hljs-attr">size:</span><br><br>  <span class="hljs-comment"># 文章的字体设置 (.post-body).</span><br>  <span class="hljs-attr">posts:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br><br>  <span class="hljs-comment"># &lt;code&gt;和代码块的字体设置&lt;/code&gt;</span><br>  <span class="hljs-attr">codes:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># SEO Settings</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/seo</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 如果为true，站点-subtitle将被添加到索引页面。</span><br><span class="hljs-comment"># 记得设置你的网站-副标题 in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span><br><span class="hljs-attr">index_with_subtitle:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 自动添加外部URL与Base64加密和解密。</span><br><span class="hljs-attr">exturl:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 如果为true，则每个外部URL将附加一个图标</span><br><span class="hljs-attr">exturl_icon:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Google Webmaster tools verification.</span><br><span class="hljs-comment"># See: https://developers.google.com/search</span><br><span class="hljs-attr">google_site_verification:</span><br><br><span class="hljs-comment"># 必应网站管理员工具验证。</span><br><span class="hljs-comment"># See: https://www.bing.com/webmasters</span><br><span class="hljs-attr">bing_site_verification:</span><br><br><span class="hljs-comment"># Yandex Webmaster tools verification.</span><br><span class="hljs-comment"># See: https://webmaster.yandex.ru</span><br><span class="hljs-attr">yandex_site_verification:</span><br><br><span class="hljs-comment"># Baidu Webmaster tools verification.</span><br><span class="hljs-comment"># See: https://ziyuan.baidu.com/site</span><br><span class="hljs-attr">baidu_site_verification:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 第三方插件 &amp; 服务设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/</span><br><span class="hljs-comment"># More plugins: https://github.com/next-theme/awesome-next</span><br><span class="hljs-comment"># 您可能需要安装相应的依赖包</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 数学公式渲染支持</span><br><span class="hljs-comment"># 警告:请根据文档安装/卸载相关渲染器。</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span><br><span class="hljs-comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span><br><span class="hljs-attr">math:</span><br>  <span class="hljs-comment"># Default (false) will load mathjax / katex script on demand.</span><br>  <span class="hljs-comment"># That is it only render those page which has `mathjax: true` in front-matter.</span><br>  <span class="hljs-comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br>  <span class="hljs-attr">every_page:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-attr">mathjax:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Available values: none | ams | all</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-string">none</span><br><br>  <span class="hljs-attr">katex:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br>    <span class="hljs-attr">copy_tex:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在您的网站上轻松启用快速Ajax导航。</span><br><span class="hljs-comment"># For more information: https://github.com/next-theme/pjax</span><br><span class="hljs-attr">pjax:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># fantybox是一个工具，它提供了一种漂亮而优雅的方式为图像添加缩放功能。</span><br><span class="hljs-comment"># For more information: https://fancyapps.com/fancybox/</span><br><span class="hljs-attr">fancybox:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># A JavaScript library for zooming images like Medium.</span><br><span class="hljs-comment"># Warning: Do not enable both `fancybox` and `mediumzoom`.</span><br><span class="hljs-comment"># For more information: https://medium-zoom.francoischalifour.com</span><br><span class="hljs-attr">mediumzoom:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 惰性加载图片的香草JavaScript插件。</span><br><span class="hljs-comment"># For more information: https://apoorv.pro/lozad.js/demo/</span><br><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Pangu Support</span><br><span class="hljs-comment"># For more information: https://github.com/vinta/pangu.js</span><br><span class="hljs-comment"># Server-side plugin: https://github.com/next-theme/hexo-pangu</span><br><span class="hljs-attr">pangu:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Quicklink Support</span><br><span class="hljs-comment"># For more information: https://getquick.link</span><br><span class="hljs-comment"># Front-matter variable (nonsupport home archive).</span><br><span class="hljs-attr">quicklink:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 主页和存档页面可以通过下面的主页和存档选项进行控制。</span><br>  <span class="hljs-comment"># 此配置项独立于“enable”。</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">archive:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Default (true)将在加载事件触发后初始化quicklink。</span><br>  <span class="hljs-attr">delay:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 自定义浏览器必须执行预取的时间(以毫秒为单位)。</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">3000</span><br>  <span class="hljs-comment"># Default (true)将尝试使用fetch() API，如果支持(而不是link[rel=prefetch])。</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 评论设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/comments</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 多评论系统支持</span><br><span class="hljs-attr">comments:</span><br>  <span class="hljs-comment"># Available values: tabs | buttons</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">tabs</span><br>  <span class="hljs-comment"># 选择一个默认显示的评论系统。</span><br>  <span class="hljs-comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span><br>  <span class="hljs-attr">active:</span><br>  <span class="hljs-comment"># 设置&#x27; true &#x27;意味着记住访问者选择的评论系统。</span><br>  <span class="hljs-attr">storage:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 惰性加载所有评论系统。</span><br>  <span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Modify texts or order for any naves, here are some examples.</span><br>  <span class="hljs-attr">nav:</span><br>    <span class="hljs-comment">#disqus:</span><br>    <span class="hljs-comment">#  text: Load Disqus</span><br>    <span class="hljs-comment">#  order: -1</span><br>    <span class="hljs-comment">#gitalk:</span><br>    <span class="hljs-comment">#  order: -2</span><br><br><span class="hljs-comment"># Disqus</span><br><span class="hljs-comment"># For more information: https://disqus.com</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">shortname:</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># DisqusJS</span><br><span class="hljs-comment"># For more information: https://disqusjs.skk.moe</span><br><span class="hljs-attr">disqusjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># API Endpoint of Disqus API (https://disqus.com/api/docs/).</span><br>  <span class="hljs-comment"># 如果能够连接到Disqus api，请将api保留为空。否则需要反向代理。</span><br>  <span class="hljs-comment"># For example:</span><br>  <span class="hljs-comment"># api: https://disqus.skk.moe/disqus/</span><br>  <span class="hljs-attr">api:</span><br>  <span class="hljs-attr">apikey:</span> <span class="hljs-comment"># Register new application from https://disqus.com/api/applications/</span><br>  <span class="hljs-attr">shortname:</span> <span class="hljs-comment"># See: https://disqus.com/admin/settings/general/</span><br><br><span class="hljs-comment"># Changyan</span><br><span class="hljs-comment"># For more information: https://changyan.kuaizhan.com</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">appid:</span><br>  <span class="hljs-attr">appkey:</span><br><br><span class="hljs-comment"># LiveRe comments system</span><br><span class="hljs-comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="hljs-attr">livere_uid:</span> <span class="hljs-comment"># &lt;your_uid&gt;</span><br><br><span class="hljs-comment"># Gitalk</span><br><span class="hljs-comment"># For more information: https://gitalk.github.io</span><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">github_id:</span> <span class="hljs-comment"># GitHub repo owner</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-comment"># Repository name to store issues</span><br>  <span class="hljs-attr">client_id:</span> <span class="hljs-comment"># GitHub Application Client ID</span><br>  <span class="hljs-attr">client_secret:</span> <span class="hljs-comment"># GitHub Application Client Secret</span><br>  <span class="hljs-attr">admin_user:</span> <span class="hljs-comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br>  <span class="hljs-attr">distraction_free_mode:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Facebook-like distraction free mode</span><br>  <span class="hljs-comment"># When the official proxy is not available, you can change it to your own proxy address</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span> <span class="hljs-comment"># This is official proxy address</span><br>  <span class="hljs-comment"># Gitalk的显示语言取决于用户的浏览器或系统环境</span><br>  <span class="hljs-comment"># 如果希望每个访问站点的人都看到统一的语言，可以设置强制语言值</span><br>  <span class="hljs-comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br>  <span class="hljs-attr">language:</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># For more information: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">user-name/repo-name</span> <span class="hljs-comment"># Github repository owner and name</span><br>  <span class="hljs-comment"># Available values: pathname | url | title | og:title</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br><br><span class="hljs-comment"># Isso</span><br><span class="hljs-comment"># For more information: https://posativ.org/isso/</span><br><span class="hljs-attr">isso:</span> <span class="hljs-comment"># &lt;data_isso&gt;</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 文章工具 &amp; 内容分享服务</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/post-widgets</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 每篇文章的星级支持。</span><br><span class="hljs-comment"># To get your ID visit https://widgetpack.com</span><br><span class="hljs-attr">rating:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">id:</span>     <span class="hljs-comment"># &lt;app_id&gt;</span><br>  <span class="hljs-attr">color:</span>  <span class="hljs-string">&quot;#fc6423&quot;</span><br><br><span class="hljs-comment"># AddThis Share. See: https://www.addthis.com</span><br><span class="hljs-comment"># Go to https://www.addthis.com/dashboard to customize your tools.</span><br><span class="hljs-attr">add_this_id:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 统计与分析</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/statistics-and-analytics</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Google Analytics</span><br><span class="hljs-comment"># See: https://analytics.google.com</span><br><span class="hljs-attr">google_analytics:</span><br>  <span class="hljs-attr">tracking_id:</span> <span class="hljs-comment"># &lt;app_id&gt;</span><br>  <span class="hljs-comment"># 默认情况下，NexT会在你的站点上加载一个外部gtag.js脚本。</span><br>  <span class="hljs-comment"># 如果您只需要页面浏览量功能，请将以下选项设置为true以获得更好的性能。</span><br>  <span class="hljs-attr">only_pageview:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Baidu Analytics</span><br><span class="hljs-comment"># See: https://tongji.baidu.com</span><br><span class="hljs-attr">baidu_analytics:</span> <span class="hljs-comment"># &lt;app_id&gt;</span><br><br><span class="hljs-comment"># Growingio Analytics</span><br><span class="hljs-comment"># See: https://www.growingio.com</span><br><span class="hljs-attr">growingio_analytics:</span> <span class="hljs-comment"># &lt;project_id&gt;</span><br><br><span class="hljs-comment"># Cloudflare Web Analytics</span><br><span class="hljs-comment"># See: https://www.cloudflare.com/web-analytics/</span><br><span class="hljs-attr">cloudflare_analytics:</span><br><br><span class="hljs-comment"># Microsoft Clarity Analytics</span><br><span class="hljs-comment"># See: https://clarity.microsoft.com/</span><br><span class="hljs-attr">clarity_analytics:</span> <span class="hljs-comment"># &lt;project_id&gt;</span><br><br><span class="hljs-comment"># 显示每个文章的访问量。</span><br><span class="hljs-comment"># You can visit https://www.leancloud.cn to get AppID and AppKey.</span><br><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-comment"># &lt;your app id&gt;</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-comment"># &lt;your app key&gt;</span><br>  <span class="hljs-comment"># Required for apps from CN region</span><br>  <span class="hljs-attr">server_url:</span> <span class="hljs-comment"># &lt;your server url&gt;</span><br>  <span class="hljs-comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span><br>  <span class="hljs-comment"># 如果你不关心leancloud counter的安全性，只想直接使用它</span><br>  <span class="hljs-comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span><br>  <span class="hljs-attr">security:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 另一个显示每个文章的访问量的工具。</span><br><span class="hljs-comment"># Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span><br><span class="hljs-comment"># Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span><br><span class="hljs-attr">firestore:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">collection:</span> <span class="hljs-string">articles</span> <span class="hljs-comment"># 必需的, 用于访问firestore数据库的字符串集合名称</span><br>  <span class="hljs-attr">apiKey:</span> <span class="hljs-comment"># 必需的</span><br>  <span class="hljs-attr">projectId:</span> <span class="hljs-comment"># 必需的</span><br><br><span class="hljs-comment"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="hljs-comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="hljs-attr">busuanzi_count:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">total_visitors:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors_icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-user</span><br>  <span class="hljs-attr">total_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_views_icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-eye</span><br>  <span class="hljs-attr">post_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post_views_icon:</span> <span class="hljs-string">far</span> <span class="hljs-string">fa-eye</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 搜索服务</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/search-services</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Algolia搜索</span><br><span class="hljs-comment"># For more information: https://www.algolia.com</span><br><span class="hljs-attr">algolia_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hits:</span><br>    <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 本地搜索</span><br><span class="hljs-comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span><br><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 如果是自动，则通过更改输入触发搜索。</span><br>  <span class="hljs-comment"># 如果手动，按回车键或搜索按钮触发搜索。</span><br>  <span class="hljs-attr">trigger:</span> <span class="hljs-string">auto</span><br>  <span class="hljs-comment"># 显示每篇文章的前n个结果，通过设置为-1显示所有结果</span><br>  <span class="hljs-attr">top_n_per_article:</span> <span class="hljs-number">1</span><br>  <span class="hljs-comment"># 将html字符串转义为可读字符串。</span><br>  <span class="hljs-attr">unescape:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 加载页面时预加载搜索数据。</span><br>  <span class="hljs-attr">preload:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 聊天服务</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 在侧边栏打开指定聊天小部件的按钮。</span><br><span class="hljs-comment"># 首先，您需要启用并配置聊天服务。</span><br><span class="hljs-attr">chat:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-comment</span> <span class="hljs-comment"># 图标名称在字体Awesome，设置为false禁用图标。</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">Chat</span> <span class="hljs-comment"># 按钮文本，改变它，如你所愿。</span><br><br><span class="hljs-comment"># Chatra 实时聊天支持</span><br><span class="hljs-comment"># For more information: https://chatra.com</span><br><span class="hljs-comment"># Dashboard: https://app.chatra.io/settings/general</span><br><span class="hljs-attr">chatra:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">async:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-comment"># Visit Dashboard to get your ChatraID</span><br>  <span class="hljs-comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span><br><br><span class="hljs-comment"># Tidio Support</span><br><span class="hljs-comment"># For more information: https://www.tidio.com</span><br><span class="hljs-comment"># Dashboard: https://www.tidio.com/panel/dashboard</span><br><span class="hljs-attr">tidio:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-comment"># Public Key, get it from dashboard. See: https://www.tidio.com/panel/settings/developer</span><br><br><span class="hljs-comment"># Gitter Support</span><br><span class="hljs-comment"># For more information: https://gitter.im</span><br><span class="hljs-attr">gitter:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">room:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 标签设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/tag-plugins/</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 注释标记(引导标注)</span><br><span class="hljs-attr">note:</span><br>  <span class="hljs-comment"># 注意标签样式值:</span><br>  <span class="hljs-comment">#  - simple    bootstrap callout old alert style. Default.</span><br>  <span class="hljs-comment">#  - modern    bootstrap callout new (v2-v3) alert style.</span><br>  <span class="hljs-comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br>  <span class="hljs-comment">#  - disabled  disable all CSS styles import of note tag.</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">simple</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br>  <span class="hljs-comment"># Offset也应用于标签标记变量。此选项可以与禁用的注释标记一起工作。</span><br>  <span class="hljs-attr">light_bg_offset:</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># Tabs tag</span><br><span class="hljs-attr">tabs:</span><br>  <span class="hljs-comment"># 使有长内容的标签的导航栏粘在顶部。</span><br>  <span class="hljs-attr">sticky:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">transition:</span><br>    <span class="hljs-attr">tabs:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">labels:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># PDF标记</span><br><span class="hljs-comment"># NexT将尝试本地加载pdf文件，如果失败，将使用pdf.js。</span><br><span class="hljs-comment"># 所以，你必须安装pdf.js的依赖，如果你想使用pdf标签，并使它可用于所有浏览器。</span><br><span class="hljs-comment"># Dependencies: https://github.com/next-theme/theme-next-pdf</span><br><span class="hljs-attr">pdf:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Default height</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-string">500px</span><br><br><span class="hljs-comment"># Mermaid tag</span><br><span class="hljs-attr">mermaid:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Available themes: default | dark | forest | neutral</span><br>  <span class="hljs-attr">theme:</span><br>    <span class="hljs-attr">light:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">dark:</span> <span class="hljs-string">dark</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 动画设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 使用animation .css让所有东西都动起来。</span><br><span class="hljs-comment"># For more information: https://animate.style</span><br><span class="hljs-attr">motion:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">async:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">transition:</span><br>    <span class="hljs-comment"># 所有可用的转换变量: https://theme-next.js.org/animate/</span><br>    <span class="hljs-attr">post_block:</span> <span class="hljs-string">fadeIn</span><br>    <span class="hljs-attr">post_header:</span> <span class="hljs-string">fadeInDown</span><br>    <span class="hljs-attr">post_body:</span> <span class="hljs-string">fadeInDown</span><br>    <span class="hljs-attr">coll_header:</span> <span class="hljs-string">fadeInLeft</span><br>    <span class="hljs-comment"># 只在 Pisces | Gemini 方案下可用.</span><br>    <span class="hljs-attr">sidebar:</span> <span class="hljs-string">fadeInUp</span><br><br><span class="hljs-comment"># 在页面加载期间在顶部的进度条。</span><br><span class="hljs-comment"># For more information: https://github.com/CodeByZach/pace</span><br><span class="hljs-attr">pace:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 所有可选颜色:</span><br>  <span class="hljs-comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">blue</span><br>  <span class="hljs-comment"># 所有可选主题:</span><br>  <span class="hljs-comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br>  <span class="hljs-comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">minimal</span><br><br><span class="hljs-comment"># 帆布缎带</span><br><span class="hljs-comment"># For more information: https://github.com/hustcc/ribbon.js</span><br><span class="hljs-attr">canvas_ribbon:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-number">300</span> <span class="hljs-comment"># The width of the ribbon</span><br>  <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.6</span> <span class="hljs-comment"># The transparency of the ribbon</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># The display level of the ribbon</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># CDN的设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/advanced-settings/vendors</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">vendors:</span><br>  <span class="hljs-comment"># The CDN provider of NexT internal scripts.</span><br>  <span class="hljs-comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span><br>  <span class="hljs-comment"># Warning: If you are using the latest master branch of NexT, please set `internal: local`</span><br>  <span class="hljs-attr">internal:</span> <span class="hljs-string">local</span><br>  <span class="hljs-comment"># The default CDN provider of third-party plugins.</span><br>  <span class="hljs-comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span><br>  <span class="hljs-comment"># Dependencies for `plugins: local`: https://github.com/next-theme/plugins</span><br>  <span class="hljs-attr">plugins:</span> <span class="hljs-string">jsdelivr</span><br>  <span class="hljs-comment"># Custom CDN URL</span><br>  <span class="hljs-comment"># For example:</span><br>  <span class="hljs-comment"># custom_cdn_url: https://cdn.jsdelivr.net/npm/$&#123;npm_name&#125;@$&#123;version&#125;/$&#123;minified&#125;</span><br>  <span class="hljs-comment"># custom_cdn_url: https://cdnjs.cloudflare.com/ajax/libs/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;cdnjs_file&#125;</span><br>  <span class="hljs-attr">custom_cdn_url:</span><br><br><span class="hljs-comment"># Assets</span><br><span class="hljs-comment"># 使用CDN加速静态文件的交付</span><br><span class="hljs-comment"># js选项只在vendor .internal为本地时有效。</span><br><span class="hljs-attr">css:</span> <span class="hljs-string">css</span><br><span class="hljs-attr">js:</span> <span class="hljs-string">js</span><br><span class="hljs-attr">images:</span> <span class="hljs-string">images</span><br><br></code></pre></td></tr></table></figure>

<html>
<div class="box1">
    <span class="leftline"></span>
    <span class="text">更多内容请在评论区留言讨论</span>
    <span class="rightline"></span>
</div>
</html>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2023/10/04/HexoBlogBuild/</url>
    <content><![CDATA[<blockquote>
<p>Hexo静态博客搭建，从准备阶段安装<code>nodej.s</code>到正式安装Hexo博客框架，最后安装主题并开始使用。</p>
</blockquote>
<span id="more"></span>

<h1 id="Hexo静态博客搭建"><a href="#Hexo静态博客搭建" class="headerlink" title="Hexo静态博客搭建"></a>Hexo静态博客搭建</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>首先安装<code>node.js</code></p>
<p>在应用商店安装Node.js版本管理器 1.7</p>
<p>安装成功后，选择安装Node.js  v16.18.1 </p>
<p>安装成功后测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">node -verson<br></code></pre></td></tr></table></figure>

<p>发现找不到命令，打开Node.js版本管理器，修改环境变量</p>
<p>第一条是环境变量后面加上&#x2F;bin；第二条是下载地址，改成国内镜像；第三条不用动；第四条在前面加–</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">prefix = /www/server/nodejs/v16<span class="hljs-number">.18</span><span class="hljs-number">.1</span>/bin<br>registry = https:<span class="hljs-comment">//registry.npm.taobao.org</span><br>cache = /www/server/nodejs/cache/<br>--init-<span class="hljs-keyword">module</span> = /www/server/nodejs/v16<span class="hljs-number">.18</span><span class="hljs-number">.1</span>/etc/init-<span class="hljs-keyword">module</span>.js<br></code></pre></td></tr></table></figure>

<hr>
<p>修改环境变量，打开文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vi  <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure>

<p>添加数据</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nodejs/</span>v16.<span class="hljs-number">18.1</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure>

<p>让文件生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure>

<p>再次测试，成功显示版本号。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">node -verson<br></code></pre></td></tr></table></figure>

<p>安装git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo yum install git-core<br></code></pre></td></tr></table></figure>

<h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>

<p>报错：npm WARN config init.module Use <code>--init-module</code> instead.</p>
<p>进入应用程序的环境变量，把<code>init.module </code>修改为<code>--init.module </code>，保存</p>
<p>再次安装，安装成功</p>
<ol>
<li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure>

<h2 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h2><p>安装 Hexo 完成后，新建个要作为网站的文件夹</p>
<p>请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。&#x2F;www&#x2F;wwwroot&#x2F;hexo为网站目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init /www/wwwroot/hexo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /www/wwwroot/hexo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure>

<p>期间报错依赖安装失败，让执行<code>npm install</code>，就继续执行就可以</p>
<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure>

<h2 id="以-zhaoo-主题为例进行主题安装"><a href="#以-zhaoo-主题为例进行主题安装" class="headerlink" title="以 zhaoo 主题为例进行主题安装"></a>以 zhaoo 主题为例进行主题安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git clone https://github.com/zhaoo/hexo-theme-zhaoo.git themes/zhaoo<br></code></pre></td></tr></table></figure>

<p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件启用 zhaoo 主题：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> zhaoo<br></code></pre></td></tr></table></figure>

<p>建议将文章数量改为<strong>9</strong>篇，启用代码高亮效果：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">9</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span><br></code></pre></td></tr></table></figure>

<h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><p>发布网站<br>安装服务器：Hexo 3.0 把服务器独立成了个别模块，我们必须得在站点文件夹根目录下安装之后才能使用。<br>在命令行中打开我们的工作站文件夹，键入以下命令，以将 hexo-server 安装到我们的工作站文件夹：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install hexo-server --save<br></code></pre></td></tr></table></figure>

<p>清除缓存文件<br>为了避免不必要的错误，在生成静态文件前，强烈建议每次发布网站前先运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo clean<br></code></pre></td></tr></table></figure>

<p>首先执行下列命令生成相应的静态网页，生成的静态网页以及相关资源都会在public目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo generate<br></code></pre></td></tr></table></figure>

<p>hexo-server模块的主要命令如下，输入以下命令以启动服务器，在浏览器进入 <a href="http://localhost:4000/">http://localhost:4000</a> 就可以看到我们的网站了！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo server<br></code></pre></td></tr></table></figure>

<p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo server -p 5000<br></code></pre></td></tr></table></figure>

<h2 id="日常使用："><a href="#日常使用：" class="headerlink" title="日常使用："></a>日常使用：</h2><p><a href="https://www.izhaoo.com/2020/05/05/hexo-theme-zhaoo-doc/">主题配置文档</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo网站地图</title>
    <url>/2023/10/04/HexoWebsite/</url>
    <content><![CDATA[<blockquote>
<p>Hexo下载相关插件，以完成自动生成网站地图。</p>
</blockquote>
<span id="more"></span>

<h1 id="Hexo添加网站地图"><a href="#Hexo添加网站地图" class="headerlink" title="Hexo添加网站地图"></a>Hexo添加网站地图</h1><h2 id="先进入你的网站根目录"><a href="#先进入你的网站根目录" class="headerlink" title="先进入你的网站根目录"></a>先进入你的网站根目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd hexo<br></code></pre></td></tr></table></figure>

<h2 id="安装地图生成插件"><a href="#安装地图生成插件" class="headerlink" title="安装地图生成插件"></a>安装地图生成插件</h2><h3 id="谷歌地图生成器："><a href="#谷歌地图生成器：" class="headerlink" title="谷歌地图生成器："></a>谷歌地图生成器：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure>

<h3 id="百度地图生成器："><a href="#百度地图生成器：" class="headerlink" title="百度地图生成器："></a>百度地图生成器：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure>

<h3 id="修改-hexo-配置文件-config-yml"><a href="#修改-hexo-配置文件-config-yml" class="headerlink" title="修改 hexo 配置文件 _config.yml"></a>修改 hexo 配置文件 <code>_config.yml</code></h3><p>注意：这里不是主题里的配置文件。</p>
<p>找个空位置，添加如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">自动生成sitemap，生成路径path一定要缩进，不然报错</span><br>sitemap:<br>	path: sitemap.xml<br>baidusitemap:<br>	path: baidusitemap.xml<br></code></pre></td></tr></table></figure>

<p>保存文件。这样你再次生成的时候就可以在<code>public</code>文件夹内看到了3</p>
<h2 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加<code>robots.txt</code></h2><p>在source文件夹下创建<code>robots.txt</code>，并写入类似下面的配置，来规范搜索引擎的行为。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">User-agent: *<br>Allow: /<br>Allow: /archives/<br>Allow: /categories/<br>Allow: /tags/<br>Disallow: /about/<br>Disallow: /*.jpg$<br>Disallow: /*.jpeg$<br>Disallow: /*.gif$<br>Disallow: /*.png$<br>Disallow: /*.bmp$<br><br>Sitemap: https://你的网址/sitemap.xml<br>Sitemap: https://你的网址/baidusitemap.xml<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序（InsertSort）</title>
    <url>/2023/10/08/InsertSort/</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结了插入排序的相关知识，其中包括插入排序的特点、原理和直接插入排序的完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="插入排序特点"><a href="#插入排序特点" class="headerlink" title="插入排序特点"></a>插入排序特点</h2><ul>
<li>稳定排序</li>
<li>算法简便，且容易实现</li>
<li>空间复杂度：O(1)；时间复杂度：平均O(n^2)</li>
<li>也适合用于链式存储结构，只是在单链表上无需移动记录，只需修改相应的指针</li>
<li>更适合于初始记录基本有序（正序）的情况，当初始记录无序，n较大时，此算法时间复杂度较高，不宜采用</li>
</ul>
<h2 id="插入排序过程-原理"><a href="#插入排序过程-原理" class="headerlink" title="插入排序过程(原理)"></a>插入排序过程(原理)</h2><p>插入排序是指在待排序的元素中，假设前面n-1(其中n&gt;&#x3D;2)个数已经是排好顺序的，现将第n个数插到前面已经排好的序列中，然后找到合适自己的位置，使得插入第n个数的这个序列也是排好顺序的。按照此法对所有元素进行插入，直到整个序列排为有序的过程，称为插入排序。</p>
<h2 id="完整代码实现（直接插入排序）"><a href="#完整代码实现（直接插入排序）" class="headerlink" title="完整代码实现（直接插入排序）"></a>完整代码实现（直接插入排序）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//插入排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;		<span class="hljs-comment">//保存要替换的位置（数组下标）</span><br>    <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>; <span class="hljs-comment">//保存提取的未排序的元素值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-comment">//提取未排序的元素</span><br>        temp = arr[i];<br>        <span class="hljs-keyword">for</span> (j = i<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>&amp;&amp;arr[j]&gt;temp; j--)<br>        &#123;<br>            arr[j + <span class="hljs-number">1</span>] = arr[j]; <br>        &#125;<br>        arr[j+<span class="hljs-number">1</span>] = temp;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//数组打印</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len,<span class="hljs-type">int</span> start = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;&#123;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k == len - <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot; &#125;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot;，&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">8</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入排序前：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">printArr</span>(arr, len);<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入排序：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">InsertSort</span>(arr, len);<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入排序后：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">printArr</span>(arr,len);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-built_in">test02</span>();<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表（LinkList）</title>
    <url>/2022/12/10/LinkList/</url>
    <content><![CDATA[<blockquote>
<p>链表的定义、特点和存储结构；以及单链表的完整实现代码。</p>
</blockquote>
<span id="more"></span>
<hr>
<p>前置文章：<a href="https://superlovelace.top/2022/12/10/SqList/">线性表之顺序表</a></p>
<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h2><p>每个结点除了存放数据元素外，还要存储指向下一个结点的指针</p>
<h2 id="链表的特点"><a href="#链表的特点" class="headerlink" title="链表的特点"></a>链表的特点</h2><ol>
<li>不要求大片连续空间</li>
<li>改变容量方便</li>
<li>不可随机存取</li>
<li>要耗费一定空间存放指针</li>
</ol>
<h2 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//单链表的存储结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>	ElemType data;<br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure>

<h2 id="单链表的完整代码实现"><a href="#单链表的完整代码实现" class="headerlink" title="单链表的完整代码实现"></a>单链表的完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表（带头结点）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>	ElemType data;<br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>	L = <span class="hljs-keyword">new</span> LNode;<br>	L-&gt;next = <span class="hljs-literal">NULL</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表的取值（按位序取值）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要取值的单链表</span><br><span class="hljs-comment">	参数二：要取值的位置</span><br><span class="hljs-comment">	参数三：待保存的对象</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode *p = L-&gt;next;<br>	<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">while</span> (p &amp;&amp; j&lt;i)<br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!p || j &gt; i) <br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	e = p-&gt;data;<br>	<span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表的查找（按位序查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要查找的单链表</span><br><span class="hljs-comment">	参数二：要查找的数据</span><br><span class="hljs-comment">	注意：成功：返回下标地址；失败：返回NULL。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L, ElemType e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode* p = L-&gt;next;<span class="hljs-comment">//创建新结点，并指向第一块数据</span><br>	<span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="hljs-comment">//如果p不为空且data == e,返回p的地址</span><br>	&#123;<br>		p = p-&gt;next;<br>	&#125;<br>	<span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表的插入（按位序插入（后插法））:  时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要插入的单链表</span><br><span class="hljs-comment">	参数二：要插入的位置</span><br><span class="hljs-comment">	参数三：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br>	<span class="hljs-keyword">while</span> (p &amp;&amp; (j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!p || j&gt;i<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果地址p为NULL就退出，头结点的地址也不为空</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* s = <span class="hljs-keyword">new</span> LNode; <span class="hljs-comment">//创建新结点</span><br>	s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>	s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>	p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表的删除（按位序删除）: 时间复杂度O(n)</span><br><span class="hljs-comment">	参数一：要删除的单链表</span><br><span class="hljs-comment">	参数二：要删除的位置</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>	LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br>	<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br>	<span class="hljs-keyword">while</span> (p-&gt;next&amp;&amp;(j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>	&#123;<br>		p = p-&gt;next;<br>		j++;<br>	&#125;<br>	<span class="hljs-keyword">if</span> (!(p-&gt;next)||(j&gt;i<span class="hljs-number">-1</span>))<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>	p-&gt;next = q-&gt;next;<span class="hljs-comment">//p的指针指向q的指针指向的下一个数据地址</span><br>	<span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	LinkList L;<br>	<span class="hljs-comment">//创建单链表</span><br>	<span class="hljs-comment">//CreateList_H(L,5);</span><br>	<span class="hljs-comment">//初始化单链表</span><br>	<span class="hljs-built_in">InitList</span>(L);<br>	<span class="hljs-comment">//插入单链表</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>	&#123;<br>		<span class="hljs-built_in">ListInsert</span>(L, <span class="hljs-number">1</span>, i);<br>	&#125;<br>	<span class="hljs-comment">//取值</span><br>	<span class="hljs-type">int</span> e;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>	&#125;<br>	<br>	<span class="hljs-comment">//查找</span><br>	cout &lt;&lt; <span class="hljs-string">&quot;5的地址为：&quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(L, <span class="hljs-number">5</span>) &lt;&lt; endl;<br>	<span class="hljs-comment">//删除</span><br>	<span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">1</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;删除第一个元素5：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>	&#125;<br>	<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	前插法创建单链表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//void CreateList_H(LinkList&amp; L, int n)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//	L = new LNode;</span><br><span class="hljs-comment">//	L-&gt;next = NULL;</span><br><span class="hljs-comment">//	for (int i = 0; i &lt; n; i++)</span><br><span class="hljs-comment">//	&#123;</span><br><span class="hljs-comment">//		LNode* p = new LNode;</span><br><span class="hljs-comment">//		cin &gt;&gt; p-&gt;data;</span><br><span class="hljs-comment">//		p-&gt;next = L-&gt;next;</span><br><span class="hljs-comment">//		L-&gt;next = p;</span><br><span class="hljs-comment">//	&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	尾插法创建单链表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//void CreateList_R(LinkList&amp; L, int n)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//	L = new LNode;</span><br><span class="hljs-comment">//	L-&gt;next = NULL;</span><br><span class="hljs-comment">//	LNode* r = L;</span><br><span class="hljs-comment">//	for (int i = 0; i &lt; n; i++)</span><br><span class="hljs-comment">//	&#123;</span><br><span class="hljs-comment">//		LNode* p = new LNode;</span><br><span class="hljs-comment">//		cin &gt;&gt; p-&gt;data;</span><br><span class="hljs-comment">//		p-&gt;next = NULL;</span><br><span class="hljs-comment">//		r-&gt;next = p;</span><br><span class="hljs-comment">//		r = p;</span><br><span class="hljs-comment">//	&#125;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表的插入（前插法）: 时间复杂度O(1)</span><br><span class="hljs-comment">	参数一：要插入的结点</span><br><span class="hljs-comment">	参数二：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">	原理：前插法即开辟新结点s，复制p结点的值，然后将数据e存给p结点，再将s的指针指向p的指针指向，p的指针指向s。可谓是偷天换日、原地TP。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListPriorInsert</span><span class="hljs-params">(LNode *p, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* s = <span class="hljs-keyword">new</span> LNode;<span class="hljs-comment">//创建新结点</span><br>	<span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	s-&gt;data = p-&gt;data;<span class="hljs-comment">//复制插入的前一个数据到新开辟的空间</span><br>	p-&gt;data = e;  <span class="hljs-comment">//前一个数据存放新数据e</span><br>	s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>	p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	单链表的插入（后插法）: 时间复杂度O(1)</span><br><span class="hljs-comment">	参数一：要插入的结点</span><br><span class="hljs-comment">	参数二：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListNextInsert</span><span class="hljs-params">(LNode* p, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	LNode* s = <span class="hljs-keyword">new</span> LNode;<span class="hljs-comment">//创建新结点</span><br>	<span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>	s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>	p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>循环队列（链式存储结构）</title>
    <url>/2023/10/13/LinkQueue/</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结了循环队列的另一种实现形式，即循环队列的链式存储结构形式，主要是完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="循环队列（链式存储结构）"><a href="#循环队列（链式存储结构）" class="headerlink" title="循环队列（链式存储结构）"></a>循环队列（链式存储结构）</h1><h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环队列的链式实现</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链队列存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br>	<span class="hljs-type">int</span> data;  <br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> * next;<br>&#125;SNode,*SqQueue;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	SqQueue front;<br>	SqQueue rear;<br>&#125;LinkQueue;<br><br><span class="hljs-comment">//初始化队列(有头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>	S.front = S.rear = <span class="hljs-keyword">new</span> SNode;<br>	S.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.front == S.rear)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//进队列(每次都插在头结点后面)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkQueue&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	SNode* p = <span class="hljs-keyword">new</span> SNode;<br>	p-&gt;data = e;<br>	p-&gt;next = <span class="hljs-literal">NULL</span>;<br>	S.rear-&gt;next = p; <span class="hljs-comment">//修改后继指针</span><br>	S.rear = p;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkQueue&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueEmpty</span>(S))<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S.front-&gt;next-&gt;data;<br>	SNode* p = S.front-&gt;next;<br>	S.front-&gt;next = p-&gt;next;<br>	<span class="hljs-keyword">if</span> (S.rear == p)<br>	&#123;<br>		S.rear = S.front;<br>	&#125;<br>	<span class="hljs-keyword">delete</span> p;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取队列顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(LinkQueue S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueEmpty</span>(S))<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S.front-&gt;next-&gt;data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	LinkQueue S;<br>	<span class="hljs-built_in">InitQueue</span>(S);<br>	cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-type">int</span> b;<br><br>	cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br>	<span class="hljs-built_in">GetTop</span>(S, b);<br>	cout &lt;&lt; <span class="hljs-string">&quot;读取队列顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>链栈</title>
    <url>/2023/10/12/LinkStack/</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结了栈的链式存储方式，包括有无头结点两种情况和相关的完整实现代码。</p>
</blockquote>
<span id="more"></span>

<h1 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h1><h2 id="有头结点的完整实现代码"><a href="#有头结点的完整实现代码" class="headerlink" title="有头结点的完整实现代码"></a>有头结点的完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	链栈（有头结点）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链栈存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br>	<span class="hljs-type">int</span> data;  <span class="hljs-comment">//静态数组存放栈中元素</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> * next;<br>	<span class="hljs-type">int</span> top;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SNode,*SqStack;<br><br><span class="hljs-comment">//初始化栈(有头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>	S = <span class="hljs-keyword">new</span> SNode;<br>	S-&gt;top = <span class="hljs-number">-1</span>;<br>	S-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//进栈(每次都插在头结点后面)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	SNode* p = <span class="hljs-keyword">new</span> SNode;<br>	p-&gt;data = e;<br>	p-&gt;next = S-&gt;next;<br>	S-&gt;next = p;<br>	p-&gt;top = ++(S-&gt;top);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S-&gt;next-&gt;data;<br>	<span class="hljs-keyword">if</span> (!S-&gt;next-&gt;next)<br>	&#123;<br>		S-&gt;top--;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	S-&gt;next = S-&gt;next-&gt;next;<br>	S-&gt;top--;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S-&gt;next-&gt;data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SqStack S;<br>	<span class="hljs-built_in">InitStack</span>(S);<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-type">int</span> b;<br><br>	cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br>	<span class="hljs-built_in">GetTop</span>(S, b);<br>	cout &lt;&lt; <span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="无头结点的完整实现代码"><a href="#无头结点的完整实现代码" class="headerlink" title="无头结点的完整实现代码"></a>无头结点的完整实现代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	链栈(无头结点)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链栈存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br>	<span class="hljs-type">int</span> data;  <span class="hljs-comment">//静态数组存放栈中元素</span><br>	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span>* next;<br>	<span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SNode, * SqStack;<br><br><span class="hljs-comment">//初始化栈(无头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>	S = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//进栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	SNode* p = S;<br>	S = <span class="hljs-keyword">new</span> SNode;<br>	S-&gt;data = e;<br>	S-&gt;next = p;<br>	<span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">//如果p为NULL</span><br>	&#123;<br>		S-&gt;top++;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	S-&gt;top = p-&gt;top+<span class="hljs-number">1</span>;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S-&gt;data;<br>	SNode* p = S;<br>	<br>	S = p-&gt;next;<br>	<br>	<span class="hljs-comment">//delete p;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S-&gt;data;<br>&#125;<br><span class="hljs-comment">//读取栈元素个数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetSize</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">return</span> S-&gt;top;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SqStack S;<br>	<span class="hljs-built_in">InitStack</span>(S);<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-type">int</span> b;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>	<span class="hljs-built_in">GetTop</span>(S, b);<br>	cout &lt;&lt; <span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>实现MAC风格的Markdown代码块</title>
    <url>/2022/11/23/MAC-Markdown/</url>
    <content><![CDATA[<blockquote>
<p>用html语法实现Markdown代码块MAC风格。</p>
</blockquote>
<span id="more"></span>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>用html语法实现Markdown代码块MAC风格，使用时只需要在代码块前粘贴这段代码即可；在typora里看不到效果，在VSCode和网页上可以看到。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.mac</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.b1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#E0443E</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.b2</span> &#123; <span class="hljs-attribute">background</span>:<span class="hljs-number">#DEA123</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.b3</span> &#123; <span class="hljs-attribute">background</span>:<span class="hljs-number">#1AAB29</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.warpper</span>&#123;</span><br><span class="language-css">        user-select: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>:auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    br &#123; user-select: none <span class="hljs-meta">!important</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.line</span> &#123; </span><br><span class="language-css">        <span class="hljs-attribute">position</span>: sticky;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span> !important; </span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.gutter</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">26px</span>;</span><br><span class="language-css">        user-select: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: table-cell <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warpper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mac b1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mac b2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mac b3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序（Merge Sort）</title>
    <url>/2023/10/05/MergeSort/</url>
    <content><![CDATA[<blockquote>
<p>归并排序的介绍，包括归并排序的特点、原理和完整实现代码。</p>
</blockquote>
<span id="more"></span>
<h1 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h1><p>把两个或多个有序的子序列合并为一个</p>
<p>2路归并：二合一</p>
<p>k路归并：k合一</p>
<h2 id="归并排序特点"><a href="#归并排序特点" class="headerlink" title="归并排序特点"></a>归并排序特点</h2><ul>
<li>是稳定排序</li>
<li>可用于链式结构，且不需要附加存储空间，但递归实现时仍需要开辟相应的递归工作栈</li>
<li>空间复杂度：O（n）</li>
<li>时间复杂度：O（nlogn）</li>
</ul>
<h2 id="归并排序过程-原理"><a href="#归并排序过程-原理" class="headerlink" title="归并排序过程(原理)"></a>归并排序过程(原理)</h2><ol>
<li>若low &gt; high ，则将序列分从中间mid &#x3D; (low + high)&#x2F;2</li>
<li>对左半部分【low，mid】递归地进行归并排序</li>
<li>对右半部分【mid+1，high】递归地进行归并排序</li>
<li>将左右两个有序子序列Merge为一个</li>
</ol>
<h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 辅助数组B */</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* B = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//方式一</span><br><span class="hljs-type">int</span>* B2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n]; <span class="hljs-comment">//方式二</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">	归并</span><br><span class="hljs-comment">	A[low...mid]和A[mid+1...high]各自有序，将两个部分归并</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> i, j, k;<br>	<span class="hljs-keyword">for</span> ( k = low; k &lt;= high; k++)<br>	&#123;<br>		B[k] = A[k];  <span class="hljs-comment">//将A中所有元素复制到B中</span><br>	&#125;<br>	<span class="hljs-keyword">for</span> (i = low,j = mid+<span class="hljs-number">1</span>,k = i;i&lt;=mid&amp;&amp;j&lt;=high; k++)<br>	&#123;<br>		<span class="hljs-keyword">if</span> (B[i] &lt;= B[j]) &#123;<br>			A[k] = B[i++];<span class="hljs-comment">//将较小值复制到A中</span><br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			A[k] = B[j++];<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">while</span> (i&lt;=mid)<br>	&#123;<br>		A[k++] = B[i++];<br>	&#125;<br>	<span class="hljs-keyword">while</span> (j &lt;= high)<br>	&#123;<br>		A[k++] = B[j++];<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">/* 归并排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (low&lt;high) &#123;<br>		<span class="hljs-type">int</span> mid = (low + high) / <span class="hljs-number">2</span>; <span class="hljs-comment">//从中间划分</span><br>		<span class="hljs-built_in">MergeSort</span>(A, low, mid);  <span class="hljs-comment">//对左半部分归并排序</span><br>		<span class="hljs-built_in">MergeSort</span>(A, mid+<span class="hljs-number">1</span>, high); <span class="hljs-comment">//右半部分归并排序</span><br>		<span class="hljs-built_in">Merge</span>(A, low, mid, high); <span class="hljs-comment">//归并</span><br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>	<span class="hljs-built_in">MergeSort</span>(a, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;归并排序后：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>	&#123;<br>		cout &lt;&lt; a[i];<br>		<span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span>)<br>		&#123;<br>			cout &lt;&lt;endl;;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">归并排序后：<br>1,2,3,4,5,6,8,9<br><br>按任意键关闭此窗口. . .<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习笔记一</title>
    <url>/2023/10/24/MyBatis_1/</url>
    <content><![CDATA[<blockquote>
<p>本文主要记录了Java中的MyBatis框架的学习，初次了解其在项目中的具体位置和功能。</p>
</blockquote>
<span id="more"></span>

<p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis"></p>
<hr>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://mybatis.org/mybatis-3/zh/index.html">点击前往</a></p>
<h2 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h2><p>MyBatis 是一款持久层框架，</p>
<p>它支持自定义 SQL、存储过程以及高级映射。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可。</p>
<p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>我学习时的配置:</p>
<ul>
<li>MySQL5.7</li>
<li>Maven3.6.0</li>
<li>Mybatis3.5.2</li>
<li>IDEA2019.1</li>
</ul>
<p>我学习时的父工程pom.xml文档</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--  父工程 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 依赖  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        MySQL驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        junit测试单元框架--&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--    资源过滤，防止运行时找不到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>子工程pom.xml文档</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>	<span class="hljs-comment">&lt;!--    资源过滤，防止运行时找不到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    			<span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="创建MyBatis配置文件"><a href="#创建MyBatis配置文件" class="headerlink" title="创建MyBatis配置文件"></a>创建MyBatis配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--            事务管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3307/mydb?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>autoReconnect=true<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    创建接口后注册接口实现文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/zmq/dao/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure>

<h2 id="创建工具类"><a href="#创建工具类" class="headerlink" title="创建工具类"></a>创建工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MybatisUtils.java</span><br><span class="hljs-keyword">package</span> com.zmq.utils;<br><br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取SqlSession对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//SqlSession 完全包含了面向数据库执行SQL命令的所有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//openSession(true)可以自动提交事务</span><br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h2 id="创建Pojo层实体类"><a href="#创建Pojo层实体类" class="headerlink" title="创建Pojo层实体类"></a>创建Pojo层实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.java</span><br><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br>    <span class="hljs-comment">//getset方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-comment">//toString方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="创建接口文件-Dao层"><a href="#创建接口文件-Dao层" class="headerlink" title="创建接口文件(Dao层)"></a>创建接口文件(Dao层)</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao.java</span><br><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-comment">//获取所有用户</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查询用户</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//新增用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//修改用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">delUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>



<h2 id="创建接口实现配置文件-相当于JavaWeb的impl层"><a href="#创建接口实现配置文件-相当于JavaWeb的impl层" class="headerlink" title="创建接口实现配置文件(相当于JavaWeb的impl层)"></a>创建接口实现配置文件(相当于JavaWeb的impl层)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- UserMapper.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.UserDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    这里相当于实现接口的方法    resultType绑定全限定名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        select * from mydb.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        select * from mydb.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span> &gt;</span><br>        insert into mydb.user(id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        update mydb.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from mydb.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在Dao的文件中，右击要测试的方法，点击goto，创建测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDaoTest.java</span><br><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.User;<br><span class="hljs-keyword">import</span> com.zmq.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br><br>    <span class="hljs-comment">//测试查询全部User</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">//sqlSession.getMapper(UserDao.class);后ALT+回车生成赋给的对象UserDao</span><br>        <span class="hljs-comment">//这里要拿SQL，从Dao包里拿，面向接口编程，可以直接从UserDao接口里拿</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        <span class="hljs-comment">//执行方法</span><br>        List&lt;User&gt; userList = userDao.getUserList();<br><br>        <span class="hljs-comment">//增强For循环输出</span><br>        <span class="hljs-keyword">for</span>(User user:userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试通过id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user);<br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//测试新增用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;alan&quot;</span>,<span class="hljs-string">&quot;852456&quot;</span>));<br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;添加成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试修改用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;alex&quot;</span>,<span class="hljs-string">&quot;159852&quot;</span>));<br><br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//测试删除用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.delUserById(<span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis学习笔记二</title>
    <url>/2023/10/25/MyBatis_2/</url>
    <content><![CDATA[<blockquote>
<p>本文是第二篇MyBatis的学习笔记，这次的比较深入理论，记录各个分部的功能和作用。</p>
</blockquote>
<span id="more"></span>

<p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis"></p>
<hr>
<h2 id="一、XML配置"><a href="#一、XML配置" class="headerlink" title="一、XML配置"></a>一、XML配置</h2><h3 id="1-属性（properties）"><a href="#1-属性（properties）" class="headerlink" title="1.属性（properties）"></a>1.属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 用于连接外部配置文件 --&gt;</span><br><span class="hljs-comment">&lt;!--    外部配置文件路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--同名配置优先使用外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="2-类型别名（typeAliases）"><a href="#2-类型别名（typeAliases）" class="headerlink" title="2.类型别名（typeAliases）"></a>2.类型别名（typeAliases）</h3><p>1.类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p>
<p>2.也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zmq.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<p>实体类比较少的时候，用第一种方式。</p>
<p>若实体类非常多，则建议用第二种。</p>
<p>第一种可以DIY别名，第二种不行。如果非要改，要在实体类添加注解</p>
<h3 id="3-设置（settings）"><a href="#3-设置（settings）" class="headerlink" title="3.设置（settings）"></a>3.设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p>
<p>一个配置完整的 settings 元素的示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h3 id="4-映射器（mappers）"><a href="#4-映射器（mappers）" class="headerlink" title="4.映射器（mappers）"></a>4.映射器（mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p>
<p>方式一：【推荐使用】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>方式三：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<p>方式四：扫描包进行绑定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>这些配置会告诉 MyBatis 去哪里找映射文件</p>
<h2 id="二、XML映射文件"><a href="#二、XML映射文件" class="headerlink" title="二、XML映射文件"></a>二、XML映射文件</h2><h3 id="1-结果映射"><a href="#1-结果映射" class="headerlink" title="1.结果映射"></a>1.结果映射</h3><h4 id="1-resultMap"><a href="#1-resultMap" class="headerlink" title="1.resultMap"></a><code>1.resultMap</code></h4><p>结果集映射</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>   name   <span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">id</span>   name   password<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    结果集映射--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>            select * from mydb.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li>
<li>ResultMap的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂语句，描述他们的关系就可以</li>
</ul>
<h3 id="2-日志工厂"><a href="#2-日志工厂" class="headerlink" title="2.日志工厂"></a>2.日志工厂</h3><h4 id="1-STDOUT-LOGGING标准日志"><a href="#1-STDOUT-LOGGING标准日志" class="headerlink" title="1.STDOUT_LOGGING标准日志"></a>1.STDOUT_LOGGING标准日志</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标准日志工厂实现--&gt;</span><br>    <span class="hljs-comment">&lt;!--  日志的值：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>一次id查询的控制台打印：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>Opening JDBC Connection<br>Created connection 786041152.<br>Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>==&gt;  Preparing: select * from mydb.user where id = ? <br>==&gt; Parameters: 1(Integer)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: 1, alice, 123456<br>&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;alice&#x27;, password=&#x27;123456&#x27;&#125;<br>Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>Returned connection 786041152 to pool.<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure>

<h4 id="2-LOG4J"><a href="#2-LOG4J" class="headerlink" title="2.LOG4J"></a>2.LOG4J</h4><p>引入Log4j依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加入log4j支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>Log4j配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zmq.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure>

<p>一次id查询的控制台打印：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.<br>[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection 660879561.<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[com.zmq.dao.UserDao.getUserById]-==&gt;  Preparing: select * from mydb.user where id = ? <br>[com.zmq.dao.UserDao.getUserById]-==&gt; Parameters: 1(Integer)<br>[com.zmq.dao.UserDao.getUserById]-&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;alice&#x27;, password=&#x27;123456&#x27;&#125;<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection 660879561 to pool.<br></code></pre></td></tr></table></figure>

<p>简单使用</p>
<p>1.在要使用的log4j的类中，导入包import org.apache.log4j.Logger;</p>
<p>2.日志对象，参数为当前类的Class</p>
<p>3.日志级别</p>
<h2 id="三、分页"><a href="#三、分页" class="headerlink" title="三、分页"></a>三、分页</h2><p>减少数据处理量</p>
<h4 id="1-使用limit分页"><a href="#1-使用limit分页" class="headerlink" title="1.使用limit分页"></a>1.使用limit分页</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">语法：<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> startIndex,pagesize;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>;#[0,n]<br></code></pre></td></tr></table></figure>

<p>使用Mybatis实现分页，核心SQL</p>
<p>1.接口</p>
<p>2.Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from mydb.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>



<p>3.测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByLimit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        HashMap&lt;String,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;();<br>        map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br>        List&lt;User&gt; userList = userDao.getUserByLimit(map);<br>        <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure>

<h4 id="2-RowBounds分页"><a href="#2-RowBounds分页" class="headerlink" title="2.RowBounds分页"></a>2.RowBounds分页</h4><p>不再使用SQL 实现分页</p>
<p>1.接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页二</span><br><span class="hljs-comment">//UserDao.java</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure>

<p>2.mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Mapper.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from mydb.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>3.测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>&#123;<br><br>       <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>       <span class="hljs-comment">//获取sqlSession对象</span><br>       <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>       List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.zmq.dao.UserDao.getUserByRowBounds&quot;</span>,<span class="hljs-literal">null</span>,rowBounds);<br><br>       <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>           System.out.println(user);<br>       &#125;<br>       <span class="hljs-comment">//关闭sqlSession</span><br>       sqlSession.close();<br>   &#125;<br></code></pre></td></tr></table></figure>

<h4 id="3-分页插件"><a href="#3-分页插件" class="headerlink" title="3.分页插件"></a>3.分页插件</h4><h5 id="pagehelper"><a href="#pagehelper" class="headerlink" title="pagehelper"></a>pagehelper</h5><p><a href="https://pagehelper.github.io/docs/howtouse/">官方文档</a></p>
<p>官方文档写的很详细，这里不再展开</p>
<h2 id="四、注解"><a href="#四、注解" class="headerlink" title="四、注解"></a>四、注解</h2><h4 id="1-注解在接口实现"><a href="#1-注解在接口实现" class="headerlink" title="1.注解在接口实现"></a>1.注解在接口实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@select(&quot;select * from user&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//有多个参数时，必须加@Param注解</span><br><span class="hljs-meta">@Select(&quot;Select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><br>User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id，<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;<br><br><span class="hljs-comment">//引用对象不需要写@Param</span><br><span class="hljs-meta">@Insert(&quot;insert into User&#123;id,name,password&#125; values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-comment">//引用对象不需要写@Param</span><br><span class="hljs-meta">@Update(&quot;update User set name=#&#123;name&#125;,pwd=#&#123;passwoord&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">UpdateUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-meta">@Delete(&quot;delete * from user where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure>

<h4 id="2-核心配置文件绑定接口"><a href="#2-核心配置文件绑定接口" class="headerlink" title="2.核心配置文件绑定接口"></a>2.核心配置文件绑定接口</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zmq.dao.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>本质：反射机制实现</p>
<p>底层：动态代理</p>
<p>对于像 BlogMapper 这样的映射器类来说，还有另一种方法来完成语句映射。         </p>
<p>它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。比如，上面的 XML         示例可以被替换成如下的配置：       </p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> org.mybatis.example;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogMapper</span> </span>&#123;<br>  <span class="hljs-meta">@Select</span>(<span class="hljs-string">&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;</span>)<br>  <span class="hljs-function">Blog <span class="hljs-title">selectBlog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>​         使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java  注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。       </p>
<p>​         选择何种方式来配置映射，以及认为是否应该要统一映射语句定义的形式，完全取决于你和你的团队。         换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和 XML         的语句映射方式间自由移植和切换。       </p>
<h4 id="4-CRUD"><a href="#4-CRUD" class="headerlink" title="4.CRUD"></a>4.CRUD</h4><p>注：查询是不需要提交事务的！涉及数据库变动的才需要！</p>
<p>我们可以在工具类的时候实现自动提交事务！</p>
<p>但是开发测试时，推荐设置为非自动提交，可以防止提交错误的东西进数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SqlSession 完全包含了面向数据库执行SQL命令的所有方法public static SqlSession getSqlSession()&#123;</span><br>	<span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>&#125;<br></code></pre></td></tr></table></figure>



<p>测试类：</p>
<p>此处省略。</p>
<p>方法如4.1代码所示。</p>
<p><strong>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</strong></p>
<h5 id="关于-Param-注解："><a href="#关于-Param-注解：" class="headerlink" title="关于@Param()注解："></a>关于@Param()注解：</h5><ul>
<li>基本类型的参数是String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li>
<li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名 ！</li>
</ul>
<h5 id="这里说一下-和-的区别："><a href="#这里说一下-和-的区别：" class="headerlink" title="这里说一下#{}和${}的区别："></a>这里说一下#{}和${}的区别：</h5><ul>
<li>#{}是预编译处理，${}是字符串替换。</li>
<li>Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的 set 方法来赋值；</li>
<li>Mybatis 在处理${}时，就是把${}替换成变量的值。</li>
<li>使用#{}可以有效的防止 SQL 注入，提高系统安全性。</li>
</ul>
<p>Mybatis排序时使用order by动态参数时，使用${}，而不是#{}</p>
<h4 id="5-Lombok"><a href="#5-Lombok" class="headerlink" title="5.Lombok"></a>5.Lombok</h4><ul>
<li>是一个Java库</li>
<li>也是个插件</li>
<li>也是个工具</li>
<li>再也不用写get,set等方法了，只需要在类上加注解就可以</li>
<li>一个可以偷懒的，解决你手动写get和set方法的第三方插件</li>
</ul>
<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件！</p>
</li>
<li><p>导入jar包（<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok">去Maven仓库搜索</a>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这是我写笔记的时候的最新版，追求稳定就用使用人数多的 --&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>在实体类上加注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-comment">//无参构造，get和set，tostring,equals和hashcode方法</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">//所有构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">//构建了有参，无参会隐藏，必须显式无参构造</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>Lombok可以使用的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span>  -----&gt;Get和Set方法，可以放在类上（构建所有），也可以放在字段上（指定单个构建）<br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span>   -----&gt;ToString方法<br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>  -----&gt;所有构造方法<br><span class="hljs-meta">@RequiredArgsConstructor</span>  -----&gt;有参构造方法<br><span class="hljs-meta">@NoArgsConstructor</span>  -----&gt;无参构造方法<br><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span>, <span class="hljs-meta">@CustomLog</span><br><span class="hljs-meta">@Data</span>  -----&gt;无参构造，get和set，tostring,equals和hashcode方法<br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@With</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@val</span><br><span class="hljs-meta">@var</span><br>experimental <span class="hljs-meta">@var</span><br><span class="hljs-meta">@UtilityClass</span><br></code></pre></td></tr></table></figure>

<p><code>注：@RequiredArgsConstructor</code>在类上使用，这个注解可以生成带参或者不带参的构造方法。<br>若带参数，只能是类中所有带有<code>@NonNull</code>注解的和以<code>final</code>修饰的未经初始化的字段，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">//但这里爆红未初始化变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>所以平常还是直接这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-comment">//无参构造，get和set，tostring,equals和hashcode方法</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">//所有构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">//构建了有参，无参会隐藏，必须显式无参构造</span><br><span class="hljs-comment">//有参构造如果要重载的话，还是要自己写代码的</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>注：此工具看工作环境，用不用看自己，适合开发的才是王道。</p>
</li>
</ol>
<h2 id="五、关系映射"><a href="#五、关系映射" class="headerlink" title="五、关系映射"></a>五、关系映射</h2><h3 id="1-多对一关系"><a href="#1-多对一关系" class="headerlink" title="1.多对一关系"></a>1.多对一关系</h3><p>多对一：多个学生对应一个老师—–&gt;关联</p>
<p>一对多：一个老师教一群学生———&gt;集合</p>
<hr>
<p>注意：</p>
<p>​		多表关联一般会用到外键，外键本身是为了实现强一致性，所以如果需要正确性&gt;性能的话，还是建议使用外键，它可以让我们在数据库的层面保证数据的完整性和一致性。</p>
<p>​		当然不用外键，你也可以在业务层进行实现。不过，这样做也同样存在一定的风险，因为这样，就会让业务逻辑会与数据具备一定的耦合性。也就是业务逻辑和数据必须同时修改。而且在工作中，业务层可能会经常发生变化。</p>
<p>​		当然，很多互联网的公司，尤其是超大型的数据应用场景，大量的插入，更新和删除在外键的约束下会降低性能，同时数据库在水平拆分和分库的情况下，数据库端也做不到执行外键约束。另外，在高并发的情况下，外键的存在也会造成额外的开销。因为每次更新数据，都需要检查另外一张表的数据，也容易造成死锁。<br>所以在这种情况下，尤其是大型项目中后期，可以采用业务层来实现，取消外键提高效率。</p>
<p>​		不过在SQL学习之初，包括在系统最初设计的时候，还是建议你采用规范的数据库设计，也就是采用外键来对数据表进行约束。因为这样可以建立一个强一致性，可靠性高的数据库结构，也不需要在业务层来实现过多的检查。<br>​		当然在项目后期，业务量增大的情况下，你需要更多考虑到数据库性能问题，可以取消外键的约束，转移到业务层来实现。而且在大型互联网项目中，考虑到分库分表的情况，也会降低外键的使用。</p>
<p>​		不过在SQL学习，以及项目早期，还是建议你使用外键。在项目后期，你可以分析有哪些外键造成了过多的性能消耗。一般遵循2&#x2F;8原则，会有20%的外键造成80%的资源效率，你可以只把这20%的外键进行开放，采用业务层逻辑来进行实现，当然你需要保证业务层的实现没有错误。不同阶段，考虑的问题不同。当用户和业务量增大的时候，对于大型互联网应用，也会通过减少外键的使用，来减低死锁发生的概率，提高并发处理能力。</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">/* 多对一训练数据库准备 */<br>/* 数据库首次执行 */<br>USE mydb<br><br>/* 数据库第二次执行 */<br>/* 创建teacher表 */<br>CREATE TABLE `teacher`(<br>	`id` INT(10) NOT NULL,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    PRIMARY KEY (`id`)<br>)ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>/* 数据库第三次执行 */<br>/* 往teacher表插入数据 */<br>INSERT INTO teacher(`id`,`name`) VALUES (1,&#x27;艾莎&#x27;);<br><br>/* 数据库第四次执行 */<br>/* 创建student表 */<br>CREATE TABLE `student`(<br>	`id` INT(10) NOT NULL,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    `tid` INT(10) DEFAULT NULL,<br>    PRIMARY KEY (`id`),<br>    KEY `fktid` (`tid`),<br>    CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`)<br>)ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>/* 数据库第五次执行 */<br>/* 往Student表插入数据 */<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (1,&#x27;张三&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (2,&#x27;李四&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (3,&#x27;王五&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (4,&#x27;赵六&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (5,&#x27;孙七&#x27;,1);<br></code></pre></td></tr></table></figure>

<h4 id="（1）测试环境搭建"><a href="#（1）测试环境搭建" class="headerlink" title="（1）测试环境搭建"></a>（1）测试环境搭建</h4><p>1.导入lombok（可选，自己喜欢就用）</p>
<p>2.新建实体类 Teacher,Student</p>
<p>3.建立Mapper 接口</p>
<p>4.建立Mapper.xml文件</p>
<p>5.在核心配置文件中绑定注册我们的Mapper接口或文件！【方式很多，随心选】</p>
<p>6.测试查询是否能成功！</p>
<h4 id="（2）按照查询嵌套处理"><a href="#（2）按照查询嵌套处理" class="headerlink" title="（2）按照查询嵌套处理"></a>（2）按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.StudentMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        思路：</span><br><span class="hljs-comment">             1.查询所有学生信息</span><br><span class="hljs-comment">             2.根据查询出来的学生的id，寻找对应的老师</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>        select * from student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--  复杂的属性，我们需要单独处理 对象： association 集合：collection --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="（3）按照结果嵌套处理"><a href="#（3）按照结果嵌套处理" class="headerlink" title="（3）按照结果嵌套处理"></a>（3）按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按照结果嵌套处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>        select  s.id sid,s.name sname,t.name tname<br>        from student s,teacher t<br>        where s.tid = t.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="2-一对多处理"><a href="#2-一对多处理" class="headerlink" title="2.一对多处理"></a>2.一对多处理</h3><p>一个老师拥有多个学生———-&gt;对于老师来说，就是一对多的关系！</p>
<h4 id="（1）测试环境搭建-1"><a href="#（1）测试环境搭建-1" class="headerlink" title="（1）测试环境搭建"></a>（1）测试环境搭建</h4><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; student;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tid;<br>&#125;<br></code></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.Teacher;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TeacherMapper</span> &#123;<br><br>    <span class="hljs-comment">//获取指定老师的学生和老师的信息</span><br>    Teacher <span class="hljs-title function_">getTeacher2</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br><br>    Teacher <span class="hljs-title function_">getTeacher3</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="（2）按照查询嵌套处理-1"><a href="#（2）按照查询嵌套处理-1" class="headerlink" title="（2）按照查询嵌套处理"></a>（2）按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按结果嵌套查询--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>        select s.id sid,s.name sname,t.name tname,t.id tid<br>        from student s,teacher t<br>        where s.tid = t.id and t.id = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--        javatype指定属性的类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h4 id="（3）按照结果嵌套处理-1"><a href="#（3）按照结果嵌套处理-1" class="headerlink" title="（3）按照结果嵌套处理"></a>（3）按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 按照查询嵌套处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher3&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ofType泛型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select * from student where tid = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol>
<li>关联 - association 【多对一】</li>
<li>集合 - collection 【一对多】</li>
<li>JavaType &amp; oftype<ol>
<li>javaType 用来指定实体类中属性的类型</li>
<li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型。</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li>
</ul>
<h2 id="六、动态SQL"><a href="#六、动态SQL" class="headerlink" title="六、动态SQL"></a>六、动态SQL</h2><p>简单讲，动态SQL就是指根据不同的条件生成不同的SQL语句。</p>
<h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1. 搭建环境"></a>1. 搭建环境</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog`(<br>	`id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>    `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>    `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `views` <span class="hljs-type">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure>

<h3 id="2-创建一个基础工程"><a href="#2-创建一个基础工程" class="headerlink" title="2. 创建一个基础工程"></a>2. 创建一个基础工程</h3><ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><br>&#125;<br></code></pre></td></tr></table></figure>


</li>
<li><p>编写实体类对应的Mapper接口和Mapper.xml文件</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.Blog;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlogMapper</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBlog</span><span class="hljs-params">(Blog blog)</span>;<br>    <br>    <span class="hljs-comment">//SQL动态查询IF</span><br>    List&lt;Blog&gt; <span class="hljs-title function_">queryBlogIF</span><span class="hljs-params">(Map map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.BlogMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>        insert into blog(id,title,author,create_time,views)<br>        values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--    动态SQL查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  where 1=1 必定能查出东西，就是参数为空的时候查所有数据 --&gt;</span><br>        select * from blog where 1=1<br>        <span class="hljs-comment">&lt;!--  如果title不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  如果author不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zmq.dao.BlogMapper;<br><span class="hljs-keyword">import</span> com.zmq.pojo.Blog;<br><span class="hljs-keyword">import</span> com.zmq.utils.IDUtils;<br><span class="hljs-keyword">import</span> com.zmq.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mytest</span> &#123;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blog</span>();<br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记&quot;</span>);<br>        blog.setAuthor(<span class="hljs-string">&quot;星空&quot;</span>);<br>        blog.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        blog.setViews(<span class="hljs-number">233</span>);<br><br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记2&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记3&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记4&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;幻境&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Mybatis学习笔记&quot;</span>);<br>        <span class="hljs-comment">//这里的map空值也能查出东西，不是空值就会判断进行SQL拼接</span><br>        List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);<br>        <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>            System.out.println(blog);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="3-元素种类"><a href="#3-元素种类" class="headerlink" title="3.元素种类"></a>3.元素种类</h3><h4 id="（1）IF"><a href="#（1）IF" class="headerlink" title="（1）IF"></a>（1）IF</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    动态SQL查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  where 1=1 必定能查出东西，就是参数为空的时候查所有数据 --&gt;</span><br>        select * from blog where 1=1<br>        <span class="hljs-comment">&lt;!--  如果title不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  如果author不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h4 id="（2）Choose-when，otherwise"><a href="#（2）Choose-when，otherwise" class="headerlink" title="（2）Choose(when，otherwise)"></a>（2）Choose(when，otherwise)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                and title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>



<h4 id="（3）trim-where，set"><a href="#（3）trim-where，set" class="headerlink" title="（3）trim(where，set)"></a>（3）trim(where，set)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--  解决Where查询只有第二个有参数时直接拼接and的错误问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>注：<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</p>
<h5 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h5><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<p>1.使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>       and title = #&#123;title&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>       and author = #&#123;author&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>2.在需要的地方使用include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>最好基于单表来定义SQL片段。（适合简单的查询复用）</li>
<li>不要存在where标签</li>
</ul>
<h4 id="（4）Forsech"><a href="#（4）Forsech" class="headerlink" title="（4）Forsech"></a>（4）Forsech</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">    select * from blog where 1=1 and (id =1 or id=2 or id = 3) </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    我们现在传递一个万能的map，在map中可以存在一个集合！</span><br><span class="hljs-comment"> --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queyBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>        select * from blog<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>                id = #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    ArrayList&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    ids.add(<span class="hljs-number">1</span>);<br>    ids.add(<span class="hljs-number">2</span>);<br>    ids.add(<span class="hljs-number">3</span>);<br>    map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);<br><br>    List&lt;Blog&gt; blogList = mapper.queyBlogForeach(map);<br><br>    <span class="hljs-keyword">for</span> (Blog blog : blogList) &#123;<br>        System.out.println(blog);<br>    &#125;<br><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure>



<p>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码。</p>
<p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式去排列组合就好了。</p>
<p>建议：</p>
<p>先在MySQL中写出完整的SQL再去对应的去修改成为我们的动态SQL实现通用即可！</p>
<h2 id="七、缓存（了解）"><a href="#七、缓存（了解）" class="headerlink" title="七、缓存（了解）"></a>七、缓存（了解）</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>查询：连接数据库，耗资源！</p>
<p>一次查询的结果，给他暂存在一个可以直接取到的地方！–&gt;内存：缓存</p>
<p>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了。</p>
</blockquote>
<p>(1) 什么是缓存【Cache】?</p>
<p>存在内存中的临时数据。</p>
<p>将用户经常查询的数据放在缓存中，用户去查询数据就不用从磁盘上直接查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p>
<p>(2) 为什么使用缓存?</p>
<p>减少和数据库的交互次数，减小系统开销，提高系统效率。</p>
<p>(3) 什么样的数据能使用缓存?</p>
<p>经常查询并且不经常改变的数据（经常读取而不是写入的）</p>
<h3 id="2-MyBatis缓存"><a href="#2-MyBatis缓存" class="headerlink" title="2.MyBatis缓存"></a>2.MyBatis缓存</h3><p>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便地定制和配置缓存。缓存可以极大地提升查询效率。</p>
<p>MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存</p>
<ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
<h3 id="3-一级缓存"><a href="#3-一级缓存" class="headerlink" title="3.一级缓存"></a>3.一级缓存</h3><p>一级缓存也叫本地缓存：SqlSession</p>
<p>与数据库同一次会话期间查询到的数据会放在本地缓存中。</p>
<p>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserLike</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取sqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-comment">//sqlSession.getMapper(UserDao.class);后ALT+回车生成赋给的对象UserDao</span><br>    <span class="hljs-comment">//这里要拿SQL，从Dao包里拿，面向接口编程，可以直接从UserDao接口里拿</span><br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>    <span class="hljs-comment">//执行方法</span><br>    List&lt;User&gt; userList = userDao.getUserLike(<span class="hljs-string">&quot;张&quot;</span>);<br><br>    <span class="hljs-comment">//增强For循环输出</span><br>    <span class="hljs-keyword">for</span>(User user:userList)&#123;<br>        System.out.println(user);<br>    &#125;<br>    List&lt;User&gt; user = userDao.getUserLike(<span class="hljs-string">&quot;张&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (User user1 : user) &#123;<br>        System.out.println(user1);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭sqlSession</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>控制台显示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Opening JDBC Connection<br>Created connection <span class="hljs-number">1075738627.</span><br>Setting autocommit to <span class="hljs-literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>==&gt;  Preparing: select * from mydb.user where name like <span class="hljs-string">&quot;%&quot;</span>?<span class="hljs-string">&quot;%&quot;</span> <br>==&gt; Parameters: 张(String)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: <span class="hljs-number">4</span>, 张三, <span class="hljs-number">123456</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Resetting autocommit to <span class="hljs-literal">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>Returned connection <span class="hljs-number">1075738627</span> to pool.<br></code></pre></td></tr></table></figure>

<p>缓存失效的情况：</p>
<h3 id="4-二级缓存"><a href="#4-二级缓存" class="headerlink" title="4.二级缓存"></a>4.二级缓存</h3><ol>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制：</li>
</ol>
<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存在二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 显式的开启全局缓存  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在当前Mapper.xml中使用二级缓存   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> /&gt;</span><br></code></pre></td></tr></table></figure></li>
</ol>
<p>也可以自定义参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在当前Mapper.xml中使用二级缓存   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p>
<p>可用的清除策略有：</p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li>
</ul>
<p>默认的清除策略是 LRU。</p>
<p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p>
<p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p>
<p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p>
<p><strong>提示</strong> 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache&#x3D;true 的 insert&#x2F;delete&#x2F;update 语句时，缓存会获得更新。</p>
<ol start="3">
<li>测试</li>
</ol>
<p>1.问题：我们需要将实体类序列化！否则就会报错！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Caused by: java.io.NotSerializableException: com.zmq.pojo.Blog<br></code></pre></td></tr></table></figure>

<p>解决：实现序列化接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>或者加上readOnly&#x3D;”true”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>注：<cache/>中的readOnly默认为false，而可读写的缓存会通过序列化返回缓存对象的拷贝，此时需要实体类（这里是Blog）实现Serializable接口或者配置readOnly&#x3D;true</p>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中！</li>
</ul>
<h3 id="5-缓存原理"><a href="#5-缓存原理" class="headerlink" title="5.缓存原理"></a>5.缓存原理</h3><p>SqlSession请求—&gt;数据库—–&gt;一级缓存——二级缓存</p>
<p>用户查询先走二级缓存，二级缓存没有再走一级缓存，再没有就去数据库找结果。</p>
<h3 id="6-自定义缓存—–-gt-以ehcache为例"><a href="#6-自定义缓存—–-gt-以ehcache为例" class="headerlink" title="6.自定义缓存—–&gt;以ehcache为例"></a>6.自定义缓存—–&gt;以ehcache为例</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,</p>
<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>在Mapper中指定使用ehcache缓存实现！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>配置文件 —&gt;   ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;259200&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>公司里一般用Redis数据库来做缓存。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>NTP时间同步服务安装指南（Linux）</title>
    <url>/2023/10/02/NTP/</url>
    <content><![CDATA[<blockquote>
<p>Linux系统每次启动时间都不正确，若每次手动修改则很不便，安装NTP时间同步服务即可自动同步时间。</p>
</blockquote>
<span id="more"></span>

<h1 id="Linux安装NTP时间同步服务"><a href="#Linux安装NTP时间同步服务" class="headerlink" title="Linux安装NTP时间同步服务"></a>Linux安装NTP时间同步服务</h1><h3 id="安装命令："><a href="#安装命令：" class="headerlink" title="安装命令："></a>安装命令：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum -y install ntp<br></code></pre></td></tr></table></figure>

<h3 id="启动NTP服务："><a href="#启动NTP服务：" class="headerlink" title="启动NTP服务："></a>启动NTP服务：</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start ntpd<br><span class="hljs-params">system</span>ctl enable ntpd<br></code></pre></td></tr></table></figure>

<h3 id="查看NTP服务运行状态："><a href="#查看NTP服务运行状态：" class="headerlink" title="查看NTP服务运行状态："></a>查看NTP服务运行状态：</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status ntpd</span><br></code></pre></td></tr></table></figure>

<h3 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h3><p>我这里没有安装<code>vim</code>，所以用<code>vi</code>，<code>vim</code>也一样只是换个名。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>ntp.conf<br></code></pre></td></tr></table></figure>

<p>我这里有个问题，找不到配置文件，但是用文件查找命令发现就在那里，也许是被隐藏了吧。<br>ntp配置文件查找命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sudo <span class="hljs-built_in">find</span> / -name ntp.conf<br></code></pre></td></tr></table></figure>


<p>修改内容：新增阿里云时间服务器</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">server ntp<span class="hljs-selector-class">.aliyun</span><span class="hljs-selector-class">.com</span> iburst<br></code></pre></td></tr></table></figure>

<h3 id="查看配置文件中设置的NTP授时服务器"><a href="#查看配置文件中设置的NTP授时服务器" class="headerlink" title="查看配置文件中设置的NTP授时服务器"></a>查看配置文件中设置的NTP授时服务器</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> server <span class="hljs-regexp">/etc/</span>ntp.conf <br></code></pre></td></tr></table></figure>
<p>终端显示：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"># Use <span class="hljs-built_in">public</span> servers <span class="hljs-keyword">from</span> the pool.ntp.org project.<br><span class="hljs-keyword">server</span> <span class="hljs-number">0.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> <span class="hljs-number">1.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> <span class="hljs-number">2.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> <span class="hljs-number">3.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> ntp.aliyun.com iburst<br><span class="hljs-meta">#broadcast 192.168.1.255 autokey        # broadcast server</span><br><span class="hljs-meta">#broadcast 224.0.1.1 autokey            # multicast server</span><br><span class="hljs-meta">#manycastserver 239.255.254.254         # manycast server</span><br></code></pre></td></tr></table></figure>


<h3 id="重启NTP服务："><a href="#重启NTP服务：" class="headerlink" title="重启NTP服务："></a>重启NTP服务：</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart ntpd</span><br></code></pre></td></tr></table></figure>

<h3 id="查看同步状态："><a href="#查看同步状态：" class="headerlink" title="查看同步状态："></a>查看同步状态：</h3><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">ntpq -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure>

<p>这样再次重启，时间也不会乱了。</p>
<hr>
<p>详细安装信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install ntp<br>已加载插件：fastestmirror<br>Determining fastest mirrors<br> * base: ftp.sjtu.edu.cn<br> * extras: mirrors.bfsu.edu.cn<br> * updates: mirrors.bfsu.edu.cn<br>base                                                                                                                                                            | 3.6 kB  00:00:00     <br>extras                                                                                                                                                          | 2.9 kB  00:00:00     <br>updates                                                                                                                                                         | 2.9 kB  00:00:00     <br>updates/7/x86_64/primary_db                                                                                                                                     |  23 MB  00:00:02     <br>软件包 ntp-4.2.6p5-29.el7.centos.2.x86_64 已安装并且是最新版本<br>无须任何处理<br>[root@localhost ~]# systemctl start  ntpd<br>[root@localhost ~]# systemctl enable  ntpd<br>Created symlink from /etc/systemd/system/multi-user.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.<br>[root@localhost ~]# systemctl status ntpd<br>● ntpd.service - Network Time Service<br>   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; enabled; vendor preset: disabled)<br>   Active: active (running) since 一 2023-10-02 09:06:57 CST; 29s ago<br> Main PID: 2705 (ntpd)<br>   CGroup: /system.slice/ntpd.service<br>           └─2705 /usr/sbin/ntpd -u ntp:ntp -g<br><br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen and drop on 1 v6wildcard :: UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 2 lo 127.0.0.1 UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 3 ens33 192.168.175.131 UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 4 lo ::1 UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 5 ens33 fe80::62:fd49:3a6c:994c UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listening on routing socket on fd #22 for interface updates<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: 0.0.0.0 c016 06 restart<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: 0.0.0.0 c012 02 freq_set kernel 0.000 PPM<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: 0.0.0.0 c011 01 freq_not_set<br>10月 02 09:07:04 localhost.localdomain ntpd[2705]: 0.0.0.0 c614 04 freq_mode<br>[root@localhost ~]# <br>[root@localhost ~]# vi /etc/ntp.conf<br>[root@localhost ~]# grep server /etc/ntp.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span><br>server 0.centos.pool.ntp.org iburst<br>server 1.centos.pool.ntp.org iburst<br>server 2.centos.pool.ntp.org iburst<br>server 3.centos.pool.ntp.org iburst<br>server ntp.aliyun.com iburst<br><span class="hljs-meta prompt_">#</span><span class="language-bash">broadcast 192.168.1.255 autokey        <span class="hljs-comment"># broadcast server</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">broadcast 224.0.1.1 autokey            <span class="hljs-comment"># multicast server</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">manycastserver 239.255.254.254         <span class="hljs-comment"># manycast server</span></span><br>[root@localhost ~]# systemctl restart ntpd<br>[root@localhost ~]# ntpq -p<br>     remote           refid      st t when poll reach   delay   offset  jitter<br>==============================================================================<br>*ntp8.flashdance 194.58.202.20    2 u    1   64    1  350.605   69.011  11.779<br> 111.230.189.174 100.122.36.196   2 u    2   64    1   64.256   38.951   7.296<br> a.chl.la        131.188.3.222    2 u    1   64    1  215.988   15.178  12.127<br> 203.107.6.88    100.107.25.114   2 u    -   64    1   26.506   39.602   7.992<br>[root@localhost ~]# <br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题日常使用</title>
    <url>/2022/11/23/Next-use/</url>
    <content><![CDATA[<blockquote>
<p>Hexo-Next主题日常使用操作指令</p>
</blockquote>
<span id="more"></span>
<html>
<div class="box1">
    <span class="leftline"></span>
    <span class="text">正文部分</span>
    <span class="rightline"></span>
</div>
</html>




<h1 id="Next主题日常使用"><a href="#Next主题日常使用" class="headerlink" title="Next主题日常使用"></a>Next主题日常使用</h1><h2 id="一、分类和文章"><a href="#一、分类和文章" class="headerlink" title="一、分类和文章"></a>一、分类和文章</h2><h3 id="1、创建分类页面"><a href="#1、创建分类页面" class="headerlink" title="1、创建分类页面"></a>1、创建分类页面</h3><html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new page categories<br></code></pre></td></tr></table></figure>

<p>修改categories文件夹下的 index.md</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">---<br><span class="hljs-attr">title</span>: 文章分类<br><span class="hljs-attr">date</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span> <span class="hljs-number">01</span>:<span class="hljs-number">03</span>:<span class="hljs-number">20</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;categories&quot;</span><br>---<br></code></pre></td></tr></table></figure>



<h3 id="2、创建标签页面"><a href="#2、创建标签页面" class="headerlink" title="2、创建标签页面"></a>2、创建标签页面</h3><html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new page tags<br></code></pre></td></tr></table></figure>

<p>修改tags文件夹下的 index.md</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">---<br>title: 文章标签<br><span class="hljs-built_in">date</span>: 2022-11-23 01:03:20<br><span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;tags&quot;</span><br>---<br></code></pre></td></tr></table></figure>



<h3 id="3、创建关于页面"><a href="#3、创建关于页面" class="headerlink" title="3、创建关于页面"></a>3、创建关于页面</h3><html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure>

<p>修改about文件夹下的 index.md</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">---<br>title: 关于<br><span class="hljs-built_in">date</span>: 2022-11-23 01:03:20<br><span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;about&quot;</span><br>---<br></code></pre></td></tr></table></figure>

<h3 id="4、创建文章"><a href="#4、创建文章" class="headerlink" title="4、创建文章"></a>4、创建文章</h3><html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new 新文章<br></code></pre></td></tr></table></figure>

<p>在_post文件夹下就出现了新文章了</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">---<br>title: 关于<br><span class="hljs-built_in">date</span>: 2022-11-23 01:03:20<br><span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;about&quot;</span><br>---<br>我是摘要内容.<br>&lt;!-- more --&gt;<br>我是正文内容...<br><br>132123131321<br></code></pre></td></tr></table></figure>



<h2 id="二、运行Hexo"><a href="#二、运行Hexo" class="headerlink" title="二、运行Hexo"></a>二、运行Hexo</h2><p>安装服务器：Hexo 3.0 把服务器独立成了个别模块，我们必须得在站点文件夹根目录下安装之后才能使用。<br>在命令行中打开我们的工作站文件夹，键入以下命令，以将 hexo-server 安装到我们的工作站文件夹：</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install hexo-server --save<br></code></pre></td></tr></table></figure>

<p>cd进网站根目录，</p>
<p>清除缓存文件</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure>

<p>生成的静态网页以及相关资源</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure>

<p>启动服务器</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure>

<p>指定端口启动服务器</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo server -p 5000<br></code></pre></td></tr></table></figure>



<h2 id="三、利用pm2让Hexo后台运行"><a href="#三、利用pm2让Hexo后台运行" class="headerlink" title="三、利用pm2让Hexo后台运行"></a>三、利用<code>pm2</code>让Hexo后台运行</h2><p>1、安装：</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install -g pm2<br></code></pre></td></tr></table></figure>

<p>2、<strong>编写一个执行脚本 —— 在博客根目录下创建一个文件 run.js</strong></p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo server -p 指定端口&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(error)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>

<p><strong>3、使用pm2运行脚本 run.js</strong></p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pm2 start run.js<br></code></pre></td></tr></table></figure>

<p>停止进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pm2 stop pm的保护进程<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure>

<h2 id="四、PM2相关命令"><a href="#四、PM2相关命令" class="headerlink" title="四、PM2相关命令"></a>四、PM2相关命令</h2><p>1.安装pm2</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ npm install pm2 -g<br></code></pre></td></tr></table></figure>

<p>2.更新pm2</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 update<br></code></pre></td></tr></table></figure>

<p>3.启动进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 start bin/www pm2 start app.js<br></code></pre></td></tr></table></figure>

<p>4.重命名进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 start app.js --name pro1<br></code></pre></td></tr></table></figure>

<p>5.监控进程（当文件改变的时候，重启一个应用）</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 start app.js --watch<br></code></pre></td></tr></table></figure>

<p>6.结束指定pm2进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 stop www<br></code></pre></td></tr></table></figure>

<p>7.结束所有pm2进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 stop all<br></code></pre></td></tr></table></figure>

<p>8.删除指定pm2进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 delete www<br></code></pre></td></tr></table></figure>

<p>9.删除所有pm2进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 delete all<br></code></pre></td></tr></table></figure>

<p>10.列出所有用pm2启动的进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 list<br></code></pre></td></tr></table></figure>

<p>11.查看某个pm2进程具体情况</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 monit<br></code></pre></td></tr></table></figure>

<p>12.查看pm2所有进程占用的cpu和内存</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 show www<br></code></pre></td></tr></table></figure>

<p>13.显示指定pm2进程所有的信息</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 show www<br></code></pre></td></tr></table></figure>

<p>14.查看pm2所有进程的日志</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 logs<br></code></pre></td></tr></table></figure>

<p>15.查看pm2指定进程的日志</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 logs www<br></code></pre></td></tr></table></figure>

<p>16.json化日志</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 logs --json<br></code></pre></td></tr></table></figure>

<p>17.重新启动指定pm2进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 restart www<br></code></pre></td></tr></table></figure>

<p>18.重新启动所有pm2进程</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ pm2 restart all<br></code></pre></td></tr></table></figure>

<h2 id="五、用git把项目托管到github"><a href="#五、用git把项目托管到github" class="headerlink" title="五、用git把项目托管到github"></a>五、用git把项目托管到github</h2><p>打开github并登录:<br>点开个人信息—-&gt; your repositories(你的存储库)—-&gt; 点击新建(新建一个xxxxx.github.io)<br>注意 这里xxxxx的仓库名必须和你的github账号名称相同,这里github默认只给这个名称的存储库提供免费域名</p>
<p>OK,存储库建立完成之后,需要将服务器中之前安装的git让其生成一个SSH密钥<br>(git和github仓库是默认通过这个密钥进行用户权限身份识别的)<br>在命令行中输入:</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>


<p>&#x2F; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。&#x2F;</p>
<p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p>
<p>##输入以下两条检验是否输入正确:</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure>

<p>生成密钥指令 :</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure>

<p>然后一直回车，直到出现你能输入命令为止</p>
<p>这时能看到存放位置：<code>root/_ssh/rsa</code></p>
<p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。<br>把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br>进入目录，打开公钥文件，复制内容</p>
<p>输入命令行:  </p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim id_rsa.pub <br></code></pre></td></tr></table></figure>

<p>然后切换到本机的github网页,在github网页用户信息 —&gt; settings —– &gt; SSH &amp; GPJ密钥选项 —-&gt;<br>点击New SSH key把你的id_rsa.pub里面的信息复制进去。</p>
<p>在终端查看连接是否成功</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure>

<p>将hexo部署到GitHub</p>
<p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上</p>
<p>进入hexo部署的根目录修改<code> _config.yml</code>。</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/YourgithubName/YourgithubName.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure>



<p>###这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>



<p>###然后执行:</p>
<p>&#x2F;&#x2F;清除缓存,建议更新代码前都执行下此操作。</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure>

<p>生成静态文章，可以用 hexo g缩写</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure>

<p>部署文章，可以用hexo d缩写</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure>

<p>然后会提示输入github登录名和密码</p>
<p>输入成功后就开始部署了，但是我在这里出错了<code>err: Error: Spawn failed</code></p>
<p>然后把repo地址从Http改为SSH的方式</p>
<html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">deploy:<br><span class="hljs-built_in">type</span>: git<br>repo: git@github.com:yourname/yourname.github.io.git<br>branch: master<br></code></pre></td></tr></table></figure>

<p>然后再清除缓存，静态文章，部署文章，就成功了。</p>
<p>部署成功后你就可以在<a href="http://yourname.github.io中看到你的个人博客了…(可能需要等待一段时间)">http://yourname.github.io中看到你的个人博客了…(可能需要等待一段时间)</a></p>
<html>
<div class="box1">
    <span class="leftline"></span>
    <span class="text">更多内容请在评论区留言讨论</span>
    <span class="rightline"></span>
</div>
</html>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>实现中间有正文内容的水平线分割线</title>
    <url>/2022/11/24/Post-style/</url>
    <content><![CDATA[<blockquote>
<p>用html语法实现文章前提示中间有正文内容的水平分隔线。</p>
</blockquote>
<span id="more"></span>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><html>
<div class="warpper">
    <div class="mac b1"></div>
    <div class="mac b2"></div>
    <div class="mac b3"></div>
</div>
</html>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">40px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>:flex;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>:space-between;</span><br><span class="language-css">    <span class="hljs-attribute">align-items</span>:center;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#00000000</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.leftline</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">2px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#257efa99</span>;</span><br><span class="language-css">    <span class="hljs-attribute">flex-grow</span>:<span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.rightline</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">2px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#257efa99</span>;</span><br><span class="language-css">    <span class="hljs-attribute">flex-grow</span>:<span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.text</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>:<span class="hljs-number">#257efa</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;leftline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>正文部分<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rightline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>注：在markdown前添加即可</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>交换排序之快速排序（Quick Sort）</title>
    <url>/2023/09/29/QuickSort/</url>
    <content><![CDATA[<blockquote>
<p>快速排序的介绍，包括快速排序的特点、原理和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是对冒泡排序算法的一种改进。</p>
<h2 id="1、过程"><a href="#1、过程" class="headerlink" title="1、过程"></a>1、过程</h2><p>设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它左边，所有比它大的数都放到它右边，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。</p>
<h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><ul>
<li>记录非顺次的移动导致排序方法是不稳定的</li>
<li>排序过程中需要定位表的下界和上界，所以适合用于顺序结构，很难用于链式结构</li>
<li>当n较大时，在平均情况下快速排序是所有内部排序算法中速度最快的一种，所以其适合初始记录无序、n较大时的情况</li>
</ul>
<h2 id="3、完整代码实现"><a href="#3、完整代码实现" class="headerlink" title="3、完整代码实现"></a>3、完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//将比轴心大的数据右移，比轴心小的数据左移，并返回轴心下标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取轴心值</span><br>    <span class="hljs-type">int</span> key = arr[start];<br>    <span class="hljs-keyword">while</span> (start&lt;end)<br>    &#123;<br>        <span class="hljs-comment">//轴心右边比轴心小的赋值给轴心下标，end末尾下标-1</span><br>        <span class="hljs-keyword">while</span> (start&lt;end&amp;&amp;arr[end]&gt;=key)<br>        &#123;<br>            --end;<br>        &#125;<br>        arr[start] = arr[end];<br>        <span class="hljs-comment">//轴心左边比轴心大的与轴心替换</span><br>        <span class="hljs-keyword">while</span> (start&lt;end &amp;&amp; arr[start]&lt;=key)<br>        &#123;<br>            ++start;<br>        &#125;<br>        arr[end] = arr[start];<br>    &#125;<br>    arr[start] = key;<span class="hljs-comment">//填充轴心值</span><br>    <span class="hljs-keyword">return</span> start;<br>&#125;<br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (start&lt;end)<br>    &#123;<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">Calculate</span>(arr,start,end);<span class="hljs-comment">//获取轴心数据下标</span><br>        <span class="hljs-built_in">QuickSort</span>(arr,start,index<span class="hljs-number">-1</span>);<span class="hljs-comment">//排序轴心左侧的数据</span><br>        <span class="hljs-built_in">QuickSort</span>(arr,index+<span class="hljs-number">1</span>,end);<span class="hljs-comment">//排序轴心右侧的数据</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//数组打印</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;&#123;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = start; k &lt; len; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k == len - <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot; &#125;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot;，&quot;</span>;<br>        &#125;<br><br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">8</span>;<br>    <span class="hljs-built_in">QuickSort</span>(arr, <span class="hljs-number">0</span>,len<span class="hljs-number">-1</span>);    <br>    <span class="hljs-built_in">printArr</span>(arr, len);<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="快速排序动画演示"><a href="#快速排序动画演示" class="headerlink" title="快速排序动画演示"></a>快速排序动画演示</h1><iframe src="//player.bilibili.com/player.html?aid=945266697&bvid=BV1rW4y1x7Kh&cid=897065233&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="477px"> </iframe>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基数排序（Radix Sort）</title>
    <url>/2023/10/10/RadixSort/</url>
    <content><![CDATA[<blockquote>
<p>基数排序的原理、特点和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="基数排序（Radix-Sort）"><a href="#基数排序（Radix-Sort）" class="headerlink" title="基数排序（Radix Sort）"></a>基数排序（Radix Sort）</h1><h2 id="基数排序特点"><a href="#基数排序特点" class="headerlink" title="基数排序特点"></a>基数排序特点</h2><ul>
<li>是稳定排序</li>
<li>可用于链式结构，也可用于顺序结构</li>
<li>时间复杂度可以突破基于关键字比较一类方法的下界O(n log2 n)，达到O(n)</li>
<li>基数排序使用条件有严苛的要求：需要知道各级关键字的主次关系和各级关键字的主次范围</li>
</ul>
<h2 id="基数排序过程-原理"><a href="#基数排序过程-原理" class="headerlink" title="基数排序过程(原理)"></a>基数排序过程(原理)</h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><ul>
<li>将整个关键字拆分为 d 位（或 “ 组 ”）</li>
<li>按照各个 关键字位 权重递增的次序（如：个、十、百），做 d 趟 <code>分配</code> 和 <code>收集</code>，若当前处理的关键字位可能取得<code>r</code>个值，则需要建立<code>r</code>个队列</li>
<li>分配：顺序扫描各个元素，根据当前处理的关键字位，将元素插入相应队列。一趟分配耗时O(n)</li>
<li>收集：把各个队列中的结点依次出队并链接。一趟收集耗时O(r)</li>
</ul>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><ul>
<li>空间复杂度：O(r)</li>
<li>时间复杂度：O(d(n+r))</li>
<li>稳定性：稳</li>
</ul>
<h3 id="擅长处理"><a href="#擅长处理" class="headerlink" title="擅长处理"></a>擅长处理</h3><ol>
<li>数据元素的关键字可以方便地拆分为 d 组，且 d 较小</li>
<li>每组关键字的取值范围不大，即<code>r</code>较小</li>
<li>数据元素个数<code>n</code>较大</li>
</ol>
<h2 id="完整代码实现（顺序存储）"><a href="#完整代码实现（顺序存储）" class="headerlink" title="完整代码实现（顺序存储）"></a>完整代码实现（顺序存储）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 获取数组中的最大值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> max = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>            max = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-comment">// 对数组按照指定位数进行计数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">countingSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> exp)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个临时数组用于存储排序结果</span><br>    <span class="hljs-type">int</span>* output = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><br>    <span class="hljs-comment">// 用于统计每个数字出现的次数，下标为0到9</span><br>    <span class="hljs-type">int</span> count[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br>    <span class="hljs-comment">// 统计该位上的数字出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        count[(arr[i] / exp) % <span class="hljs-number">10</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算累计频率</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        count[i] += count[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 输出排序后的结果到output数组中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        output[count[(arr[i] / exp) % <span class="hljs-number">10</span>] - <span class="hljs-number">1</span>] = arr[i];<br>        count[(arr[i] / exp) % <span class="hljs-number">10</span>]--;<br>    &#125;<br><br>    <span class="hljs-comment">// 将排序结果拷贝回原数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        arr[i] = output[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 释放动态内存</span><br>    <span class="hljs-keyword">delete</span>[] output;<br>&#125;<br><br><span class="hljs-comment">// 基数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取数组中的最大值</span><br>    <span class="hljs-type">int</span> max = <span class="hljs-built_in">getMax</span>(arr, n);<br><br>    <span class="hljs-comment">// 对每一位进行计数排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> exp = <span class="hljs-number">1</span>; max / exp &gt; <span class="hljs-number">0</span>; exp *= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-built_in">countingSort</span>(arr, n, exp);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">170</span>, <span class="hljs-number">45</span>, <span class="hljs-number">75</span>, <span class="hljs-number">90</span>, <span class="hljs-number">802</span>, <span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">66</span> &#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    cout &lt;&lt; <span class="hljs-string">&quot;原数据: &quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; endl;<br>    <span class="hljs-comment">// 调用基数排序函数</span><br>    <span class="hljs-built_in">radixSort</span>(arr, n);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;基数排序结果: &quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">原数据:<br>170 45 75 90 802 24 2 66<br>基数排序结果:<br>2 24 45 66 75 90 170 802<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure>

<h2 id="完整代码实现（链式存储）"><a href="#完整代码实现（链式存储）" class="headerlink" title="完整代码实现（链式存储）"></a>完整代码实现（链式存储）</h2><p>注：此处选择使用静态链表和静态队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    宏定义</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 9 <span class="hljs-comment">//数组长度</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RADIX 10 <span class="hljs-comment">//关键字基数</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    静态链表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> key;    <span class="hljs-comment">//节点对关键码值</span><br>    <span class="hljs-type">int</span> next;   <span class="hljs-comment">//下一节点在数组中的下标</span><br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    静态队列</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StaticQueue</span>&#123;<br>    <span class="hljs-type">int</span> front;   <span class="hljs-comment">//队头指针</span><br>    <span class="hljs-type">int</span> rear;   <span class="hljs-comment">//队尾指针</span><br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据关键字分配到队列</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Distribute</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span> first, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> r, StaticQueue* queue)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; r; j++)<br>    &#123;<br>        queue[j].front = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> curr = first;<span class="hljs-comment">//取关键字</span><br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-number">-1</span>)<br>    &#123;<span class="hljs-comment">//对整个静态链进行分配</span><br>        <span class="hljs-type">int</span> k = array[curr].key;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; a &lt; i; a++)<br>        &#123;<span class="hljs-comment">//取第i位排序码数字k</span><br>            k = k / r;<br>        &#125;<br>        k = k % r;<br>        <span class="hljs-keyword">if</span> (queue[k].front == <span class="hljs-number">-1</span>)<br>        &#123;<span class="hljs-comment">//把数据分配到第k个桶中</span><br>            queue[k].front = curr;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            array[queue[k].rear].next = curr;<br>        &#125;<br>        queue[k].rear = curr;<br>        curr = array[curr].next;<span class="hljs-comment">//curr移动，继续分配</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    收集：</span><br><span class="hljs-comment">       待收集数组：array 头结点：first 关键字基数：r  分配队列：queue</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Collect</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span>&amp; first, <span class="hljs-type">int</span> r, StaticQueue* queue)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<span class="hljs-comment">//已收集到的最后一个记录</span><br>    <span class="hljs-keyword">while</span> (queue[k].front == <span class="hljs-number">-1</span>)<br>    &#123;<span class="hljs-comment">//找到第一个非空队</span><br>        k++;<br>    &#125;<br>    first = queue[k].front; <span class="hljs-comment">//队列第k个元素的头结点赋值给first</span><br>    <span class="hljs-type">int</span> last = queue[k].rear;<span class="hljs-comment">//队列第k个元素的尾结点赋值给last</span><br>    <span class="hljs-keyword">while</span> (k &lt; r - <span class="hljs-number">1</span>) <span class="hljs-comment">// k &lt; 9</span><br>    &#123;<span class="hljs-comment">//继续收集下一个非空队列</span><br>        k++;<br>        <span class="hljs-keyword">while</span> (k &lt; r - <span class="hljs-number">1</span> &amp;&amp; queue[k].front == <span class="hljs-number">-1</span>)<span class="hljs-comment">// k &lt; 9并且queue是空队列</span><br>        &#123;<br>            k++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (queue[k].front != <span class="hljs-number">-1</span>) <span class="hljs-comment">//queue是非空队列</span><br>        &#123;<span class="hljs-comment">//试探下一个队列</span><br>            array[last].next = queue[k].front;<br>            last = queue[k].rear;<span class="hljs-comment">//最后一个为序列的尾部</span><br>        &#125;<br>    &#125;<br>    array[last].next = <span class="hljs-number">-1</span>;<span class="hljs-comment">//收集完毕</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    按静态链表的地址排序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddrSort</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> first)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = first;<span class="hljs-comment">//j待处理数据下标</span><br>    Node TempRec;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<span class="hljs-comment">//循环，每次处理第i个记录</span><br>        TempRec = array[j];<span class="hljs-comment">//暂存第i个的记录array[j]</span><br>        <span class="hljs-built_in">swap</span>(array[i], array[j]);<br>        array[i].next = j;<span class="hljs-comment">//next链要保留调换轨迹j</span><br>        j = TempRec.next;<span class="hljs-comment">//j移动到下一位</span><br>        <span class="hljs-keyword">while</span> (j &lt;= i)<br>        &#123;<span class="hljs-comment">//j比i小，则是轨迹，顺链找</span><br>            j = array[j].next;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    基数排序：</span><br><span class="hljs-comment">        待排数组：array   </span><br><span class="hljs-comment">        数组长度：n  </span><br><span class="hljs-comment">        收集趟数：d  </span><br><span class="hljs-comment">        关键字基数：r</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RadixSort</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//头结点</span><br>    <span class="hljs-type">int</span> first = <span class="hljs-number">0</span>;<span class="hljs-comment">//first指向第一个记录</span><br>    <span class="hljs-comment">//实例化队列</span><br>    StaticQueue* queue = <span class="hljs-keyword">new</span> StaticQueue[r];<br>    <span class="hljs-comment">//for (int i = 0; i &lt; n - 1; i++)</span><br>    <span class="hljs-comment">//&#123;//初始化静态指针域</span><br>    <span class="hljs-comment">//    array[i].next = i + 1;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//array[n - 1].next = -1;//链尾next为空</span><br><br>    <span class="hljs-comment">//对第i个排序码进行分配和收集，一共d趟</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        i==0时，取个位数；i==1时，取十位数；i==2时，取百位数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++)<br>    &#123;<br>        <span class="hljs-built_in">Distribute</span>(array, first, i, r, queue);<br>        <span class="hljs-built_in">Collect</span>(array, first, r, queue);<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[]queue;<br>    <span class="hljs-built_in">AddrSort</span>(array, n, first);<span class="hljs-comment">//按地址整理数据 </span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取分配/收集次数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetTurnNum</span><span class="hljs-params">(Node* array)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取最大值</span><br>    <span class="hljs-type">int</span> Max = array[<span class="hljs-number">0</span>].key;<br>    <span class="hljs-type">int</span> Num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (array[i].key&gt;Max)<br>        &#123;<br>            Max = array[i].key;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//计算收集次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> exp = <span class="hljs-number">1</span>; Max / exp &gt; <span class="hljs-number">0</span>; exp *= <span class="hljs-number">10</span>) &#123;<br>        Num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Num;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    内容输出方法：</span><br><span class="hljs-comment">        静态链表数组：Node* array</span><br><span class="hljs-comment">        数组长度：len</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Node* array,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        cout &lt;&lt; array[i].key &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//待排序静态链表型数组</span><br>    Node array[SIZE] = &#123; &#123;<span class="hljs-number">256</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">170</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">45</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">75</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">90</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">802</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">24</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-number">66</span>, <span class="hljs-number">-1</span>&#125; &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;原序列：&quot;</span> &lt;&lt; endl;;<br>    <span class="hljs-built_in">Print</span>(array, SIZE);<br>    <span class="hljs-comment">//分配/收集次数</span><br>    <span class="hljs-type">int</span> Num = <span class="hljs-built_in">GetTurnNum</span>(array);<br>    <span class="hljs-comment">//基数排序</span><br>    <span class="hljs-built_in">RadixSort</span>(array, SIZE, Num, RADIX);<br>    cout &lt;&lt; <span class="hljs-string">&quot;基数排序结果：&quot;</span> &lt;&lt; endl;;<br>    <span class="hljs-built_in">Print</span>(array, SIZE);<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">原序列:<br>170 45 75 90 802 24 2 66<br>基数排序结果:<br>2 24 45 66 75 90 170 802<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序之简单选择排序（Select Sort）</title>
    <url>/2023/09/28/SelectSort/</url>
    <content><![CDATA[<blockquote>
<p>简单选择排序的介绍，包括选择排序的特点、原理和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h1><h2 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h2><ul>
<li>交换记录导致排序方法是不稳定的</li>
<li>可用于链式存储结构</li>
<li>移动记录次数较少，当每一记录占用的空间较多时，此方法比直接插入排序快</li>
</ul>
<h2 id="2、过程-原理"><a href="#2、过程-原理" class="headerlink" title="2、过程(原理)"></a>2、过程(原理)</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h2 id="3、完整代码实现"><a href="#3、完整代码实现" class="headerlink" title="3、完整代码实现"></a>3、完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++)<br>	&#123;<br>		<span class="hljs-type">int</span> min = i;<span class="hljs-comment">//标志位</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; len; j++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (arr[min] &gt; arr[j])<span class="hljs-comment">//比较大小，如果比最小值小，就获取对方的下标给min</span><br>			&#123;<br>				min = j;<br>			&#125;<br>		&#125;<br>        <span class="hljs-keyword">if</span>(min == i)<span class="hljs-comment">//一轮搜索后最小值仍然是标志位，则直接进行下一轮比对</span><br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//把最小值和刚开始的标志位交换</span><br>		<span class="hljs-type">int</span> temp = arr[i];<br>		arr[i] = arr[min];<br>		arr[min] = temp;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h1><p><a href="https://visualgo.net/zh/sorting">排序动画演示</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>共享顺序栈</title>
    <url>/2023/10/11/ShareSqStack/</url>
    <content><![CDATA[<blockquote>
<p>共享顺序栈的特点和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="共享顺序栈"><a href="#共享顺序栈" class="headerlink" title="共享顺序栈"></a>共享顺序栈</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>两个顺序栈用一个数组空间，可看作单通道的隧道停车厂，一边占用的空间多了，另一边的剩余空间就少了。</p>
<h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	共享栈：两个栈用一个数组空间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10 <span class="hljs-comment">//栈元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序栈表存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	<span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放栈中元素</span><br>	<span class="hljs-type">int</span> top1;  <span class="hljs-comment">//1号栈顶指针</span><br>	<span class="hljs-type">int</span> top2; <span class="hljs-comment">//2号栈顶指针</span><br>&#125;SqStack;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>	S.top1 = <span class="hljs-number">-1</span>;<br>	S.top2 = MAXSIZE;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span> || S.top2 == MAXSIZE)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//进1号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push1</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top1 +<span class="hljs-number">1</span> == S.top2)<span class="hljs-comment">//top指的是数组的下标位置</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	S.top1++;			<span class="hljs-comment">//指针先+1</span><br>	S.data[S.top1] = e; <span class="hljs-comment">//新元素入栈</span><br>	<span class="hljs-comment">//或者上两步合并</span><br>	<span class="hljs-comment">//S.data[++S.top1] = e;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//进2号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push2</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top1 + <span class="hljs-number">1</span> == S.top2)<span class="hljs-comment">//top指的是数组的下标位置</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	S.top2--;			<span class="hljs-comment">//指针先-1</span><br>	S.data[S.top2] = e; <span class="hljs-comment">//新元素入栈</span><br>	<span class="hljs-comment">//或者上两步合并</span><br>	<span class="hljs-comment">//S.data[--S.top2] = e;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出1号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop1</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S.data[S.top1];<br>	S.top1--;<br>	<span class="hljs-comment">//或者上两步合并</span><br>	<span class="hljs-comment">//S.data[S.top--] = e;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出2号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop2</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top2 == MAXSIZE)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S.data[S.top2];<br>	S.top2++;<br>	<span class="hljs-comment">//或者上两步合并</span><br>	<span class="hljs-comment">//S.data[S.top2++] = e;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取1号栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop1</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S.data[S.top1];<br>&#125;<br><br><span class="hljs-comment">//读取2号栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop2</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top2 == MAXSIZE)<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S.data[S.top2];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SqStack S;<br>	<span class="hljs-built_in">InitStack</span>(S);<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-type">int</span> b;<br><br>	cout &lt;&lt; <span class="hljs-string">&quot;入1号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push1</span>(S, a) &lt;&lt; endl;<br>	<span class="hljs-built_in">GetTop1</span>(S, b);<br>	cout &lt;&lt; <span class="hljs-string">&quot;读取1号栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出1号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop1</span>(S, a) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;入2号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push2</span>(S, a) &lt;&lt; endl;<br>	<span class="hljs-built_in">GetTop2</span>(S, b);<br>	cout &lt;&lt; <span class="hljs-string">&quot;读取2号栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出2号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop2</span>(S, a) &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔排序（Shell Sort）</title>
    <url>/2023/10/09/ShellSort/</url>
    <content><![CDATA[<blockquote>
<p>希尔排序的原理、特点和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先将待排序表分割成若干形如L[i, i+d, i+2d, … , i+kd]的特殊子表，对各个子表分别进行直接插入排序。缩小增量d，重复上述过程，直到d &#x3D; 1为止。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>空间复杂度：O(1)</li>
<li>时间复杂度：未知，但优于直接插入排序</li>
<li>稳定性：不稳定</li>
<li>适用性：仅可用于顺序表</li>
</ul>
<p>高频题型：给出增量序列，分析每一趟排序后的状态</p>
<h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 希尔排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-type">int</span> d,i,j;<br>	<span class="hljs-comment">//A[0]为暂存单元，当j&lt;=0时，就到插入位置了</span><br>	<span class="hljs-keyword">for</span> (d = len/<span class="hljs-number">2</span>; d &gt;=<span class="hljs-number">1</span>; d=d/<span class="hljs-number">2</span>)<span class="hljs-comment">//步长变化</span><br>	&#123;<br>		<span class="hljs-keyword">for</span> (i = d+<span class="hljs-number">1</span>; i &lt;= len; i++)<br>		&#123;<br>			<span class="hljs-keyword">if</span> (A[i]&lt;A[i-d]) &#123;<span class="hljs-comment">//需将A[i]插入有序增量子表</span><br>				A[<span class="hljs-number">0</span>] = A[i];  <span class="hljs-comment">//暂存在A[0]</span><br>				<span class="hljs-keyword">for</span>(j = i-d; j &gt;<span class="hljs-number">0</span> &amp;&amp; A[<span class="hljs-number">0</span>]&lt;A[j]; j-=d)<br>				&#123;<br>					A[j + d] = A[j];  <span class="hljs-comment">//记录后移，查找插入位置</span><br>				&#125;<br>				A[j + d] = A[<span class="hljs-number">0</span>];  <span class="hljs-comment">//插入</span><br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-comment">//哨兵是用来判断程序何时结束的</span><br>	<span class="hljs-comment">//有暂存单元的数组，第一个是暂存单元</span><br>	<span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>	<span class="hljs-built_in">ShellSort</span>(A, <span class="hljs-number">8</span>);<br>	cout &lt;&lt; <span class="hljs-string">&quot;希尔排序后：&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>	&#123;<br>		cout &lt;&lt; A[i];<br>		<span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>		&#123;<br>			cout &lt;&lt;endl;;<br>		&#125;<br>		<span class="hljs-keyword">else</span><br>		&#123;<br>			cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表之顺序表（SqList）</title>
    <url>/2022/12/10/SqList/</url>
    <content><![CDATA[<blockquote>
<p>数据结构第二章线性表的定义、特点和存储结构。顺序表的定义、特点和存储结构。附加完整代码实现</p>
</blockquote>
<span id="more"></span>

<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>注：SqList为简写，完整名为Sequential List。</p>
<h2 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h2><p>线性表是n个具有<code>相同</code>数据类型（特性）的<code>数据元素</code>的<code>有限</code> <code>序列</code>，其中n为表长，当n &#x3D; 0时，线性表是一个空表。</p>
<p><strong>相同</strong>：每个数据元素所占空间一样大</p>
<p><strong>序列</strong>：有次序</p>
<p><strong>有限</strong>：所有的整数按递增次序排列，不是线性表。所有的整数是无限的</p>
<blockquote>
<p>注意：线性表的位序从1开始，数组下标是从0开始的</p>
</blockquote>
<h2 id="线性表的特点"><a href="#线性表的特点" class="headerlink" title="线性表的特点"></a>线性表的特点</h2><p>1．集合中必存在唯一的一个“第一元素”。</p>
<p>2．集合中必存在唯一的一个 “最后元素” 。</p>
<p>3．除最后一个元素之外，均有唯一的后继(后件)。</p>
<p>4．除第一个元素之外，均有唯一的前驱(前件)。</p>
<h2 id="线性表存储结构"><a href="#线性表存储结构" class="headerlink" title="线性表存储结构"></a>线性表存储结构</h2><p>线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的， 线性表在物理上存储时，通常以数组和链式结构的形式存储。</p>
<ul>
<li>数组存储即顺序存储结构</li>
<li>链表即链式存储结构</li>
</ul>
<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p>顺序表是用顺序存储的方式实现的线性表</p>
<h2 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h2><p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p>
<h2 id="顺序表的特点"><a href="#顺序表的特点" class="headerlink" title="顺序表的特点"></a>顺序表的特点</h2><ol>
<li><strong>随机访问，即可在O（1）时间内找到第i个元素。</strong></li>
<li>存储密度高，每个节点只存储数据元素本身</li>
<li>拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）<br>静态分配不能拓展容量。</li>
<li>插入、删除操作不方便，需要移动大量元素</li>
</ol>
<h2 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h2><p>逻辑上相邻的数据元素，其物理次序也是相邻的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//顺序表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	Book* elem; <span class="hljs-comment">//定义Book指针</span><br>	<span class="hljs-type">int</span> length; <span class="hljs-comment">//顺序表的长度</span><br>	<span class="hljs-type">int</span> MaxSize;<span class="hljs-comment">//此处为扩展知识,书上没有</span><br>&#125;SqList;<br></code></pre></td></tr></table></figure>

<h2 id="顺序表的完整代码实现"><a href="#顺序表的完整代码实现" class="headerlink" title="顺序表的完整代码实现"></a>顺序表的完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10  <span class="hljs-comment">//宏定义，定义数组最大长度，对应顺序表的容量</span></span><br><br><span class="hljs-comment">//图书结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	string no; <span class="hljs-comment">//图书ISBN编号</span><br>	string name;  <span class="hljs-comment">//图书名称</span><br>	<span class="hljs-type">float</span> price;  <span class="hljs-comment">//图书价格</span><br>&#125;Book;<br><br><span class="hljs-comment">//顺序表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	Book* elem; <span class="hljs-comment">//定义Book指针</span><br>	<span class="hljs-type">int</span> length; <span class="hljs-comment">//顺序表的长度</span><br>	<span class="hljs-type">int</span> MaxSize;<span class="hljs-comment">//此处为扩展知识,书上没有</span><br>&#125;SqList;<br><br><span class="hljs-comment">//给Book类型取外号为ElemType</span><br><span class="hljs-keyword">typedef</span> Book ElemType;<br><span class="hljs-comment">//给int类型取外号为Status</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的初始化:</span><br><span class="hljs-comment">	参数一：要初始化的顺序表</span><br><span class="hljs-comment">	注意：成功：返回1；失败：退出程序，错误代码：3。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(SqList&amp; L)</span><span class="hljs-comment">//使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	L.MaxSize = MAXSIZE;<br>	<span class="hljs-comment">//L.elem = (Book*)malloc(MAXSIZE*sizeof(int)); //或者用malloc开辟空间</span><br>	L.elem = <span class="hljs-keyword">new</span> ElemType[MAXSIZE]; <span class="hljs-comment">//使用Book类型的外号ElemType</span><br>	<span class="hljs-comment">//exit是退出整个进程，OVERFLOW的默认值为3，意思为栈溢出</span><br>	<span class="hljs-keyword">if</span> (!L.elem) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>	L.length = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的扩容（扩展知识，书上并没有这个）</span><br><span class="hljs-comment">	扩容会大量移动数据，时间复杂度为O(n)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	Book *p = L.elem;<span class="hljs-comment">//将原来的地址给p</span><br>	L.MaxSize += len;<span class="hljs-comment">//容量加上扩容的数据</span><br>	<br>	L.elem = <span class="hljs-keyword">new</span> Book[L.MaxSize];<span class="hljs-comment">//开辟新空间</span><br>	<span class="hljs-comment">//L.elem = (Book*)malloc(L.MaxSize*sizeof(int));</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<span class="hljs-comment">//将原来的数据拷贝回来</span><br>	&#123;<br>		<span class="hljs-comment">/*</span><br><span class="hljs-comment">			此处编译器警告：代码：C6385 说明：正在从&quot;L.elem&quot;读取无效数据。</span><br><span class="hljs-comment">			尚不清楚是怎么回事，然而并不影响程序运行。</span><br><span class="hljs-comment">		*/</span><br>		L.elem[i] = p[i];<br>	&#125;<br><br>	<span class="hljs-comment">//delete(p);//这里应当释放的，但是这样编译器报错，程序崩溃。</span><br>	<span class="hljs-comment">//free(p);//如果用malloc开辟空间，就用free释放</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的取值:</span><br><span class="hljs-comment">	参数一：要取值的顺序表</span><br><span class="hljs-comment">	参数二：要取值的位置</span><br><span class="hljs-comment">	参数三：待保存的对象</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-type">int</span> num, ElemType&amp; e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (num&lt;<span class="hljs-number">1</span> || num&gt;L.length)<span class="hljs-comment">//先判断输入是否合法</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	e = L.elem[num - <span class="hljs-number">1</span>]; <span class="hljs-comment">//将获取的数值赋值给Book对象e</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的查找:</span><br><span class="hljs-comment">	参数一：要查找的顺序表</span><br><span class="hljs-comment">	参数二：要查找的数据</span><br><span class="hljs-comment">	注意：成功：返回下标位置；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L, ElemType e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<br>	&#123;<br>		<span class="hljs-comment">//对比Book中的数据是否相等</span><br>		<span class="hljs-keyword">if</span> (L.elem[i].name == e.name &amp;&amp; L.elem[i].no == e.no &amp;&amp; L.elem[i].price == e.price)<br>		&#123;<br>			<span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">//因为线性表是从1开始的</span><br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的插入:</span><br><span class="hljs-comment">	参数一：要插入的顺序表</span><br><span class="hljs-comment">	参数二：要插入的位置</span><br><span class="hljs-comment">	参数三：要插入的数据</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-type">int</span> num, ElemType e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (L.length == MAXSIZE || num&lt;<span class="hljs-number">1</span> || num &gt;L.length + <span class="hljs-number">1</span>)<span class="hljs-comment">//先判断输入是否合法</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L.length - <span class="hljs-number">1</span>; i &gt;= num - <span class="hljs-number">1</span>; i--)<br>	&#123;<br>		L.elem[i + <span class="hljs-number">1</span>] = L.elem[i];<br>	&#125;<br>	L.elem[num - <span class="hljs-number">1</span>] = e;<br>	L.length++;<span class="hljs-comment">//成功插入数据，length长度+1</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的删除:</span><br><span class="hljs-comment">	参数一：要删除的顺序表</span><br><span class="hljs-comment">	参数二：要删除的位置</span><br><span class="hljs-comment">	注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-type">int</span> num)</span><span class="hljs-comment">//使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (num&lt;<span class="hljs-number">1</span> || num &gt;L.length || L.length == <span class="hljs-number">0</span>)<span class="hljs-comment">//先判断输入是否合法</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>	&#125;<br>	<span class="hljs-comment">//这里书上是i &lt; L.length-1；是错误的</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = num; i &lt; L.length; i++)<span class="hljs-comment">//删除数据就把num后的数据逐个前移，将其覆盖掉</span><br>	&#123;<br>		L.elem[i<span class="hljs-number">-1</span>] = L.elem[i];<br>	&#125;<br>	L.length--;<span class="hljs-comment">//成功删除数据，length长度-1</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SqList L;<br>	Book book;<br>	<span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>; <span class="hljs-comment">//临时数据，用来判断执行是否成功</span><br>	cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;1、初始化顺序表...&quot;</span>;<br>	temp = <span class="hljs-built_in">InitList</span>(L);<br>	<span class="hljs-keyword">if</span> (!temp)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;\t失败&quot;</span> &lt;&lt; endl;<br>	&#125;<br>	cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>	<br>	book.no = <span class="hljs-string">&quot;978-7-115-37950-4&quot;</span>;<br>	book.name = <span class="hljs-string">&quot;数据结构（c语言版）（第2版）&quot;</span>;<br>	book.price = <span class="hljs-number">35</span>;<br>	cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;2、往顺序表中插入数据...&quot;</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)<br>	&#123;<br>		book.price = i;<br>		temp = <span class="hljs-built_in">ListInsert</span>(L, i, book);<br>	&#125;<br>	<br><br>	<span class="hljs-keyword">if</span> (!temp)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;\t失败&quot;</span> &lt;&lt; endl;<br>	&#125;<br>	cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-comment">/*cout &lt;&lt; &quot;3、扩容...&quot;;</span><br><span class="hljs-comment">	IncreaseSize(L, 5);</span><br><span class="hljs-comment">	cout &lt;&lt; &quot;L.MaxSize :&quot;&lt;&lt; L.MaxSize &lt;&lt; endl;*/</span><br>	cout &lt;&lt; <span class="hljs-string">&quot;3、获取图书的下标位置数据...&quot;</span>;<br>	temp = <span class="hljs-built_in">LocateElem</span>(L, book);<br>	<span class="hljs-keyword">if</span> (!temp)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;\t失败!&quot;</span> &lt;&lt; endl;<br>	&#125;<br>	cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;--------------------------------------&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;下标位置为：&quot;</span> &lt;&lt; temp &lt;&lt; endl;<br>	Book book1;<br>	cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;4、在顺序表中取得数据...&quot;</span>;<br>	temp = <span class="hljs-built_in">GetElem</span>(L, <span class="hljs-number">1</span>, book1);<br>	<span class="hljs-keyword">if</span> (!temp)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;\t失败&quot;</span> &lt;&lt; endl;<br>	&#125;<br>	cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;--------------------------------------&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;图书信息为：&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;图书ISBN :&quot;</span> &lt;&lt; book1.no<br>		&lt;&lt; <span class="hljs-string">&quot;\t图书名称：&quot;</span> &lt;&lt; book1.name<br>		&lt;&lt; <span class="hljs-string">&quot;\t图书价格：&quot;</span> &lt;&lt; book1.price &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;5、删除顺序表中的数据...&quot;</span>;<br>	temp = <span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">5</span>);<br>	<span class="hljs-keyword">if</span> (!temp)<br>	&#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;失败&quot;</span> &lt;&lt; endl;<br>	&#125;<br>	cout &lt;&lt; <span class="hljs-string">&quot;成功&quot;</span> &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= L.length; i++)<br>	&#123;<br>		<span class="hljs-built_in">GetElem</span>(L, i, book1);<br>		cout &lt;&lt; book1.price &lt;&lt; endl;<br>	&#125;<br><br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">======================================<br><span class="hljs-number">1</span>、初始化顺序表...      成功！<br>======================================<br><span class="hljs-number">2</span>、往顺序表中插入数据...        成功！<br>======================================<br><span class="hljs-number">3</span>、获取图书的下标位置数据...    成功！<br>--------------------------------------<br>下标位置为：<span class="hljs-number">1</span><br>======================================<br><span class="hljs-number">4</span>、在顺序表中取得数据...        成功！<br>--------------------------------------<br>图书信息为：<br>图书ISBN :<span class="hljs-number">978</span><span class="hljs-number">-7</span><span class="hljs-number">-115</span><span class="hljs-number">-37950</span><span class="hljs-number">-4</span>     图书名称：数据结构（c语言版）（第<span class="hljs-number">2</span>版）  图书价格：<span class="hljs-number">35</span><br>======================================<br><span class="hljs-number">5</span>、删除顺序表中的数据...成功<br>======================================<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure>

<h2 id="动态分配方法（修改部分）"><a href="#动态分配方法（修改部分）" class="headerlink" title="动态分配方法（修改部分）"></a>动态分配方法（修改部分）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//顺序表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>	Book* elem; <span class="hljs-comment">//定义Book指针</span><br>	<span class="hljs-type">int</span> length; <span class="hljs-comment">//顺序表的长度</span><br>	<span class="hljs-type">int</span> MaxSize;<br>&#125;SqList;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的初始化:</span><br><span class="hljs-comment">	参数一：要初始化的顺序表</span><br><span class="hljs-comment">	注意：成功：返回1；失败：退出程序，错误代码：3。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(SqList&amp; L)</span><span class="hljs-comment">//使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>	L.MaxSize = MAXSIZE;<br>	L.elem = <span class="hljs-keyword">new</span> ElemType[MAXSIZE]; <span class="hljs-comment">//使用Book类型的外号ElemType</span><br>	<span class="hljs-comment">//L.elem = (Book*)malloc(MAXSIZE*sizeof(int));</span><br>	<span class="hljs-comment">//exit是退出整个进程，OVERFLOW的默认值为3，意思为栈溢出</span><br>	<span class="hljs-keyword">if</span> (!L.elem) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>	L.length = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序表的扩容</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>	Book *p = L.elem;<br>	L.MaxSize += len;<br>	L.elem = <span class="hljs-keyword">new</span> Book[L.MaxSize];<br>    <span class="hljs-comment">//L.elem = (Book*)malloc(L.MaxSize*sizeof(int));</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<br>    &#123;<br>        L.elem[i] = p[i];<br>    &#125;<br>    <span class="hljs-built_in">delete</span>(p);<br>    <span class="hljs-comment">//free(p);</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>循环队列（顺序存储结构）</title>
    <url>/2023/10/13/SqQueue/</url>
    <content><![CDATA[<blockquote>
<p>循环队列的定义、特点和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="循环队列（顺序存储结构）"><a href="#循环队列（顺序存储结构）" class="headerlink" title="循环队列（顺序存储结构）"></a>循环队列（顺序存储结构）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>顺序表类型的队列，定义了两个指针，头指针和尾指针。当入队满的时候，每出队一个头指针都要后移，这样到最后就无法入队新元素了，在入队会导致假溢出。为了解决这一问题，入队和出队后，队头队尾对MAXSIZE取模，这样队列就变成了环形，类似于旋转木马，即循环队列，</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>可以有效的利用资源</p>
<h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><p>主要是判断队列是否为空所采取的方法：</p>
<ul>
<li>牺牲一个存储单元</li>
<li>增加size属性记录元素个数</li>
<li>增加标志位，判断最近的一次操作是入队还是出队（只有入队会导致队满）</li>
</ul>
<h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	循环队列  顺序实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 2 <span class="hljs-comment">//队列元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序队列存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br>	<span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放队列元素</span><br>	<span class="hljs-type">int</span> front;  <span class="hljs-comment">//队头指针</span><br>	<span class="hljs-type">int</span> rear;	<span class="hljs-comment">//队尾指针</span><br>	<span class="hljs-type">int</span> size;  <span class="hljs-comment">//队列元素个数</span><br>&#125;SqQueue; <br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;S)</span></span><br><span class="hljs-function"></span>&#123;<br>	S.front = <span class="hljs-number">0</span>;<br>	S.rear = <span class="hljs-number">0</span>;<br>	S.size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//入队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqQueue&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.size == MAXSIZE)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	S.data[S.rear] = e;<br>	S.rear = (S.rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>	S.size++;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqQueue&amp; S, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S.data[S.front];<br>	S.front=(S.front+<span class="hljs-number">1</span>)% MAXSIZE;<br>	S.size--;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取队列顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqQueue S,<span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S.data[S.front];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SqQueue S;<br>	<span class="hljs-built_in">InitQueue</span>(S);<br>	cout &lt;&lt;<span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br>	<span class="hljs-type">int</span> a2 = <span class="hljs-number">20</span>;<br>	<span class="hljs-type">int</span> b;<br>	<br>	cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a1)&lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a2) &lt;&lt; endl;<br>	<span class="hljs-built_in">GetElem</span>(S, b);<br>	cout&lt;&lt;<span class="hljs-string">&quot;读取队列顶元素：&quot;</span> &lt;&lt;b &lt;&lt;endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a1) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a2) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序栈（SqStack）</title>
    <url>/2023/10/11/SqStack/</url>
    <content><![CDATA[<blockquote>
<p>顺序栈的特点和完整代码实现。</p>
</blockquote>
<span id="more"></span>

<h1 id="顺序栈（SqStack）"><a href="#顺序栈（SqStack）" class="headerlink" title="顺序栈（SqStack）"></a>顺序栈（SqStack）</h1><p>注：SqStack为简写，完整名为Sequential Stack。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>栈也是一种线性表。</li>
<li>只允许在一端进行插入和删除的线性表。</li>
<li>先进后出。</li>
</ul>
<h2 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h2><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><ul>
<li>定义顺序栈结构</li>
<li>初始化顺序栈</li>
<li>判断顺序栈空方法</li>
<li>顺序栈的进栈方法</li>
<li>顺序栈的出栈方法</li>
<li>顺序栈的读取栈顶元素方法</li>
<li>主函数用以测试</li>
</ul>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	顺序栈表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10 <span class="hljs-comment">//栈元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序栈表存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br>	<span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放栈中元素</span><br>	<span class="hljs-type">int</span> top;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SqStack; <br><br><span class="hljs-comment">/* 初始化栈 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span><br><span class="hljs-function"></span>&#123;<br>	S.top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 判断栈空 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">/* 进栈 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top == MAXSIZE<span class="hljs-number">-1</span>)<span class="hljs-comment">//top指的是数组的下标位置</span><br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	S.top++;			<span class="hljs-comment">//指针先+1</span><br>	S.data[S.top] = e; <span class="hljs-comment">//新元素入栈</span><br>	<span class="hljs-comment">//或者上两步合并</span><br>	<span class="hljs-comment">//S.data[++S.top] = e;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 出栈 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>	e = S.data[S.top];<br>	S.top--;<br>	<span class="hljs-comment">//或者上两步合并</span><br>	<span class="hljs-comment">//S.data[S.top--] = e;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 读取栈顶元素 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S,<span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>	<span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>	&#123;<br>		<span class="hljs-keyword">return</span>;<br>	&#125;<br>	e = S.data[S.top];<br>&#125;<br><br><span class="hljs-comment">/* 主函数 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>	SqStack S; <span class="hljs-comment">//实例化栈</span><br>	<span class="hljs-built_in">InitStack</span>(S);  <span class="hljs-comment">//初始化栈</span><br>	cout &lt;&lt;<span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl; <span class="hljs-comment">//判断栈空</span><br>	<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义入栈元素a</span><br>	<span class="hljs-type">int</span> b;    <span class="hljs-comment">//定义接收栈顶元素b</span><br>	<br>	cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a)&lt;&lt; endl;<br>	<span class="hljs-built_in">GetTop</span>(S, b);<br>	cout&lt;&lt;<span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt;b &lt;&lt;endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>	cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode弹窗警告</title>
    <url>/2023/10/03/VSCodeAlert/</url>
    <content><![CDATA[<blockquote>
<p>VSCode启动后弹窗警告：The environment variable ‘Path’ seems to…</p>
</blockquote>
<span id="more"></span>

<h2 id="警告详细信息："><a href="#警告详细信息：" class="headerlink" title="警告详细信息："></a>警告详细信息：</h2><blockquote>
<p>The environment variable ‘Path’ seems to have some paths containing the ‘“‘ character. The existence of such a character is known to have caused the Python extension to not load. If the extension fails to load please modify your paths to remove this ‘“‘ character.</p>
</blockquote>
<p>中文含义：</p>
<blockquote>
<p>环境变量“Path”的某些路径似乎包含“”字符。已知存在这样的字符导致Python扩展无法加载。如果扩展无法加载，请修改路径以删除此“”字符。</p>
</blockquote>
<p>这里的 “ “指的是环境变量存在引号，这里可以通过启动<code>cmd</code>命令提示符，输入命令<code>path</code>查看。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Microsoft Windows [版本 10.0.19044.2728]<br>(c) Microsoft Corporation。保留所有权利。<br><br>C:\Users\user&gt;path<br>PATH=C:\Program Files\Java\jdk1.8.0_251\bin;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\WINDOWS\System32;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Windows\System32;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;D:\mysql\bin;C:\WINDOWS\System32\OpenSSH\;D:\Program Files\MongoDB\bin;D:\Program Files\Git\cmd;D:\Program Files\微信web开发者工具\dll;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;&quot;;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\&quot;;D:\python\;D:\python\Scripts\;D:\anaconda3;D:\anaconda3\Library\mingw-w64\bin;D:\anaconda3\Library\usr\bin;D:\anaconda3\Library\bin;D:\anaconda3\Scripts;C:\Users\user\AppData\Local\Microsoft\WindowsApps;D:\web\apache-maven-3.6.0\bin;D:\Program Files\Microsoft VS Code\bin;C:\Program Files (x86)\Tencent\QQGameTempest\Hall.57938\;<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

<p>仔细观察一下，即可看到有路径被引号包括了。这里之所以被引号包括是因为在<code>path</code>编辑环境变量里，有一行或多行的路径栏里，把众多路径用<code>;</code>给合并到一栏了，类似这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%SYSTEMROOT%\System32\OpenSSH\<br></code></pre></td></tr></table></figure>

<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>去系统Path环境变量，将合并在一起的路径拆分成单个的，分别新建一栏存放，然后点击确定，重启<code>VSCode</code>即可。</p>
<p>示例：</p>
<ul>
<li>拆分前（一栏就这么多）：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%SYSTEMROOT%\System32\OpenSSH\<br></code></pre></td></tr></table></figure>

<ul>
<li>拆分后（分成了七栏）：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">D:\Program Files\MATLAB\R2017a\runtime\win64<br>D:\Program Files\MATLAB\R2017a\bin<br><span class="hljs-meta prompt_">%</span><span class="language-bash">SystemRoot%\system32</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">SystemRoot%</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">SystemRoot%\System32\Wbem</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">SYSTEMROOT%\System32\WindowsPowerShell\v1.0\</span><br><span class="language-bash">%SYSTEMROOT%\System32\OpenSSH\</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>异常处理</category>
      </categories>
      <tags>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>动词分类</title>
    <url>/2023/10/02/VerbCategories/</url>
    <content><![CDATA[<blockquote>
<p>在此了解动词的基本分类</p>
</blockquote>
<span id="more"></span>

<p>注：本文为学习笔记，视频学习地址为：<a href="https://www.bilibili.com/video/BV1XY411J7aG/">英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系)</a></p>
<h1 id="动词分类"><a href="#动词分类" class="headerlink" title="动词分类"></a>动词分类</h1><h2 id="一、可做谓语动词"><a href="#一、可做谓语动词" class="headerlink" title="一、可做谓语动词"></a>一、可做谓语动词</h2><h3 id="1、实义动词"><a href="#1、实义动词" class="headerlink" title="1、实义动词"></a>1、实义动词</h3><ul>
<li>（按动作承受者划分）<ul>
<li>及物动词</li>
<li>不及物动词</li>
</ul>
</li>
<li>（按状态动作划分）<ul>
<li>动作动词（eat）</li>
<li>状态动词（have、feel、own、believe等，这些词并没有真正动起来的意思）</li>
</ul>
</li>
</ul>
<h3 id="2、-连-系动词"><a href="#2、-连-系动词" class="headerlink" title="2、(连)系动词"></a>2、(连)系动词</h3><p>有些会把<strong>系动词</strong>划在<strong>不及物动词</strong>里，而且也可被看作<strong>状态动词</strong>。</p>
<h2 id="二、可辅助构成谓语动词"><a href="#二、可辅助构成谓语动词" class="headerlink" title="二、可辅助构成谓语动词"></a>二、可辅助构成谓语动词</h2><h3 id="1、助动词"><a href="#1、助动词" class="headerlink" title="1、助动词"></a>1、助动词</h3><h3 id="2、情态动词"><a href="#2、情态动词" class="headerlink" title="2、情态动词"></a>2、情态动词</h3><p><strong>情态动词</strong>也被视为<strong>助动词</strong>的一种</p>
<h2 id="三、不可做谓语动词"><a href="#三、不可做谓语动词" class="headerlink" title="三、不可做谓语动词"></a>三、不可做谓语动词</h2><h3 id="1、非谓语动词"><a href="#1、非谓语动词" class="headerlink" title="1、非谓语动词"></a>1、非谓语动词</h3><ul>
<li>不定式</li>
<li>过去分词</li>
<li>现在分词</li>
<li>动名词</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>英语语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue安装指南（Windows）</title>
    <url>/2023/10/01/Vue-install/</url>
    <content><![CDATA[<blockquote>
<p>Windows系统下，记录在线安装Vue。</p>
</blockquote>
<span id="more"></span>

<h1 id="安装-Vue-CLI"><a href="#安装-Vue-CLI" class="headerlink" title="安装 | Vue CLI"></a>安装 | Vue CLI</h1><p> <code>Vue CLI</code>官网地址：<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a></p>
<p>在<code>cmd</code>输入以下命令进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cnpm install -g @vue/cli<br></code></pre></td></tr></table></figure>

<p>稍等片刻，出现以下信息，即安装成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;cnpm install -g @vue/cli<br>Downloading @vue/cli to C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli_tmp<br>Copying C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli_tmp\.store\@vue+cli@5.0.8\node_modules\@vue\cli to C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli<br>Installing @vue/cli&#x27;s dependencies to C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli/node_modules<br>[1/35] @types/ejs@^3.0.6 installed at node_modules\.store\@types+ejs@3.1.2\node_modules\@types\ejs<br>[2/35] ini@^2.0.0 installed at node_modules\.store\ini@2.0.0\node_modules\ini<br>[3/35] commander@^7.1.0 installed at node_modules\.store\commander@7.2.0\node_modules\commander<br>[4/35] leven@^3.1.0 installed at node_modules\.store\leven@3.1.0\node_modules\leven<br>[5/35] isbinaryfile@^4.0.6 installed at node_modules\.store\isbinaryfile@4.0.10\node_modules\isbinaryfile<br>[6/35] slash@^3.0.0 installed at node_modules\.store\slash@3.0.0\node_modules\slash<br>[7/35] lodash.clonedeep@^4.5.0 installed at node_modules\.store\lodash.clonedeep@4.5.0\node_modules\lodash.clonedeep<br>[8/35] envinfo@^7.7.4 installed at node_modules\.store\envinfo@7.8.1\node_modules\envinfo<br>[9/35] deepmerge@^4.2.2 installed at node_modules\.store\deepmerge@4.3.1\node_modules\deepmerge<br>[10/35] javascript-stringify@^2.0.1 installed at node_modules\.store\javascript-stringify@2.1.0\node_modules\javascript-stringify<br>[11/35] minimist@^1.2.5 installed at node_modules\.store\minimist@1.2.8\node_modules\minimist<br>[12/35] @vue/cli-ui-addon-widgets@^5.0.8 installed at node_modules\.store\@vue+cli-ui-addon-widgets@5.0.8\node_modules\@vue\cli-ui-addon-widgets<br>[13/35] @vue/cli-ui-addon-webpack@^5.0.8 installed at node_modules\.store\@vue+cli-ui-addon-webpack@5.0.8\node_modules\@vue\cli-ui-addon-webpack<br>[14/35] strip-ansi@^6.0.0 installed at node_modules\.store\strip-ansi@6.0.1\node_modules\strip-ansi<br>[15/35] debug@^4.1.0 installed at node_modules\.store\debug@4.3.4\node_modules\debug<br>[16/35] lru-cache@^6.0.0 installed at node_modules\.store\lru-cache@6.0.0\node_modules\lru-cache<br>[17/35] validate-npm-package-name@^3.0.0 installed at node_modules\.store\validate-npm-package-name@3.0.0\node_modules\validate-npm-package-name<br>[18/35] import-global@^0.1.0 installed at node_modules\.store\import-global@0.1.0\node_modules\import-global<br>[19/35] shortid@^2.2.15 installed at node_modules\.store\shortid@2.2.16\node_modules\shortid<br>[20/35] fs-extra@^9.1.0 installed at node_modules\.store\fs-extra@9.1.0\node_modules\fs-extra<br>[21/35] js-yaml@^4.0.0 installed at node_modules\.store\js-yaml@4.1.0\node_modules\js-yaml<br>[22/35] boxen@^5.0.0 installed at node_modules\.store\boxen@5.1.2\node_modules\boxen<br>[23/35] pkg-dir@^5.0.0 installed at node_modules\.store\pkg-dir@5.0.0\node_modules\pkg-dir<br>[24/35] recast@^0.20.3 installed at node_modules\.store\recast@0.20.5\node_modules\recast<br>[25/35] yaml-front-matter@^4.1.0 installed at node_modules\.store\yaml-front-matter@4.1.1\node_modules\yaml-front-matter<br>[26/35] @vue/cli-shared-utils@^5.0.8 installed at node_modules\.store\@vue+cli-shared-utils@5.0.8\node_modules\@vue\cli-shared-utils<br>[27/35] resolve@^1.20.0 installed at node_modules\.store\resolve@1.22.2\node_modules\resolve<br>[28/35] globby@^11.0.2 installed at node_modules\.store\globby@11.1.0\node_modules\globby<br>[29/35] download-git-repo@^3.0.2 installed at node_modules\.store\download-git-repo@3.0.2\node_modules\download-git-repo<br>[30/35] ejs@^3.1.6 installed at node_modules\.store\ejs@3.1.9\node_modules\ejs<br>[31/35] vue@^2.6.14 installed at node_modules\.store\vue@2.7.14\node_modules\vue<br>[32/35] @vue/cli-ui@^5.0.8 installed at node_modules\.store\@vue+cli-ui@5.0.8\node_modules\@vue\cli-ui<br>[33/35] @types/inquirer@^8.1.3 installed at node_modules\.store\@types+inquirer@8.2.6\node_modules\@types\inquirer<br>[34/35] inquirer@^8.0.0 installed at node_modules\.store\inquirer@8.2.5\node_modules\inquirer<br>[35/35] vue-codemod@^0.0.5 installed at node_modules\.store\vue-codemod@0.0.5\node_modules\vue-codemod<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@^0.5.0 See https://github.com/lydell/source-map-resolve#deprecated<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@0.5.3 › source-map-url@^0.4.0 See https://github.com/lydell/source-map-url#deprecated<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@0.5.3 › urix@^0.1.0 Please see https://github.com/lydell/urix#deprecated<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@0.5.3 › resolve-url@^0.2.1 https://github.com/lydell/resolve-url#deprecated<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@^3.9.0 The `apollo-server-express` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>anti semver @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › @types/express@4.17.14 › @types/express-serve-static-core@^4.17.18 delcares @types/express-serve-static-core@^4.17.18(resolved as 4.17.35) but using ancestor(apollo-server-express)&#x27;s dependency @types/express-serve-static-core@4.17.31(resolved as 4.17.31)<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-types@^3.8.0 The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › subscriptions-transport-ws@^0.11.0 The `subscriptions-transport-ws` package is no longer maintained. We recommend you use `graphql-ws` instead. For help migrating Apollo software to `graphql-ws`, see https://www.apollographql.com/docs/apollo-server/data/subscriptions/#switching-from-subscriptions-transport-ws    For general help using `graphql-ws`, see https://github.com/enisdenjo/graphql-ws/blob/master/README.md<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-types@3.8.0 › apollo-reporting-protobuf@^3.4.0 The `apollo-reporting-protobuf` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/usage-reporting-protobuf` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-types@3.8.0 › apollo-server-env@^4.2.1 The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@^3.12.0 The `apollo-server-core` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@3.12.0 › apollo-server-errors@^3.3.1 The `apollo-server-errors` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@3.12.0 › apollo-datasource@^3.3.2 The `apollo-datasource` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@3.12.0 › apollo-server-plugin-base@^3.7.2 The `apollo-server-plugin-base` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>Recently updated (since 2023-05-20): 47 packages (detail see file C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli\node_modules\.recently_updates.txt)<br>  Today:<br>    → vue-codemod@0.0.5 › @babel/preset-env@^7.10.3(7.22.2) (01:52:00)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-private-methods@^7.22.0(7.22.3) (18:11:00)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-dynamic-import@^7.22.1(7.22.1) (00:34:50)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-logical-assignment-operators@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-unicode-sets-regex@^7.22.0(7.22.3) (18:11:03)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-new-target@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-unicode-property-regex@^7.22.0(7.22.3) (18:11:01)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-syntax-import-attributes@^7.22.0(7.22.3) (18:10:53)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-named-capturing-groups-regex@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-json-strings@^7.22.0(7.22.3) (18:10:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-class-properties@^7.22.0(7.22.3) (18:10:54)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-export-namespace-from@^7.22.0(7.22.3) (18:10:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-nullish-coalescing-operator@^7.22.0(7.22.3) (18:10:57)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-optional-catch-binding@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-numeric-separator@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-modules-systemjs@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-class-static-block@^7.22.0(7.22.3) (18:10:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-private-property-in-object@^7.22.0(7.22.3) (18:11:00)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-async-generator-functions@^7.22.0(7.22.3) (18:10:54)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-rest-spread@^7.22.0(7.22.3) (18:11:09)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@^7.22.0(7.22.3) (18:11:08)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › babel-plugin-polyfill-corejs2@^0.4.2(0.4.3) (02:07:04)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-optional-chaining@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-parameters@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/compat-data@^7.22.0(7.22.3) (18:10:50)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@^7.22.1(7.22.1) (00:34:49)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-super@7.18.6 › @babel/helper-replace-supers@^7.18.6(7.22.1) (00:34:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-async-generator-functions@7.22.3 › @babel/helper-environment-visitor@^7.22.1(7.22.1) (00:34:49)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-unicode-regex@7.18.6 › @babel/helper-create-regexp-features-plugin@^7.18.6(7.22.1) (00:34:49)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-exponentiation-operator@7.18.6 › @babel/helper-builder-binary-assignment-operator-visitor@^7.18.6(7.22.3) (18:11:07)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-modules-umd@7.18.6 › @babel/helper-module-transforms@^7.18.6(7.22.1) (00:34:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-private-methods@7.22.3 › @babel/helper-create-class-features-plugin@^7.22.1(7.22.1) (00:34:57)<br>    → vue-codemod@0.0.5 › jscodeshift@0.11.0 › @babel/preset-typescript@7.21.5 › @babel/plugin-transform-typescript@^7.21.3(7.22.3) (18:11:01)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-super@7.18.6 › @babel/helper-replace-supers@7.22.1 › @babel/helper-member-expression-to-functions@^7.22.0(7.22.3) (18:11:08)<br>    → vue-codemod@0.0.5 › @babel/core@^7.10.3(7.22.1) (00:34:57)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@7.22.1 › browserslist@4.21.5 › electron-to-chromium@^1.4.284(1.4.411) (10:02:21)<br>    → @types/inquirer@8.2.6 › @types/through@0.0.30 › @types/node@*(20.2.5) (04:33:01)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-super@7.18.6 › @babel/helper-replace-supers@7.22.1 › @babel/traverse@^7.22.1(7.22.1) (00:34:54)<br>    → vue-codemod@0.0.5 › @vue/compiler-core@3.3.4 › @babel/parser@^7.21.3(7.22.3) (18:10:51)<br>    → vue-codemod@0.0.5 › @babel/core@7.22.1 › @babel/generator@^7.22.0(7.22.3) (18:11:08)<br>    → vue-codemod@0.0.5 › @babel/types@^7.12.12(7.22.3) (18:11:04)<br>    → vue-codemod@0.0.5 › @babel/core@7.22.1 › @babel/helpers@^7.22.0(7.22.3) (18:11:07)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-regenerator@7.21.5 › regenerator-transform@0.15.1 › @babel/runtime@^7.8.4(7.22.3) (18:11:03)<br>  2023-05-26<br>    → vue-codemod@0.0.5 › jscodeshift@0.11.0 › flow-parser@0.*(0.207.0) (11:19:57)<br>  2023-05-24<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@7.22.1 › browserslist@4.21.5 › node-releases@^2.0.8(2.0.12) (10:05:03)<br>  2023-05-22<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-computed-properties@7.21.5 › @babel/template@^7.20.7(7.21.9) (18:02:21)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@7.22.1 › browserslist@4.21.5 › caniuse-lite@^1.0.30001449(1.0.30001489) (17:47:42)<br>Run 2 script(s) in 4s.<br>All packages installed (778 packages installed from npm registry, used 1m(network 1m), speed 557.5KB/s, json 680(8.43MB), tarball 33.89MB, manifests cache hit 0, etag hit 0 / miss 0)<br>[@vue/cli@5.0.8] link C:\Users\user\AppData\Roaming\npm\vue@ -&gt; C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli\bin\vue.js<br><br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

<p>验证安装，在<code>cmd</code>输入<code>vue</code>，出现以下信息即安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;vue<br>Usage: vue &lt;command&gt; [options]<br><br>Options:<br>  -V, --version                              output the version number<br>  -h, --help                                 display help for command<br><br>Commands:<br>  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service<br>  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator in an already created project<br>  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin in an already created project<br>  inspect [options] [paths...]               inspect the webpack config in a project with vue-cli-service<br>  serve                                      alias of &quot;npm run serve&quot; in the current project<br>  build                                      alias of &quot;npm run build&quot; in the current project<br>  ui [options]                               start and open the vue-cli ui<br>  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires<br>                                             @vue/cli-init)<br>  config [options] [value]                   inspect and modify the config<br>  outdated [options]                         (experimental) check for outdated vue cli service / plugins<br>  upgrade [options] [plugin-name]            (experimental) upgrade vue cli service / plugins<br>  migrate [options] [plugin-name]            (experimental) run migrator for an already-installed cli plugin<br>  info                                       print debugging information about your environment<br>  help [command]                             display help for command<br><br>  Run vue &lt;command&gt; --help for detailed usage of given command.<br><br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

<p>当然还可以查看下版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;vue --version<br>@vue/cli 5.0.8<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue启动失败（VSCode）</title>
    <url>/2023/10/03/VueStartFail/</url>
    <content><![CDATA[<blockquote>
<p>Vue UI 在VS Code终端启动失败</p>
</blockquote>
<span id="more"></span>

<h1 id="Vue-UI-在VS-Code终端启动失败"><a href="#Vue-UI-在VS-Code终端启动失败" class="headerlink" title="Vue UI 在VS Code终端启动失败"></a>Vue UI 在VS Code终端启动失败</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>错误信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> F:\myblog\myblog&gt; vue ui<br>vue : 无法加载文件 C:\Users\user\AppData\Roaming\npm\vue.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参 <br>阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="hljs-number">135170</span> 中的 about_Execution_Policies。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ vue ui<br>+ ~~~<br>    + CategoryInfo          : SecurityError: (:) []，PSSecurityException<br>    + FullyQualifiedErrorId : UnauthorizedAccess<br><span class="hljs-built_in">PS</span> F:\myblog\myblog&gt; <br></code></pre></td></tr></table></figure>

<p>分析：</p>
<p>点开地址：https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170</p>
<p>发现此处信息</p>
<h3 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h3><ul>
<li>设置默认执行策略。</li>
<li><strong>Restricted</strong> 适用于 Windows 客户端的 。</li>
<li>适用于 Windows 服务器的 <strong>RemoteSigned</strong>。</li>
</ul>
<p>此处说明，在Windows 客户端，我们的策略默认是<strong>Restricted</strong></p>
<p>查看相应文本信息：</p>
<h3 id="Restricted"><a href="#Restricted" class="headerlink" title="Restricted"></a>Restricted</h3><ul>
<li>Windows 客户端计算机的默认执行策略。</li>
<li>允许单个命令，但不允许脚本。</li>
<li>阻止运行所有脚本文件，包括格式化和配置文件 () <code>.ps1xml</code> 、模块脚本文件 (<code>.psm1</code>) ，以及 PowerShell 配置文件 () <code>.ps1</code> 。</li>
</ul>
<p>上面说  配置文件 () <code>.ps1</code> 的文件也会被阻止运行，而我们需要运行的<code>vue.ps1</code>正好属于此项。</p>
<p>OK，问题已查明，要解决问题需要更改执行策略。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>查看其他几个策略，寻找允许脚本运行的策略：</p>
<h3 id="AllSigned"><a href="#AllSigned" class="headerlink" title="AllSigned"></a>AllSigned</h3><ul>
<li>脚本可以运行。</li>
<li>要求所有脚本和配置文件都由受信任的发布者签名，包括在本地计算机上编写的脚本。</li>
<li>从尚未分类为受信任或不受信任的发布者运行脚本之前，会提示你。</li>
<li>运行已签名但恶意脚本的风险。</li>
</ul>
<h3 id="RemoteSigned"><a href="#RemoteSigned" class="headerlink" title="RemoteSigned"></a>RemoteSigned</h3><ul>
<li>Windows Server 计算机的默认执行策略。</li>
<li>脚本可以运行。</li>
<li>需要受信任的发布者对从 Internet 下载的脚本和配置文件（包括电子邮件和即时消息程序）的数字签名。</li>
<li>不需要在本地计算机上编写且未从 Internet 下载的脚本上使用数字签名。</li>
<li>如果未阻止脚本（例如使用 cmdlet），则运行从 Internet 下载且未签名的 <code>Unblock-File</code> 脚本。</li>
<li>运行来自 Internet 以外的源的未签名脚本以及可能是恶意的已签名脚本的风险。</li>
</ul>
<p><strong>RemoteSigned</strong>  为服务器端的默认执行策略，我们需要选择把策略改成这个</p>
<p><strong>用管理员身份打开PowerShell</strong></p>
<p>输入命令（设置执行策略为：RemoteSigned）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned<br></code></pre></td></tr></table></figure>

<p>然后输入Y，确定更改。</p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">Windows PowerShell<br>版权所有 (C) Microsoft Corporation。保留所有权利。<br><br>尝试新的跨平台 PowerShell https://aka.ms/pscore6<br><br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt; <span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned<br><br>执行策略更改<br>执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class="hljs-number">135170</span><br>中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?<br>[<span class="hljs-type">Y</span>] 是(Y)  [<span class="hljs-type">A</span>] 全是(A)  [<span class="hljs-type">N</span>] 否(N)  [<span class="hljs-type">L</span>] 全否(L)  [<span class="hljs-type">S</span>] 暂停(S)  [?] 帮助 (默认值为“N”): Y<br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt;<br></code></pre></td></tr></table></figure>

<p>OK，再次在VSCode中执行终端命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> F:\myblog\myblog&gt; vue ui<br>🚀  Starting GUI...<br>🌠  Ready on http://localhost:<span class="hljs-number">8000</span><br><br></code></pre></td></tr></table></figure>

<p>发现已成功启动！</p>
<p>OK，问题已解决，去开启你的奇妙之旅吧！</p>
<hr>
<p>注：以上内容为本人实践总结，如有疏漏或错误的地方，还请评论区指正；如果您觉得写的还不错或者对您有帮助的话，欢迎点赞收藏。</p>
]]></content>
      <categories>
        <category>异常处理</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
