<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库分区</title>
    <link href="/2025/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/"/>
    <url>/2025/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库分区">数据库分区</h2><p>在 <code>MySQL</code> 中，<strong>分区表</strong>是一种将表数据按照某种规则划分为多个独立部分的技术。分区可以显著提高查询性能、简化数据管理并优化存储效率。</p><blockquote><p>分区不改变原表数据，仍然是一张表，不同与分库分表。</p></blockquote><h3 id="一、分区表的基本概念">一、分区表的基本概念</h3><ul><li><strong>分区（Partition）</strong>：将表数据划分为多个逻辑部分，每个分区可以单独管理和存储。</li><li><strong>分区键（Partition Key）</strong>：用于决定数据如何分区的列或表达式。</li><li><strong>分区类型</strong>：<code>MySQL</code> 支持多种分区类型，包括 <strong>范围分区（RANGE）</strong>、<strong>列表分区（LIST）</strong>、<strong>哈希分区（HASH）</strong> 和 <strong>键分区（KEY）</strong>。</li></ul><h3 id="二、创建分区表的语法">二、创建分区表的语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name (<br>    column1 datatype,<br>    column2 datatype,<br>    ...<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> partition_type (partition_key) (<br>    <span class="hljs-keyword">PARTITION</span> partition_name1 <span class="hljs-keyword">VALUES</span> LESS THAN (value1),<br>    <span class="hljs-keyword">PARTITION</span> partition_name2 <span class="hljs-keyword">VALUES</span> LESS THAN (value2),<br>    ...<br>);<br></code></pre></td></tr></table></figure><h3 id="三、分区类型及示例">三、分区类型及示例</h3><h4 id="1-范围分区（RANGE-Partitioning）">(1) 范围分区（RANGE Partitioning）</h4><p>按某个范围值进行分区，常用于时间序列数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> orders (<br>    order_id <span class="hljs-type">INT</span>,<br>    order_date <span class="hljs-type">DATE</span>,<br>    amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (order_id, order_date)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">RANGE</span> (<span class="hljs-keyword">YEAR</span>(order_date)) (<br>    <span class="hljs-keyword">PARTITION</span> p2021 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2022</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2022 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2023</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2023 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2024</span>)<br>);<br></code></pre></td></tr></table></figure><ul><li>数据会根据 <code>order_date</code> 的年份分配到不同的分区。</li></ul><h4 id="2-列表分区（LIST-Partitioning）">(2) 列表分区（LIST Partitioning）</h4><p>按某个离散值列表进行分区。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sales (<br>    sale_id <span class="hljs-type">INT</span>,<br>    region <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (sale_id, region)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> LIST (region) (<br>    <span class="hljs-keyword">PARTITION</span> p_north <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Beijing&#x27;</span>, <span class="hljs-string">&#x27;Tianjin&#x27;</span>),<br>    <span class="hljs-keyword">PARTITION</span> p_south <span class="hljs-keyword">VALUES</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Guangzhou&#x27;</span>, <span class="hljs-string">&#x27;Shenzhen&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><ul><li>数据会根据 <code>region</code> 的值分配到不同的分区。</li></ul><h4 id="3-哈希分区（HASH-Partitioning）">(3) 哈希分区（HASH Partitioning）</h4><p>通过哈希函数对分区键进行计算，均匀分布数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>    user_id <span class="hljs-type">INT</span>,<br>    username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY (user_id)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> HASH(user_id)<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><ul><li>数据会根据 <code>user_id</code> 的哈希值分配到 4 个分区中。</li></ul><h4 id="4-键分区（KEY-Partitioning）">(4) 键分区（KEY Partitioning）</h4><p>类似于哈希分区，但使用 <code>MySQL</code> 内部的哈希函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> logs (<br>    log_id <span class="hljs-type">INT</span>,<br>    log_message TEXT,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (log_id)<br>)<br><span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> KEY(log_id)<br>PARTITIONS <span class="hljs-number">4</span>;<br></code></pre></td></tr></table></figure><h3 id="四、分区表的注意事项">四、分区表的注意事项</h3><h4 id="1-分区键的选择">(1) <strong>分区键的选择</strong></h4><ul><li>分区键必须是表的主键或唯一键的一部分。</li><li>如果分区键选择不当，可能导致数据分布不均匀，影响查询性能。</li></ul><h4 id="2-分区数量">(2) <strong>分区数量</strong></h4><ul><li>分区数量过多可能导致元数据管理开销增加，影响性能。</li><li>分区数量过少可能导致分区内的数据量过大，无法达到分区的效果。</li></ul><h4 id="3-分区规则">(3) <strong>分区规则</strong></h4><ul><li>分区规则必须与业务需求匹配，例如按时间分区适合时间序列数据。</li><li>如果分区规则与数据分布不匹配，可能导致查询性能下降。</li></ul><h4 id="4-分区维护">(4) <strong>分区维护</strong></h4><ul><li>分区表的数据管理（如备份、恢复、删除）需要针对每个分区进行操作。</li><li>例如，删除历史数据时，可以直接删除整个分区。</li></ul><h4 id="5-查询优化">(5) <strong>查询优化</strong></h4><ul><li>查询条件应尽量包含分区键，以便利用分区裁剪（Partition Pruning）优化性能。</li><li>如果查询条件不包含分区键，可能会导致全表扫描。</li></ul><h4 id="6-分区表的限制">(6) <strong>分区表的限制</strong></h4><ul><li>分区表不支持某些 <code>MySQL</code> 功能，如外键、全文索引等。</li><li>分区表的存储引擎必须是 <code>InnoDB</code> 或 <code>MyISAM</code>。</li></ul><h3 id="五、分区表的管理">五、分区表的管理</h3><h4 id="1-添加分区">(1) 添加分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PARTITION</span> (<br>    <span class="hljs-keyword">PARTITION</span> p2024 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2025</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="2-删除分区">(2) 删除分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PARTITION</span> p2021;<br></code></pre></td></tr></table></figure><h4 id="3-合并分区">(3) 合并分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders REORGANIZE <span class="hljs-keyword">PARTITION</span> p2021, p2022 <span class="hljs-keyword">INTO</span> (<br>    <span class="hljs-keyword">PARTITION</span> p2021_2022 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2023</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="4-查看分区信息">(4) 查看分区信息</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.PARTITIONS<br><span class="hljs-keyword">WHERE</span> TABLE_NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;orders&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="5-拆分分区">(5) 拆分分区</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将other分区数据，拆分出p2019年和p2022年的分区和兜底分区p_others</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> orders REORGANIZE <span class="hljs-keyword">PARTITION</span> p_others <span class="hljs-keyword">INTO</span> (<br>    <span class="hljs-keyword">PARTITION</span> p2019 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2020</span>),<br>    <span class="hljs-keyword">PARTITION</span> p2022 <span class="hljs-keyword">VALUES</span> LESS THAN (<span class="hljs-number">2023</span>),<br>    <span class="hljs-keyword">PARTITION</span> p_others <span class="hljs-keyword">VALUES</span> LESS THAN MAXVALUE<br>);<br></code></pre></td></tr></table></figure><h3 id="六、分区表的适用场景">六、分区表的适用场景</h3><ul><li><strong>时间序列数据</strong>：例如按日期分区的日志表、订单表等。</li><li><strong>大数据量</strong>：当表的数据量非常大时，通过分区减少查询和管理的开销。</li><li><strong>数据归档</strong>：将历史数据存储到单独的分区中，便于快速删除或归档。</li></ul><h3 id="七、总结">七、总结</h3><p>分区表是一种强大的数据库设计技术，适用于大数据量、时间序列数据等场景。通过合理设计分区键和分区类型，可以显著提高查询性能和数据管理效率。然而，分区表的使用也需要谨慎，避免分区数量过多或分区键选择不当导致的性能问题。在设计和使用分区表时，应结合业务需求和数据特点，进行合理的规划和优化。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>窗口函数</title>
    <link href="/2025/02/27/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
    <url>/2025/02/27/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="窗口函数">窗口函数</h2><p>窗口函数是<code>MySQL8.0</code>版本新增的，相对于聚合函数把所有行聚合成一行，窗口函数可以将每一行的数据进行分别处理。</p><h3 id="一、序号函数">一、序号函数</h3><p>用来实现分组排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 格式<br>row_number() | rank() | dense_rank() over (<br>partition by ... # 按什么字段分组/分区<br>order by ... # 按照什么排序<br>)<br></code></pre></td></tr></table></figure><p>例如：成绩表<code>Score</code>，序号函数皆以此表查询为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| id | score |<br>| -- | ----- |<br>| 1  | 3.5   |<br>| 2  | 3.65  |<br>| 3  | 4     |<br>| 4  | 3.85  |<br>| 5  | 4     |<br>| 6  | 3.65  |<br></code></pre></td></tr></table></figure><h4 id="1-1、ROW-NUMBER">1.1、ROW_NUMBER()</h4><p>此函数进行排序时，相同的字段会分开排序。</p><p>查询成绩表，按分数进行排序，相同分数的不算在同一名（分开排）</p><p>如果不指定 <code>PARTITION BY</code>，窗口函数默认会将整个结果集视为一个分组，即不进行分组【全局排序】，计算基于所有行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>    score,<br>    ROW_NUMBER() OVER (ORDER BY score DESC) AS `rank`<br>FROM Scores<br>ORDER BY score DESC;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 2    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 3    |<br>| 3.65  | 4    |<br>| 3.65  | 5    |<br>| 3.5   | 6    |<br></code></pre></td></tr></table></figure><h4 id="1-2、RANK">1.2、RANK()</h4><p>此函数排序时，相同的字段会排在同一名，之后的字段排名为：<code>当前字段排名+当前排名字段总数-1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>    score,<br>    RANK() OVER (ORDER BY score DESC) AS `rank`<br>FROM Scores<br>ORDER BY score DESC;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 3    |<br>| 3.65  | 4    |<br>| 3.65  | 4    |<br>| 3.5   | 6    |<br></code></pre></td></tr></table></figure><h4 id="1-3、DENSE-RANK">1.3、DENSE_RANK()</h4><p>此函数排序时，相同的字段会排在同一名，之后的字段不会受当前字段重复数影响，直接就是当前排名+1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>    score,<br>    DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`<br>FROM Scores<br>ORDER BY score DESC;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 2    |<br>| 3.65  | 3    |<br>| 3.65  | 3    |<br>| 3.5   | 4    |<br></code></pre></td></tr></table></figure><p>放在一起对比：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    score,<br>    <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> `row_number`,<br>    <span class="hljs-built_in">RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> `rank`,<br>    <span class="hljs-built_in">DENSE_RANK</span>() <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>) <span class="hljs-keyword">AS</span> `dense_rank`<br><span class="hljs-keyword">FROM</span> Scores<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | row_number | rank | dense_rank |<br>| ----- | ---------- | ---- | ---------- |<br>| 4     | 1          | 1    | 1          |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 2          | 1    | 1          |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 3          | 3    | 2          |<br>| 3.65  | 4          | 4    | 3          |<br>| 3.65  | 5          | 4    | 3          |<br>| 3.5   | 6          | 6    | 4          |<br></code></pre></td></tr></table></figure><p>思考：如果现在需要找出排名前3的成绩，该怎么做呢？（以<code>dense_rank()</code>排序）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT score,`rank`<br>FROM (<br>         SELECT<br>             score,<br>             DENSE_RANK() OVER (ORDER BY score DESC) AS `rank`<br>         FROM Scores<br>         ORDER BY score DESC<br>     ) as temp<br>WHERE temp.rank&lt;=3;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| score | rank |<br>| ----- | ---- |<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 4     | 1    |  # &lt;&lt;&lt; 看这两个相同的成绩对应的排序<br>| 3.85  | 2    |<br>| 3.65  | 3    |<br>| 3.65  | 3    |<br></code></pre></td></tr></table></figure><h3 id="二、分布函数">二、分布函数</h3><p>应用场景：查询小于等于当前薪资的比例。</p><h4 id="2-1、PERCENT-RANK-【不常用】">2.1、PERCENT_RANK() 【不常用】</h4><blockquote><p>在以下场景中 <code>PERCENT_RANK()</code> 非常有用：</p><ol><li><strong>百分位数计算</strong>：<ul><li>当需要将数据划分为百分位数（如 90th percentile）时，<code>PERCENT_RANK()</code> 可以帮助确定每个值的相对位置。</li></ul></li><li><strong>数据分布分析</strong>：<ul><li>通过 <code>PERCENT_RANK()</code> 可以快速了解数据在整个数据集中的分布情况。</li></ul></li><li><strong>性能评估</strong>：<ul><li>在评估学生成绩、员工绩效等场景中，<code>PERCENT_RANK()</code> 可以直观地反映某个人在整体中的表现。</li></ul></li><li><strong>数据标准化</strong>：<ul><li>在机器学习或统计分析中，<code>PERCENT_RANK()</code> 可以用于将数据标准化到 <code>[0, 1]</code> 范围内。</li></ul></li></ol></blockquote><p>此函数基于排名的相对位置，公式为 <code>(rank - 1) / (总行数 - 1)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    dname,<br>    salary,<br>    rank() OVER (partition by dname ORDER BY salary) AS `rank`,<br>    PERCENT_RANK() OVER (partition by dname ORDER BY salary) AS `percent_rank`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| dname | salary | rank | percent_rank |<br>| ----- | ------ | ---- | ------------ | /* 研发部总计4项*/<br>| 研发部 | 5000   | 1    | 0            | /* 0 = (1-1)/(4-1) */<br>| 研发部 | 5000   | 1    | 0            |<br>| 研发部 | 6000   | 3    | 0.6666666666 | /* 0.66 = (3-1)/(4-1) */<br>| 研发部 | 8000   | 4    | 1            |<br>| 销售部 | 3000   | 1    | 0            |<br>| 销售部 | 3000   | 1    | 0            |<br>| 销售部 | 3000   | 1    | 0            |<br>| 销售部 | 4000   | 4    | 1            |<br></code></pre></td></tr></table></figure><h4 id="2-2、CUME-DIST">2.2、CUME_DIST()</h4><p>此函数用于计算累积分布值，表示在有序数据集中，某一项的值小于或等于当前值的比例。</p><ul><li><p><strong>正序（默认）</strong>：统计每一项内，小于或等于此项的值与总数的比值。</p><p>公式为：</p><blockquote><p>CUME_DIST(x)=小于等于 x 的行数总行数CUME_DIST(<em>x</em>)=总行数小于等于 <em>x</em> 的行数</p></blockquote></li><li><p><strong>倒序</strong>：统计每一项内，大于或等于此项的值与总数的比值。</p><p>公式为：</p><blockquote><p>CUME_DIST(x)=大于等于 x 的行数总行数CUME_DIST(<em>x</em>)=总行数大于等于 <em>x</em> 的行数</p></blockquote></li></ul><p>应用场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    cume_dist() OVER (partition by dname ORDER BY salary) AS `cume_dist`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary | cume_dist |<br>| ------ | --------- |<br>| 5000   | 0.5       |<br>| 5000   | 0.5       |<br>| 6000   | 0.75      |<br>| 8000   | 1         |<br>| 3000   | 0.75  |<br>| 3000   | 0.75  |<br>| 3000   | 0.75 |<br>| 4000   | 1  |<br></code></pre></td></tr></table></figure><h3 id="三、前后函数">三、前后函数</h3><p>用途：返回位于当前行的前n行或后n行的expr的值</p><h4 id="3-1、LAG-函数">3.1、<code>LAG()</code> 函数</h4><p><code>LAG()</code> 函数用于访问当前行之前的某一行的数据。</p><h5 id="语法：">语法：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LAG(column_name, offset, default_value) OVER (PARTITION BY ... ORDER BY ...)<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>offset</code></strong>：偏移量，表示要访问的行数（默认为 1，即前一行）。</li><li><strong><code>default_value</code></strong>：如果偏移量超出范围（如第一行没有前一行），则返回的默认值（可选，默认为 <code>NULL</code>）。</li></ul><h5 id="应用场景：">应用场景：</h5><ul><li>计算当前行与前一行的差值。</li><li>分析时间序列数据中的变化趋势。</li></ul><h5 id="示例：">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与前一天的差值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    sales_date,<br>    sales_amount,<br>    <span class="hljs-built_in">LAG</span>(sales_amount, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> previous_sales_amount,<br>    sales_amount <span class="hljs-operator">-</span> <span class="hljs-built_in">LAG</span>(sales_amount, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> sales_difference<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>previous_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>0</td><td>100</td></tr><tr><td>2023-01-02</td><td>150</td><td>100</td><td>50</td></tr><tr><td>2023-01-03</td><td>200</td><td>150</td><td>50</td></tr><tr><td>2023-01-04</td><td>180</td><td>200</td><td>-20</td></tr></tbody></table><hr><h4 id="3-2、LEAD-函数">3.2、<strong><code>LEAD()</code> 函数</strong></h4><p><code>LEAD()</code> 函数用于访问当前行之后的某一行的数据。</p><h5 id="语法：-2">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">LEAD</span>(column_name, <span class="hljs-keyword">offset</span>, default_value) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...)<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>offset</code></strong>：偏移量，表示要访问的行数（默认为 1，即后一行）。</li><li><strong><code>default_value</code></strong>：如果偏移量超出范围（如最后一行没有后一行），则返回的默认值（可选，默认为 <code>NULL</code>）。</li></ul><h5 id="应用场景：-2">应用场景：</h5><ul><li>计算当前行与后一行的差值。</li><li>预测或分析未来趋势。</li></ul><h5 id="示例：-2">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与后一天的差值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SQLSELECT<br>    sales_date,<br>    sales_amount,<br>    LEAD(sales_amount, 1, 0) OVER (ORDER BY sales_date) AS next_sales_amount,<br>    LEAD(sales_amount, 1, 0) OVER (ORDER BY sales_date) - sales_amount AS sales_difference<br>FROM<br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>next_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>150</td><td>50</td></tr><tr><td>2023-01-02</td><td>150</td><td>200</td><td>50</td></tr><tr><td>2023-01-03</td><td>200</td><td>180</td><td>-20</td></tr><tr><td>2023-01-04</td><td>180</td><td>0</td><td>-180</td></tr></tbody></table><hr><h4 id="3-3、LAG-和-LEAD-的区别">3.3、<strong><code>LAG()</code> 和 <code>LEAD()</code> 的区别</strong></h4><table><thead><tr><th>函数</th><th>方向</th><th>作用</th></tr></thead><tbody><tr><td><code>LAG()</code></td><td>向后</td><td>访问当前行之前的某一行的数据。</td></tr><tr><td><code>LEAD()</code></td><td>向前</td><td>访问当前行之后的某一行的数据。</td></tr></tbody></table><hr><h4 id="3-4、常见应用场景">3.4、<strong>常见应用场景</strong></h4><ol><li><strong>时间序列分析</strong>：<ul><li>计算每日、每月或每年的变化趋势。</li><li>例如：计算每天的销售额与前一天的差值。</li></ul></li><li><strong>相邻行比较</strong>：<ul><li>比较当前行与相邻行的值，分析变化或异常。</li><li>例如：检查库存变化或温度波动。</li></ul></li><li><strong>预测或回填数据</strong>：<ul><li>使用 <code>LEAD()</code> 预测未来值，或使用 <code>LAG()</code> 回填历史值。</li></ul></li><li><strong>数据填充</strong>：<ul><li>对于缺失值，可以使用 <code>LAG()</code> 或 <code>LEAD()</code> 从相邻行填充。</li></ul></li></ol><h3 id="总结"><strong>总结</strong></h3><ul><li><code>LAG()</code> 用于访问当前行之前的某一行的数据，适合分析历史趋势或回填数据。</li><li><code>LEAD()</code> 用于访问当前行之后的某一行的数据，适合预测未来趋势或分析未来变化。</li><li>两者在时间序列分析、相邻行比较和数据填充等场景中非常有用。如果需要分析数据的变化趋势或预测未来值，<code>LAG()</code> 和 <code>LEAD()</code> 是强大的工具。</li></ul><h4 id=""></h4><h3 id="四、头尾函数">四、头尾函数</h3><p>用于在窗口框架内访问第一行或最后一行的数据。它们通常用于计算累积值、分析趋势或提取边界值。</p><hr><h4 id="4-1、FIRST-VALUE-函数">4.1、<strong><code>FIRST_VALUE()</code> 函数</strong></h4><p><code>FIRST_VALUE()</code> 函数返回窗口框架内第一行的值。</p><h5 id="语法：-3">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">FIRST_VALUE</span>(column_name) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ... [<span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> ...])<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li><li><strong><code>ROWS BETWEEN</code></strong>：可选，定义窗口框架的范围（默认为 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>）。</li></ul><h5 id="应用场景：-3">应用场景：</h5><ul><li>计算累积值（如累积销售额）。</li><li>提取每组中的第一个值。</li></ul><h5 id="示例：-3">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与第一天的销售额的差值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    sales_date,<br>    sales_amount,<br>    <span class="hljs-built_in">FIRST_VALUE</span>(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> first_sales_amount,<br>    sales_amount <span class="hljs-operator">-</span> <span class="hljs-built_in">FIRST_VALUE</span>(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> sales_difference<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>first_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>100</td><td>0</td></tr><tr><td>2023-01-02</td><td>150</td><td>100</td><td>50</td></tr><tr><td>2023-01-03</td><td>200</td><td>100</td><td>100</td></tr><tr><td>2023-01-04</td><td>180</td><td>100</td><td>80</td></tr></tbody></table><hr><h4 id="4-2、LAST-VALUE-函数">4.2、<strong><code>LAST_VALUE()</code> 函数</strong></h4><p><code>LAST_VALUE()</code> 函数返回窗口框架内最后一行的值。</p><h5 id="语法：-4">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">LAST_VALUE</span>(column_name) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ... [<span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> ...])<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li><li><strong><code>ROWS BETWEEN</code></strong>：可选，定义窗口框架的范围（默认为 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>）。</li></ul><h5 id="注意：">注意：</h5><p>默认情况下，<code>LAST_VALUE()</code> 的窗口框架是 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>，这意味着它只会返回当前行之前的值。为了获取整个窗口的最后一个值，需要将窗口框架设置为 <code>UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code>。</p><h5 id="应用场景：-4">应用场景：</h5><ul><li>计算每组中的最后一个值。</li><li>分析趋势或提取边界值。</li></ul><h5 id="示例：-4">示例：</h5><p>假设有一组每日销售数据，需要计算每天的销售额与最后一天的销售额的差值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">SQLSELECT<br>    sales_date,<br>    sales_amount,<br>    LAST_VALUE(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">PRECEDING</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">FOLLOWING</span>) <span class="hljs-keyword">AS</span> last_sales_amount,<br>    LAST_VALUE(sales_amount) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date <span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">PRECEDING</span> <span class="hljs-keyword">AND</span> <span class="hljs-keyword">UNBOUNDED</span> <span class="hljs-keyword">FOLLOWING</span>) - sales_amount <span class="hljs-keyword">AS</span> sales_difference<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>last_sales_amount</th><th>sales_difference</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>180</td><td>80</td></tr><tr><td>2023-01-02</td><td>150</td><td>180</td><td>30</td></tr><tr><td>2023-01-03</td><td>200</td><td>180</td><td>-20</td></tr><tr><td>2023-01-04</td><td>180</td><td>180</td><td>0</td></tr></tbody></table><hr><h4 id="4-3、FIRST-VALUE-和-LAST-VALUE-的区别">4.3、<strong><code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 的区别</strong></h4><table><thead><tr><th>函数</th><th>作用</th><th>默认窗口框架</th></tr></thead><tbody><tr><td><code>FIRST_VALUE()</code></td><td>返回窗口框架内第一行的值。</td><td><code>UNBOUNDED PRECEDING AND CURRENT ROW</code></td></tr><tr><td><code>LAST_VALUE()</code></td><td>返回窗口框架内最后一行的值。</td><td><code>UNBOUNDED PRECEDING AND CURRENT ROW</code></td></tr></tbody></table><hr><h4 id="4-4、常见应用场景">4.4、<strong>常见应用场景</strong></h4><ol><li><strong>累积值计算</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 计算从开始到当前行的累积值。</li><li>使用 <code>LAST_VALUE()</code> 计算从当前行到结束的累积值。</li></ul></li><li><strong>趋势分析</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 分析数据的起始和结束趋势。</li></ul></li><li><strong>边界值提取</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 提取每组中的第一个值。</li><li>使用 <code>LAST_VALUE()</code> 提取每组中的最后一个值。</li></ul></li><li><strong>数据标准化</strong>：<ul><li>使用 <code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 将数据标准化到某个范围。</li></ul></li></ol><hr><h4 id="4-5、总结">4.5、<strong>总结</strong></h4><ul><li><code>FIRST_VALUE()</code> 用于访问窗口框架内的第一个值，适合计算累积值或提取起始值。</li><li><code>LAST_VALUE()</code> 用于访问窗口框架内的最后一个值，适合分析趋势或提取边界值。</li><li>两者在累积值计算、趋势分析和边界值提取等场景中非常有用。如果需要分析数据的起始或结束趋势，<code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code> 是强大的工具。</li></ul><h3 id="五、其他函数">五、其他函数</h3><h4 id="5-1、NTH-VALUE-函数">5.1、<strong><code>NTH_VALUE()</code> 函数</strong></h4><p><code>NTH_VALUE()</code> 函数用于返回窗口框架内第 N 行的值。</p><h5 id="语法：-5">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">NTH_VALUE</span>(column_name, N) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ... [<span class="hljs-keyword">ROWS</span> <span class="hljs-keyword">BETWEEN</span> ...])<br></code></pre></td></tr></table></figure><ul><li><strong><code>column_name</code></strong>：要访问的列。</li><li><strong><code>N</code></strong>：指定要返回的行号（例如，<code>1</code> 表示第一行，<code>2</code> 表示第二行，依此类推）。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li><li><strong><code>ROWS BETWEEN</code></strong>：可选，定义窗口框架的范围（默认为 <code>UNBOUNDED PRECEDING AND CURRENT ROW</code>）。</li></ul><h5 id="应用场景：-5">应用场景：</h5><ul><li>提取窗口框架内指定行的值。</li><li>分析数据集中特定位置的值。</li></ul><h5 id="示例：-5">示例：</h5><p>假设有一组每日销售数据，需要获取每天销售额的第二个值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    sales_date,<br>    sales_amount,<br>    <span class="hljs-built_in">NTH_VALUE</span>(sales_amount, <span class="hljs-number">2</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date) <span class="hljs-keyword">AS</span> second_sales_amount<br><span class="hljs-keyword">FROM</span><br>    daily_sales;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>sales_date</th><th>sales_amount</th><th>second_sales_amount</th></tr></thead><tbody><tr><td>2023-01-01</td><td>100</td><td>NULL</td></tr><tr><td>2023-01-02</td><td>150</td><td>150</td></tr><tr><td>2023-01-03</td><td>200</td><td>150</td></tr><tr><td>2023-01-04</td><td>180</td><td>150</td></tr></tbody></table><p>注意：如果窗口框架内没有第 N 行，<code>NTH_VALUE()</code> 会返回 <code>NULL</code>。</p><hr><h4 id="5-2、NTILE-函数">5.2、<strong><code>NTILE()</code> 函数</strong></h4><p><code>NTILE()</code> 函数用于将数据分区划分为指定数量的桶（bucket），并为每一行分配一个桶号。</p><h5 id="语法：-6">语法：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">NTILE</span>(N) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> ... <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> ...)<br></code></pre></td></tr></table></figure><ul><li><strong><code>N</code></strong>：指定要划分的桶数。</li><li><strong><code>PARTITION BY</code></strong>：可选，用于分组。</li><li><strong><code>ORDER BY</code></strong>：指定窗口内的排序。</li></ul><h5 id="应用场景：-6">应用场景：</h5><ul><li>将数据划分为百分位数、四分位数等。</li><li>数据分箱（binning）或分组。</li></ul><h5 id="示例：-6">示例：</h5><p>假设有一组学生成绩数据，需要将成绩分为 4 个等级（四分位数）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    student_id,<br>    score,<br>    <span class="hljs-built_in">NTILE</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">OVER</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score) <span class="hljs-keyword">AS</span> quartile<br><span class="hljs-keyword">FROM</span><br>    student_scores;<br></code></pre></td></tr></table></figure><p>结果可能如下：</p><table><thead><tr><th>student_id</th><th>score</th><th>quartile</th></tr></thead><tbody><tr><td>1</td><td>50</td><td>1</td></tr><tr><td>2</td><td>60</td><td>1</td></tr><tr><td>3</td><td>70</td><td>2</td></tr><tr><td>4</td><td>80</td><td>3</td></tr><tr><td>5</td><td>90</td><td>4</td></tr></tbody></table><hr><h4 id="5-3、NTH-VALUE-和-NTILE-的区别">5.3、<strong><code>NTH_VALUE()</code> 和 <code>NTILE()</code> 的区别</strong></h4><table><thead><tr><th>函数</th><th>作用</th><th>主要用途</th></tr></thead><tbody><tr><td><code>NTH_VALUE()</code></td><td>返回窗口框架内第 N 行的值。</td><td>提取指定位置的值。</td></tr><tr><td><code>NTILE()</code></td><td>将数据划分为 N 个桶并分配桶号。</td><td>数据分箱、百分位数或分组。</td></tr></tbody></table><hr><h4 id="5-4、常见应用场景">5.4、<strong>常见应用场景</strong></h4><h5 id="NTH-VALUE-的应用场景"><strong><code>NTH_VALUE()</code> 的应用场景</strong></h5><ol><li><strong>提取特定位置的值</strong>：<ul><li>例如，获取某个月的第二高销售额或第三低温度。</li></ul></li><li><strong>分析数据集中特定位置的值</strong>：<ul><li>例如，找到某个时间段的中间值。</li></ul></li><li><strong>数据填充或回填</strong>：<ul><li>例如，用第 N 行的值填充缺失值。</li></ul></li></ol><h5 id="NTILE-的应用场景"><strong><code>NTILE()</code> 的应用场景</strong></h5><ol><li><strong>百分位数计算</strong>：<ul><li>例如，将成绩分为 100 个百分位数。</li></ul></li><li><strong>数据分箱（Binning）</strong>：<ul><li>例如，将销售额分为高、中、低三组。</li></ul></li><li><strong>分组分析</strong>：<ul><li>例如，将用户活跃度分为 5 个等级。</li></ul></li></ol><hr><h4 id="5-5、总结">5.5、<strong>总结</strong></h4><ul><li><strong><code>NTH_VALUE()</code></strong>：用于提取窗口框架内第 N 行的值，适合分析特定位置的数据。</li><li><strong><code>NTILE()</code></strong>：用于将数据划分为指定数量的桶，适合数据分箱、百分位数计算或分组分析。</li></ul><p>如果需要提取特定位置的值，使用 <code>NTH_VALUE()</code>；如果需要将数据划分为多个组或桶，使用 <code>NTILE()</code>。两者在数据分析和处理中都非常有用，但应用场景不同。</p><h3 id="六、开窗聚合函数">六、开窗聚合函数</h3><p>以此数据表为例：<code>user</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| id    | dname | ename  | salary |<br>| ----- | ----- | -----  | ------ |<br>| 1     | 研发部 | 张三    | 5000   |  <br>| 2     | 研发部 | 李四    | 6000   |  <br>| 3     | 研发部 | 王五    | 5000   | <br>| 4     | 研发部 | 赵四    | 8000   |  <br>| 5     | 销售部 | 卡尔    | 3000   | <br>| 6     | 销售部 | 可可    | 3000   | <br>| 7     | 销售部 | 丽丽    | 4000   | <br>| 8     | 销售部 | 楠楠    | 3000   | <br></code></pre></td></tr></table></figure><h4 id="6-1、SUM-聚合函数-开窗函数">6.1、SUM()聚合函数 + 开窗函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    sum(salary) over (order by id desc) as `total`<br>FROM user<br>ORDER BY id DESC;<br></code></pre></td></tr></table></figure><p>结果：每行都是把之前的所有行加起来求和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary | total  |<br>| ------ | ------ |<br>| 3000   | 3000   |  <br>| 4000   | 7000   |  /* 7000 = 3000 + 4000 */<br>| 3000   | 10000  |  /* 10000 = 7000 + 3000 */<br>| 3000   | 13000  |  /* 以此类推 */<br>| 8000   | 21000  |  <br>| 5000   | 26000  |  <br>| 6000   | 32000  |  <br>| 5000   | 37000  |  <br></code></pre></td></tr></table></figure><hr><p>如果不加<code>order by</code>，每一行都会显示与排序字段相同的所有行求和的最终值，可以用来对比个人与总体的数据。【这次以部门分组，这样后面的求和就是此人所在组的总值】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    dname,<br>    salary,<br>    sum(salary) over (PARTITION BY dname) as `sum`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| dname | salary | sum    |<br>| ----- | -----  | ------ |<br>| 研发部 | 5000   | 24000  |  <br>| 研发部 | 6000   | 24000  |  <br>| 研发部 | 5000   | 24000  | <br>| 研发部 | 8000   | 24000  |  <br>| 销售部 | 3000   | 10000  | <br>| 销售部 | 3000   | 10000  | <br>| 销售部 | 4000   | 10000  | <br>| 销售部 | 3000   | 10000  | <br></code></pre></td></tr></table></figure><hr><p>还可以指定求和范围：</p><p><code>rows between unbounded preceding and current row</code> 这个就是从起始行到当前行</p><p><code>rows between 3 preceding and current row</code> 这个就是从我的前3行开始到当前行</p><p><code>rows between 3 preceding and 1 following</code> 这个就是从我的前3行开始到我的后一行</p><p><code>rows between current and unbounded following</code> 这个就是从当前行到最后一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    dname,<br>    salary,<br>    sum(salary) over (partition by dname order by dname rows between unbounded preceding and current row) as `sum`<br>FROM user<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| dname | salary | sum    |<br>| ----- | -----  | ------ |<br>| 研发部 | 5000   | 5000   |  <br>| 研发部 | 6000   | 11000  |  <br>| 研发部 | 5000   | 16000  | <br>| 研发部 | 8000   | 24000  |  <br>| 销售部 | 3000   | 30000  | <br>| 销售部 | 3000   | 60000  | <br>| 销售部 | 4000   | 10000  | <br>| 销售部 | 3000   | 13000  | <br></code></pre></td></tr></table></figure><h4 id="6-2、AVG-聚合函数-开窗函数">6.2、AVG()聚合函数 + 开窗函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    salary,<br>    <span class="hljs-built_in">avg</span>(salary) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">as</span> `avg`<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>结果：每行都是把之前的所有行加起来求平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary | avg       |<br>| ------ | --------- |<br>| 3000   | 3000.0000 | <br>| 4000   | 3500.0000 |  /* 7000/2  ## (7000 = 4000 + 3000) */<br>| 3000   | 3333.3333 |  /* 10000/3 ## (10000 = 7000 + 3000) */<br>| 3000   | 3250.0000 |  /* 以此类推 */<br>| 8000   | 4200.0000 |  <br>| 5000   | 4333.3333 |  <br>| 6000   | 4571.4286 |  <br>| 5000   | 4625.0000 |  <br></code></pre></td></tr></table></figure><h4 id="6-3、MIN-聚合函数-开窗函数">6.3、MIN()聚合函数 + 开窗函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    min(salary) over (order by id desc) as `min`<br>FROM user<br>ORDER BY id DESC;<br></code></pre></td></tr></table></figure><p>结果：每一行都与之前的所有行相比得出最小值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary |  min  |<br>| ------ | ----- |<br>| 3000   | 3000  | <br>| 4000   | 3000  |  <br>| 3000   | 3000  | <br>| 3000   | 3000  | <br>| 8000   | 3000  |  <br>| 5000   | 3000  |  <br>| 6000   | 3000  | <br>| 5000   | 3000  |  <br></code></pre></td></tr></table></figure><h4 id="6-4、MAX-聚合函数-开窗函数">6.4、MAX()聚合函数 + 开窗函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>    salary,<br>    max(salary) over (order by id desc) as `max`<br>FROM user<br>ORDER BY id DESC;<br></code></pre></td></tr></table></figure><p>结果：每一行都与之前的所有行相比得出最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">| salary |  max  |<br>| ------ | ----- |<br>| 3000   | 3000  | <br>| 4000   | 4000  |  <br>| 3000   | 4000  | <br>| 3000   | 4000  |  <br>| 8000   | 8000  |  <br>| 5000   | 8000  |  <br>| 6000   | 8000  | <br>| 5000   | 8000  | <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea插件推荐</title>
    <link href="/2025/02/24/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2025/02/24/idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h2 id="idea插件推荐"><code>idea</code>插件推荐</h2><h3 id="一、Chinese-Simplified-Language-Pack-中文语言包">一、Chinese (Simplified) Language Pack / 中文语言包</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----">https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----</a></p><p>简介：此插件是idea的中文汉化插件，还是非常好用的，基本上安装完<code>idea</code>后必装的插件了。</p><h3 id="二、Maven-Search">二、Maven-Search</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/17170-maven-search">https://plugins.jetbrains.com/plugin/17170-maven-search</a></p><p>简介：这是<code>Maven</code>依赖包的快速搜索插件，可以方便查找所需要的<code>Maven</code>依赖。</p><h3 id="三、MyBatisX">三、MyBatisX</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">https://plugins.jetbrains.com/plugin/10119-mybatisx</a></p><p>简介：这是<code>MyBatisPlus</code>推荐的插件，可以方便<code>mapper</code>接口和<code>mapper.xml</code>之间进行跳转，也方便通过数据库逆向生成实体代码。</p><h3 id="四、Apipost插件">四、Apipost插件</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/22676-apipost-helper-2-0">https://plugins.jetbrains.com/plugin/22676-apipost-helper-2-0</a></p><p>简介：这是<code>Apipost</code>开发的插件，可以方便进行简单接口测试。<code>Apipost</code>是一个非常不错的测试工具，官方声称：<code>Apipost</code> = <code>Postman</code> + <code>Swagger</code> + <code>Mock</code> + <code>Jmeter</code>。</p><p><code>Apipost</code>官方网站：<a href="https://www.apipost.cn/">https://www.apipost.cn/</a></p><h3 id="五、jclasslib">五、jclasslib</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib">https://plugins.jetbrains.com/plugin/9248-jclasslib</a></p><p>简介：这是一个方便以二进制查看类属性的插件，属于<code>jvm</code>学习期间接触到的。</p><h3 id="六、Alibaba-Java-Coding-Guidelines">六、Alibaba Java Coding Guidelines</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/9248-jclasslib">https://plugins.jetbrains.com/plugin/9248-jclasslib</a></p><p>简介：这是阿里巴巴<code>java</code>开发手册规范检测插件，若有不符合规范地方，通过点击选择检查将会提示检测到的异常，并给基本的解决方案。</p><h3 id="七、SonarQube-for-IDE">七、SonarQube for IDE</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/7973-sonarqube-for-ide">https://plugins.jetbrains.com/plugin/7973-sonarqube-for-ide</a></p><p>简介：这也是开发规范插件，但是这个会自动检测，只不过检测的比较宽泛，一些暂时的注释也会被标记应该移除。不足的是都是英文提示，有些可能看不懂，需要翻译协助。</p><h3 id="八、CheckStyle-IDEA">八、CheckStyle-IDEA</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/1065-checkstyle-idea">https://plugins.jetbrains.com/plugin/1065-checkstyle-idea</a></p><p>简介：这也是开发规范插件，需要自行点击检测，有谷歌和<code>sun</code>公司的规范。这个检测的提示是有中文的。</p><h3 id="九、Rainbow-Brackets">九、Rainbow Brackets</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets</a></p><p>简介：这是一个给不同嵌套层级的括号添加不同的颜色以进行区别的插件。</p><h3 id="十、String-Manipulation">十、String Manipulation</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/2162-string-manipulation">https://plugins.jetbrains.com/plugin/2162-string-manipulation</a></p><p>简介：这是一个对字符串进行格式转换的插件。例如：大小写切换、排序、过滤、递增、对齐列、grepping、转义、编码…</p><h3 id="十一、PlantUML-Integration">十一、PlantUML Integration</h3><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/7017-plantuml-integration">https://plugins.jetbrains.com/plugin/7017-plantuml-integration</a></p><p>简介：支持 PlantUML 绘图，用于绘制 UML 图、流程图等。通过新建<code>PlantUML File</code>使用，格式类似效果类似<code>markdown</code>，一边是编写文字，一边是显示效果。启用此插件才有显示效果，默认是没有效果的。</p><p>PlantUML官方操作文档：<a href="https://plantuml.com/zh/">https://plantuml.com/zh/</a></p><h3 id="十二、OpenFeign-Assistant（FeignX）">十二、OpenFeign Assistant（FeignX）</h3><p>github地址：<a href="https://github.com/Halfmoonly/feignx-plugin">https://github.com/Halfmoonly/feignx-plugin</a></p><p>简介：方便从feign客户端跳转到请求的Controller接口方法</p>]]></content>
    
    
    <categories>
      
      <category>插件推荐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程调用之OpenFeign</title>
    <link href="/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/"/>
    <url>/2025/02/20/%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B9%8BOpenFeign/</url>
    
    <content type="html"><![CDATA[<h2 id="远程调用之OpenFeign">远程调用之<code>OpenFeign</code></h2><p>在单体项目中，正常写的接口都是供前端调用获取数据的（例如：<code>ajax</code>、<code>axios</code>和<code>fetch</code>）。但是在微服务下的分布式架构中，不同的业务功能模块由不同人员负责并开发，因为分的比较细，所以就少不了服务之间的沟通。通常<code>java</code>来进行远程调用的方法包括：<code>RestTemplate</code>、<code>HttpURLConnection</code> 、<code>HttpClient</code>、<code>OkHttp</code>等。</p><p>而<code>OpenFeign</code>就是简化微服务之间接口调用的远程调用工具之一。</p><p><strong>前提已启动<code>Nacos</code>注册中心！</strong></p><h3 id="一、Maven依赖">一、Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- OpenFeign 远程调用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 负载均衡器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、启用OpenFeign">二、启用<code>OpenFeign</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;<br><br><span class="hljs-comment">// 开启OpenFeign</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、编写OpenFeign客户端">三、编写<code>OpenFeign</code>客户端</h3><p>这一步类似Mapper文件，只不过数据通过远程调用从其他模块获取。而不是单体中由<code>xml</code>文件写<code>SQL</code>语句直接沟通数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign;<br><br><span class="hljs-keyword">import</span> com.demo.feign.fallback.Rest02FallBack;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign客户端接口请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.demo.feign</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 一个客户端中对应同一业务的所有请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@FeignClient(value = &quot;test02&quot;,fallback = Rest02FallBack.class)</span><span class="hljs-comment">// 这里的value值是微服务的名称</span><br><span class="hljs-comment">//@FeignClient(value = &quot;test01&quot;,url = &quot;https://www.baidu.com&quot;) // 若是调用第三方的api，则需指定地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rest02</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、【可选】OpenFeign日志配置">四、【可选】<code>OpenFeign</code>日志配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign远程调用配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfig</span> &#123;<br><br>    <span class="hljs-comment">// 日志配置: 显示所有级别的日志</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="五、【可选】启用日志配置">五、【可选】启用日志配置</h3><h4 id="1、局部生效（客户端中指定配置）">1、局部生效（客户端中指定配置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;item-service&quot;, configuration = DefaultFeignConfig.class)</span><br></code></pre></td></tr></table></figure><h4 id="2、全局生效（配置类中指定默认配置）">2、全局生效（配置类中指定默认配置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfig.class)</span><br></code></pre></td></tr></table></figure><h4 id="3、yaml开启OpenFeign客户端的日志">3、<code>yaml</code>开启<code>OpenFeign</code>客户端的日志</h4><p><code>OpenFeign</code>只会在<code>FeignClient</code>所在包的日志级别为<strong>DEBUG</strong>时，才会输出日志。而且其日志级别有4级：</p><ul><li><strong>NONE</strong>：不记录任何日志信息，这是默认值。</li><li><strong>BASIC</strong>：仅记录请求的方法，URL以及响应状态码和执行时间</li><li><strong>HEADERS</strong>：在BASIC的基础上，额外记录了请求和响应的头信息</li><li><strong>FULL</strong>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>Feign默认的日志级别就是NONE，所以默认我们看不到请求日志。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-comment">#root: debug</span><br>    <span class="hljs-attr">com.demo.feign:</span> <span class="hljs-string">debug</span><br>    <span class="hljs-comment">#com.demo.interceptor: debug</span><br></code></pre></td></tr></table></figure><h3 id="六、请求超时">六、请求超时</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 远程调用 &gt; OpenFeign</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">okhttp:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 默认设置，未具体设置的所有客户端都生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">2000</span> <span class="hljs-comment"># 连接超时 5秒(5000毫秒) 【默认60秒】</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 读取超时 5秒</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span> <span class="hljs-comment"># 日志级别 所有</span><br>      <span class="hljs-attr">test02:</span> <span class="hljs-comment"># 服务名称[或是contextId指定的服务]</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 连接超时 5秒(5000毫秒) 【默认60秒】</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment"># 读取超时 5秒</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">full</span> <span class="hljs-comment"># 日志级别 所有</span><br></code></pre></td></tr></table></figure><h3 id="七、超时重试">七、超时重试</h3><p>超时重试机制：超时时间（例如5秒）+ 重试间隔（100毫秒）x 1.5</p><p>每次重试的间隔都会比上次长，例如是1.5倍</p><p>最大到重试间隔的时间超过最大时间或者重试次数达到最大次数则停止重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.config;<br><br><span class="hljs-keyword">import</span> feign.Logger;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign远程调用配置类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultFeignConfig</span> &#123;<br><br>    <span class="hljs-comment">// 日志配置: 显示所有级别的日志</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">feignLogLevel</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 超时重试</span><br>    <span class="hljs-meta">@Bean</span><br>    Retryer <span class="hljs-title function_">retryer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 不传值走无参构造：默认间隔100毫秒，最大间隔1秒，最多尝试5次</span><br>        <span class="hljs-comment">//return new Retryer.Default();</span><br>        <span class="hljs-comment">// 传值走有参构造: 每次重试间隔100毫秒，最大间隔1秒，最多尝试5次</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Retryer</span>.Default(<span class="hljs-number">100L</span>, TimeUnit.SECONDS.toMillis(<span class="hljs-number">1L</span>), <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="八、请求拦截器">八、请求拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.interceptor;<br><br><span class="hljs-keyword">import</span> feign.RequestInterceptor;<br><span class="hljs-keyword">import</span> feign.RequestTemplate;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign请求拦截器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 用于请求前统一添加公共数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenFeignRequestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> &#123;<br>        <span class="hljs-comment">// 请求头添加X-Token</span><br>        requestTemplate.header(<span class="hljs-string">&quot;X-Token&quot;</span>,UUID.randomUUID().toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、FallBack兜底返回">九、<code>FallBack</code>兜底返回</h3><p>远程调用超时或错误时返回的错误信息或兜底数据。</p><p><strong>兜底数据</strong>：默认数据、缓存数据、假数据… 主要是为了让业务能正常运行。</p><p><strong>注意：需搭配<code>Sentinel</code>服务保护框架，否则不会走兜底的。</strong></p><p>客户端：需要<code>fallback</code>指定兜底实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign;<br><br><span class="hljs-keyword">import</span> com.demo.feign.fallback.Rest02FallBack;<br><span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.FeignClient;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * OpenFeign客户端接口请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> test02</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.demo.feign</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 一个客户端中对应同一业务的所有请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-meta">@FeignClient(value = &quot;test02&quot;,fallback = Rest02FallBack.class)</span><span class="hljs-comment">// 这里的值是微服务的名称</span><br><span class="hljs-comment">//@FeignClient(value = &quot;test01&quot;,url = &quot;https://www.baidu.com&quot;) // 若是调用第三方的api，则需指定地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rest02</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>兜底类：实现客户端接口然后在实现方法中增加兜底数据逻辑即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.feign.fallback;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * FallBack</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2025/2/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rest02FallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">com</span>.demo.feign.Rest02 &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test002</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Default Data&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>添加<code>Sentinel</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- sentinel 服务保护 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件中开启<code>sentinel</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>这样把调用的服务停止，然后去调用就会获得兜底数据了。</p>]]></content>
    
    
    <categories>
      
      <category>远程调用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenFeign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于最近很长一段时间的断更</title>
    <link href="/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/"/>
    <url>/2025/02/18/%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%E5%BE%88%E9%95%BF%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%AD%E6%9B%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="关于最近很长一段时间的断更">关于最近很长一段时间的断更</h2><p>很久没更新了，原因是之前的电脑坏掉了，这两天才把机械和固态盘里的数据给拿出来整理，所以相关的笔记都一直存着呢。库存，哈哈，今天一并都更新上，文档日期还是按当时写的日期来归档。好了，终于可以接起来继续更新我的博客了！</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SSL：WRONG_VERSION_NUMBER</title>
    <link href="/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/"/>
    <url>/2025/02/17/SSL%EF%BC%9AWRONG_VERSION_NUMBER/</url>
    
    <content type="html"><![CDATA[<h2 id="SSL：WRONG-VERSION-NUMBER">SSL：WRONG_VERSION_NUMBER</h2><p>记录一次SSL部署成功后，接口请求依然报SSL错误的问题。</p><p>首先排除SSL证据链不足，系统时间不正确，TLS配置不正确等问题。</p><p>浏览器直接访问可以打开网站，但是postman等接口访问就一直报SSL异常：</p><p>类似参考资料中的这种异常代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">write EPROTO 8936192:error:100000f7:SSL routines:OPENSSL_internal:WRONG_VERSION_NUMBER:..\..\third_party\boringssl\src\ssl\tls_record.cc:231:<br></code></pre></td></tr></table></figure><p>通常通过域名访问80端口，出现阻断页，这里是关键！</p><p>参考资料中的是被上海蓝云阻断，</p><p>我这里遇到的是被当前服务器提供商机房拦截阻断。原因与参考资料中的阻断原因不同，这里是因为对应的景安备案系统中没有当前域名相关信息，域名是在阿里云的而且是在阿里云备案的。根据提示：1是没有在此系统备案，2是没有加入白名单，3是网站存在不适宜传播的内容。显然，3是不符合的。所以就去添加白名单，添加30分钟左右后，postman已可以成功访问。【但提示说未在此系统备案的需尽快完善信息，否则会在几天后将白名单的信息删除】，所以还是需要在此备案系统备案。已经备案的去转入即可。相关信息：<a href="https://beian.zzidc.com/main/help/showHelpContent?id=32">https://beian.zzidc.com/main/help/showHelpContent?id=32</a></p><p>参考资料：<a href="https://www.cnblogs.com/lulight/p/18292669">https://www.cnblogs.com/lulight/p/18292669</a></p>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FlvPlayer缓冲中断问题</title>
    <link href="/2024/12/06/%5BFlvPlayer%5D%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/"/>
    <url>/2024/12/06/%5BFlvPlayer%5D%20%EF%BC%9E%20Maximum%20buffering%20duration%20exceeded,%20suspend%20transmuxing%20task/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-title class_">FlvPlayer</span>] &gt; <span class="hljs-title class_">Maximum</span> buffering duration exceeded, suspend transmuxing task<br>[<span class="hljs-title class_">FlvPlayer</span>] &gt; <span class="hljs-title class_">Continue</span> loading <span class="hljs-keyword">from</span> paused position<br>flv.<span class="hljs-property">js</span>:<span class="hljs-number">10093</span> [<span class="hljs-title class_">FLVDemuxer</span>] &gt; <span class="hljs-title class_">Unsupported</span> tag type <span class="hljs-number">70</span>, skipped<br>flv.<span class="hljs-property">js</span>:<span class="hljs-number">10093</span> [<span class="hljs-title class_">FLVDemuxer</span>] &gt; <span class="hljs-title class_">Unsupported</span> tag type <span class="hljs-number">193</span>, skipped<br></code></pre></td></tr></table></figure><p>原因是<code>flv.js</code>缓冲直播视频流超过最大值后会停止继续缓冲，等到播放一定时长后，会自动从暂停点恢复。但是，这时出现不支持的标签类型并跳过的问题。</p><h2 id="问题解决">问题解决</h2><p>若出现此问题，但是视频播放不受影响，可忽略此问题。<br>我这边是出现此问题后，视频还没放完缓冲的数据，等播放到缓冲暂停点时，播放器就开始一直加载，而且无法播放了…<br>我去<code>flv.js</code>的<code>github</code>中的<code>issue</code>中看了，有提到相关的问题，但只是提了缓冲到最大会暂停缓冲的事，而且目前没有答复。</p><h3 id="解决方法：">解决方法：</h3><p>这算是一个异常点，可以通过捕获异常来解决。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> flv = flvjs.<span class="hljs-title function_">createPlayer</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;flv&#x27;</span>, url &#125;);<br>flv.<span class="hljs-title function_">attachMediaElement</span>(video);<br>art.<span class="hljs-property">flv</span> = flv;<br>flv.<span class="hljs-title function_">load</span>();<br>flv.<span class="hljs-title function_">on</span>(flvjs.<span class="hljs-property">Events</span>.<span class="hljs-property">ERROR</span>, <span class="hljs-function">(<span class="hljs-params">errorType, details</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`Error: <span class="hljs-subst">$&#123;errorType&#125;</span>, Details: <span class="hljs-subst">$&#123;details&#125;</span>`</span>);<br>    <span class="hljs-comment">// 根据错误类型采取恢复措施</span><br>    <span class="hljs-keyword">switch</span> (errorType) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;NetworkError&#x27;</span>:<br>            <span class="hljs-comment">// 网络错误，尝试重新加载视频</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Network error, reloading video...&#x27;</span>)<br>            flv.<span class="hljs-title function_">load</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;MediaError&#x27;</span>:<br>            <span class="hljs-comment">// 媒体错误，尝试恢复播放</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Media error, recovering playback...&#x27;</span>)<br>            flv.<span class="hljs-title function_">recoverMediaError</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-comment">// 其他错误，尝试重新加载视频</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;Unknown error, reloading video...&#x27;</span>)<br>            flv.<span class="hljs-title function_">load</span>();<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>可根据自己的代码逻辑自行修改。</p><hr><p>以上为个人浅薄理解，亲身实践，如有更好的方法或者有需要改进的地方，欢迎评论区友好交流指正。</p><p>如果觉得有帮助的话，不妨点个赞和收藏，加个关注吧！</p><p>不定期更新遇到并解决的问题哦。</p>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随机数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取springboot所有接口</title>
    <link href="/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/"/>
    <url>/2024/11/30/%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E6%89%80%E6%9C%89%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="获取springboot所有接口">获取springboot所有接口</h2><p><code>EndpointScanner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扫描所有可用接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointScanner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫描所有接口，处理后存到文件中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanAndWriteEndpointsToFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> applicationContext.getBean(RequestMappingHandlerMapping.class);<br><br>        <span class="hljs-comment">// 获取所有映射的路径</span><br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">endpoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 遍历所有的映射关系，获取每个接口的路径</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : handlerMethods.entrySet()) &#123;<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">mappingInfo</span> <span class="hljs-operator">=</span> entry.getKey();<br>            <span class="hljs-type">HandlerMethod</span> <span class="hljs-variable">handlerMethod</span> <span class="hljs-operator">=</span> entry.getValue();<br><br>            Set&lt;String&gt; patterns = mappingInfo.getPatternsCondition().getPatterns();<br>            <span class="hljs-comment">// 获取请求方法</span><br>            Set&lt;RequestMethod&gt; methods = mappingInfo.getMethodsCondition().getMethods();<br>            <br>            <span class="hljs-comment">// 获取控制器类名和处理方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">controllerClass</span> <span class="hljs-operator">=</span> handlerMethod.getBeanType().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> handlerMethod.getMethod().getName();<br><br>            <span class="hljs-keyword">for</span> (String pattern : patterns) &#123;<br>                <span class="hljs-comment">// 过滤掉路径参数&#123;id&#125;</span><br>                <span class="hljs-keyword">if</span> (pattern.contains(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> pattern.substring(<span class="hljs-number">0</span>, pattern.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>));<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(substring).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                         .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                         .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(substring).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(pattern).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(pattern).append(<span class="hljs-string">&quot; -&gt; &quot;</span>).append(controllerClass)<br>                             .append(<span class="hljs-string">&quot;#&quot;</span>).append(methodName)<br>                             .append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将接口路径写入文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file))) &#123;<br>            writer.write(endpoints.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将可用接口写入可访问接口列表文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointLoader</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointLoader</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EndpointScanner endpointScanner;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/secret/access_api_list.txt&quot;</span>;  <span class="hljs-comment">// 文件保存路径</span><br>        endpointScanner.scanAndWriteEndpointsToFile(filePath);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出示例：</p><p>假设接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br><span class="hljs-meta">@PostMapping(&quot;/api/users&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">createUser</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/api/products&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleProducts</span><span class="hljs-params">()</span> &#123; ... &#125;<br><br></code></pre></td></tr></table></figure><p>文件存储：【请求类型】 【请求路径】 -&gt; 【所在类】【方法名】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">GET /api/users -&gt; com.example.controller.UserController#getUsers<br>POST /api/users -&gt; com.example.controller.UserController#createUser<br>ANY /api/products -&gt; com.example.controller.ProductController#handleProducts<br></code></pre></td></tr></table></figure><p>可以视情况选择</p><p>例如只获取请求方法类型和请求路径</p><p><code>EndpointScanner.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.method.HandlerMethod;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 扫描所有可用接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointScanner</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ApplicationContext applicationContext;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扫描所有接口，处理后存到文件中</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> EndpointScanner</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanAndWriteEndpointsToFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> applicationContext.getBean(RequestMappingHandlerMapping.class);<br><br>        <span class="hljs-comment">// 获取所有映射的路径</span><br>        Map&lt;RequestMappingInfo, HandlerMethod&gt; handlerMethods = handlerMapping.getHandlerMethods();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">endpoints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 遍历所有的映射关系，获取每个接口的路径</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : handlerMethods.entrySet()) &#123;<br>            <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">mappingInfo</span> <span class="hljs-operator">=</span> entry.getKey();<br><br>            Set&lt;String&gt; patterns = mappingInfo.getPatternsCondition().getPatterns();<br>            <span class="hljs-comment">// 获取请求方法</span><br>            Set&lt;RequestMethod&gt; methods = mappingInfo.getMethodsCondition().getMethods();<br><br>            <span class="hljs-keyword">for</span> (String pattern : patterns) &#123;<br>                <span class="hljs-keyword">if</span> (pattern.contains(<span class="hljs-string">&quot;&#123;&quot;</span>))&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> pattern.substring(<span class="hljs-number">0</span>, pattern.indexOf(<span class="hljs-string">&quot;&#123;&quot;</span>));<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(substring).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(substring).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (methods.isEmpty()) &#123;<br>                        <span class="hljs-comment">// 如果未指定方法，默认为支持所有方法</span><br>                        endpoints.append(<span class="hljs-string">&quot;ANY &quot;</span>).append(pattern).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (RequestMethod method : methods) &#123;<br>                            endpoints.append(method.name()).append(<span class="hljs-string">&quot; &quot;</span>).append(pattern).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将接口路径写入文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file))) &#123;<br>            writer.write(endpoints.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化控制台打印工具</title>
    <link href="/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/11/22/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="格式化控制台打印工具">格式化控制台打印工具</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 格式化控制台打印工具</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FormatPrintUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出标题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化信息标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Title</span><span class="hljs-params">(String title)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] --------------------------------[ &quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; ]--------------------------------&quot;</span>;<br>        System.out.println(start+title+end);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出成功信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化成功信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Success</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[32;1mINFO\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出通用信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化通用信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Info</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出警告信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化警告信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Warn</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[33;1mWARN\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出错误信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化错误信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Error</span><span class="hljs-params">(String args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[\u001B[31;1mERROR\u001B[0m] &quot;</span>;<br>        System.out.println(s+args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出水平线分隔信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/22</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> CustomPrintUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 在控制台打印标准化水平线分隔信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Horizontal</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[\u001B[34;1mINFO\u001B[0m] --------------------------------------------------------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        FormatPrintUtil.Title(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Info(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Warn(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Error(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Success(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        FormatPrintUtil.Horizontal();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>控制台输出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</title>
    <link href="/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/"/>
    <url>/2024/11/17/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%89%93%E5%8C%85%E5%87%BA%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h2 id="The-forked-VM-terminated-without-properly-saying-goodbye-VM-crash-or-System-exit-called">The forked VM terminated without properly saying goodbye. VM crash or System.exit called?</h2><h3 id="完整错误：">完整错误：</h3><blockquote><p><code>The forked VM terminated without properly saying goodbye. VM crash or System.exit called? Command was cmd.exe /X /C &quot;D:\Program\Java\jre\bin\java -jar C:\Users\peter\AppData\Local\Temp\surefire8984743116361215564\surefirebooter3828924104254730190.jar C:\Users\peter\AppData\Local\Temp\surefire8984743116361215564 2024-11-17T20-08-43_528-jvmRun1 surefire1713296022132520594tmp surefire_04804249814728176955tmp&quot; Error occurred in starting fork, check output in log Process Exit Code: 1</code></p></blockquote><p>错误的大致意思是测试进程中遇到<code>System.exit(0);</code>的<code>jvm</code>退出代码，导致打包进程中断。</p><p>我确实有用到这段代码，但这是项目首次启动初始化数据库信息时发生异常的时候才会执行的逻辑！</p><p>去构建输出语句中发现是无法连接数据库：</p><blockquote><p><code>java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)</code></p></blockquote><h3 id="原因分析：">原因分析：</h3><blockquote><p>我是在开发环境下测试打包没问题后，将配置文件改成生产环境进行打包测试出现的。由于测试环境的数据库在本地是无法访问的，但这不应该是打包无法通过的原因。我一顿搜索，发现是我的测试类中有查询数据库的相关测试。因为在我的数据库初始化逻辑中，当Maven打包时，默认会执行到自定义的测试类中的方法，由于没有指定测试类方法的运行环境，所以在生产环境下打包时，在测试阶段Maven也会尝试连接数据库来测试相关测试类方法，因为连接不到测试类的数据库，从而产生了此问题。</p></blockquote><h3 id="解决方法：">解决方法：</h3><p>在测试类中指定测试类运行的环境即可。用注解<code>@ActiveProfiles</code></p><p>测试类示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="hljs-meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>补充：</p><h4 id="1-使用-Maven-Surefire-插件配置"><strong>1. 使用 Maven Surefire 插件配置</strong></h4><p>Maven 的 Surefire 插件用于运行测试，可以通过配置参数来有条件地运行或跳过特定的测试。</p><h5 id="配置-pom-xml">配置 <code>pom.xml</code></h5><p>在 <code>pom.xml</code> 中为 Surefire 插件添加一个 <code>&lt;configuration&gt;</code> 节点，设置跳过特定环境（如生产）的测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0-M7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>$&#123;skipTests&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在打包命令中传递 <code>-DskipTests=true</code> 参数跳过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -DskipTests=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h4 id="2-使用-Spring-的-Profile-控制加载数据库相关测试"><strong>2. 使用 Spring 的 Profile 控制加载数据库相关测试</strong></h4><p>通过 Spring 的 <code>@ActiveProfiles</code> 或 <code>@IfProfileValue</code> 注解，可以控制测试方法或测试类是否执行。</p><h5 id="示例代码">示例代码</h5><p>为测试类指定运行环境（例如，只有在开发环境才执行）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDatabaseConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>application.properties</code> 中定义不同环境的配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># src/main/resources/application-dev.properties</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/devdb</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">devuser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">devpassword</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># src/main/resources/application-prod.properties</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://prod-host:3306/proddb</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">produser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">prodpassword</span><br></code></pre></td></tr></table></figure><p>在生产环境打包时通过命令设置生产环境 Profile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package -Dspring.profiles.active=prod<br></code></pre></td></tr></table></figure><hr><h4 id="3-使用-EnabledIf-或-IfProfileValue-注解（仅运行特定环境测试）"><strong>3. 使用 <code>@EnabledIf</code> 或 <code>@IfProfileValue</code> 注解（仅运行特定环境测试）</strong></h4><p>你可以基于环境变量有条件地运行测试类。</p><h5 id="示例代码-2">示例代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@IfProfileValue(name = &quot;env&quot;, value = &quot;dev&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseTests</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDatabaseConnection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 测试代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在生产环境打包时传递环境参数跳过测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn package -Denv=prod<br></code></pre></td></tr></table></figure><hr><h4 id="4-通过-Maven-配置排除特定测试"><strong>4. 通过 Maven 配置排除特定测试</strong></h4><p>你可以通过 Maven Surefire 插件的 <code>&lt;excludes&gt;</code> 配置跳过特定测试类。</p><h5 id="配置-pom-xml-2">配置 <code>pom.xml</code></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0-M7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/DatabaseTests.java<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>生产环境打包时这些测试类将不会被执行。</p>]]></content>
    
    
    <categories>
      
      <category>问题解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>junit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>junit单元测试示例</title>
    <link href="/2024/11/14/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/11/14/junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="junit单元测试"><code>junit</code>单元测试</h2><p><code>junit4</code>单元测试示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span> <span class="hljs-comment">// 用于指定测试环境，以避免生产环境下打包时运行此测试从而产生访问不到数据库的错误</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span> <span class="hljs-comment">// 使用 Spring 的测试运行器</span><br><span class="hljs-comment">// 不会启动 Web 环境，适用于非 Web 服务的集成测试</span><br><span class="hljs-meta">@SpringBootTest</span> <br><span class="hljs-comment">// 模拟 Web 环境，适用于 Web 层的控制器、过滤器等测试，但没有启动实际的 Web 服务器。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，使用配置文件中定义的端口进行测试。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，随机分配一个可用端口，适用于测试真实的 Web 请求和响应。</span><br><span class="hljs-comment">// @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>junit5</code>单元测试示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span> <span class="hljs-comment">// 用于指定测试环境，以避免生产环境下打包时运行此测试从而产生访问不到数据库的错误</span><br><span class="hljs-comment">// 不会启动 Web 环境，适用于非 Web 服务的集成测试</span><br><span class="hljs-meta">@SpringBootTest</span> <br><span class="hljs-comment">// 模拟 Web 环境，适用于 Web 层的控制器、过滤器等测试，但没有启动实际的 Web 服务器。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，使用配置文件中定义的端口进行测试。</span><br><span class="hljs-comment">//@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)</span><br><span class="hljs-comment">// 启动实际的 Web 服务器，随机分配一个可用端口，适用于测试真实的 Web 请求和响应。</span><br><span class="hljs-comment">// @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloControllerTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectByUsername(<span class="hljs-string">&quot;1&quot;</span>);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>尽可能用到更多junit功能的测试示例</p><h3 id="JUnit-5-示例代码">JUnit 5 示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.jupiter.api.Assertions.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.condition.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.params.*;<br><span class="hljs-keyword">import</span> org.junit.jupiter.params.provider.*;<br><br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JUnit5ExampleTest</span> &#123;<br><br>    <span class="hljs-comment">// 1. 定义一个测试前后的生命周期方法</span><br>    <br>    <span class="hljs-meta">@BeforeAll</span>  <span class="hljs-comment">// 所有测试方法执行之前执行一次的静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before All Tests&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterAll</span>  <span class="hljs-comment">// 在所有测试方法执行完毕之后执行一次的静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAll</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After All Tests&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@BeforeEach</span> <span class="hljs-comment">// 每个测试方法执行之前执行</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before Each Test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span> <span class="hljs-comment">// 每个测试方法执行之后执行</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterEach</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;After Each Test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 一个简单的测试，断言是否相等</span><br>    <span class="hljs-comment">// 断言是为了确保代码按预期运行，而默认的行为是 静默成功 和 失败时输出错误</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">simpleTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> + <span class="hljs-number">3</span>;<br>        assertEquals(<span class="hljs-number">5</span>, sum, <span class="hljs-string">&quot;Sum should be 5&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 断言失败的测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">failedTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span> * <span class="hljs-number">3</span>;<br>        assertNotEquals(<span class="hljs-number">10</span>, product, <span class="hljs-string">&quot;Product should not be 10&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 测试异常抛出</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionTest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> assertThrows(ArithmeticException.class, () -&gt; &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>        &#125;);<br>        assertEquals(<span class="hljs-string">&quot;/ by zero&quot;</span>, exception.getMessage());<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 条件化测试（例如：只有在 Linux 系统上才会运行）</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledOnOs(OS.LINUX)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOnLinux</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running test on Linux OS&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledOnOs(OS.WINDOWS)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOnWindows</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running test on Windows OS&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 参数化测试 - 使用不同的输入进行多次测试</span><br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@ValueSource(ints = &#123;1, 2, 3&#125;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTestWithValueSource</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        assertTrue(number &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Number should be greater than 0&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 7. 参数化测试 - 使用方法提供参数</span><br>    <span class="hljs-meta">@ParameterizedTest</span><br>    <span class="hljs-meta">@MethodSource(&quot;provideNumbersForMultiplication&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterizedTestWithMethodSource</span><span class="hljs-params">(<span class="hljs-type">int</span> number1, <span class="hljs-type">int</span> number2, <span class="hljs-type">int</span> expectedResult)</span> &#123;<br>        assertEquals(expectedResult, number1 * number2);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Stream&lt;Arguments&gt; <span class="hljs-title function_">provideNumbersForMultiplication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Stream.of(<br>            Arguments.of(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>),<br>            Arguments.of(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>),<br>            Arguments.of(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">24</span>)<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">// 8. 动态测试（动态生成的测试用例）</span><br>    <span class="hljs-meta">@TestFactory</span><br>    Stream&lt;DynamicTest&gt; <span class="hljs-title function_">dynamicTests</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Stream.of(<br>            DynamicTest.dynamicTest(<span class="hljs-string">&quot;Test 1&quot;</span>, () -&gt; assertEquals(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),<br>            DynamicTest.dynamicTest(<span class="hljs-string">&quot;Test 2&quot;</span>, () -&gt; assertEquals(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>        );<br>    &#125;<br><br>    <span class="hljs-comment">// 9. 快速失败的测试 - 确保一旦测试失败立即停止</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;fastFail&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">fastFailTest</span><span class="hljs-params">()</span> &#123;<br>        assertTrue(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;This test should fail and stop immediately&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 10. 分组标记测试 - 用 @Tag 来标记测试的类别</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;unit&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unitTest</span><span class="hljs-params">()</span> &#123;<br>        assertTrue(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;This is a unit test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@Tag(&quot;integration&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">integrationTest</span><span class="hljs-params">()</span> &#123;<br>        assertTrue(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;This is an integration test&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 11. 使用注解标注测试条件 - 条件注解</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@EnabledIfSystemProperty(named = &quot;os.name&quot;, matches = &quot;.*Windows.*&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOnlyForWindows</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This test will run only on Windows&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解释">解释</h3><ol><li><strong>生命周期方法 (<code>@BeforeAll</code>, <code>@AfterAll</code>, <code>@BeforeEach</code>, <code>@AfterEach</code>)</strong>:<ul><li><code>@BeforeAll</code>: 在所有测试方法执行之前执行一次的静态方法。</li><li><code>@AfterAll</code>: 在所有测试方法执行完毕之后执行一次的静态方法。</li><li><code>@BeforeEach</code>: 每个测试方法执行之前执行。</li><li><code>@AfterEach</code>: 每个测试方法执行完毕之后执行。</li></ul></li><li><strong>断言 (<code>assertEquals</code>, <code>assertNotEquals</code>, <code>assertTrue</code>, <code>assertThrows</code>)</strong>:<ul><li><code>assertEquals</code> 和 <code>assertNotEquals</code>: 用于断言预期结果与实际结果是否一致。</li><li><code>assertThrows</code>: 用于验证是否抛出了预期的异常。</li></ul></li><li><strong>条件化测试 (<code>@EnabledOnOs</code>, <code>@EnabledIfSystemProperty</code>)</strong>:<ul><li><code>@EnabledOnOs</code>: 只有在特定操作系统上才会运行此测试。</li><li><code>@EnabledIfSystemProperty</code>: 根据系统属性的值来决定是否执行此测试。</li></ul></li><li><strong>参数化测试 (<code>@ParameterizedTest</code>, <code>@ValueSource</code>, <code>@MethodSource</code>)</strong>:<ul><li><code>@ParameterizedTest</code>: 指定这是一个参数化的测试。</li><li><code>@ValueSource</code>: 使用不同的值进行多次测试。</li><li><code>@MethodSource</code>: 使用方法来提供参数。</li></ul></li><li><strong>动态测试 (<code>@TestFactory</code>, <code>DynamicTest</code>)</strong>:<ul><li>使用 <code>@TestFactory</code> 注解来创建动态生成的测试用例，可以根据需要动态地生成多个测试用例。</li></ul></li><li><strong>快速失败的测试 (<code>@Tag</code>)</strong>:<ul><li>使用 <code>@Tag</code> 可以为测试分类，并用 <code>@Tag(&quot;fastFail&quot;)</code> 快速标记失败测试。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>软件测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>junit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统信息工具类</title>
    <link href="/2024/11/13/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%B1%BB/"/>
    <url>/2024/11/13/%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="系统信息工具类">系统信息工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-keyword">import</span> java.lang.management.ManagementFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 系统信息工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> SystemInfo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 定义了系统信息静态常量，包括服务器信息、jvm信息和项目启动时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemInfo</span> &#123;<br><br>    <span class="hljs-comment">/////// 服务器信息 ////////</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 操作系统名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS_NAME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 系统架构</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS_ARCH;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 系统版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String OS_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 主机名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOST_NAME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 主机ip地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HOST_IP;<br><br>    <span class="hljs-comment">///////  Java虚拟机信息 ////////</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; java版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JAVA_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; java路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JAVA_HOME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm名称</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_NAME;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm规范版本</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_SPECIFICATION_VERSION;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; jvm启动参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JVM_ARGUMENTS;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 项目路径</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PROJECT_DIR;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 系统信息 &gt;&gt; 启动时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String START_TIME;<br><br><br>    <span class="hljs-comment">// 初始化静态常量数据</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">inetAddress</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>            List&lt;String&gt; jvmArguments = ManagementFactory.getRuntimeMXBean().getInputArguments();<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            OS_NAME = System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>            OS_ARCH = System.getProperty(<span class="hljs-string">&quot;os.arch&quot;</span>);<br>            OS_VERSION = System.getProperty(<span class="hljs-string">&quot;os.version&quot;</span>);<br>            HOST_NAME = inetAddress.getHostName();<br>            HOST_IP = inetAddress.getHostAddress();<br><br>            JAVA_VERSION = System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>            JAVA_HOME = System.getProperty(<span class="hljs-string">&quot;java.home&quot;</span>);<br>            JVM_NAME = System.getProperty(<span class="hljs-string">&quot;java.vm.name&quot;</span>);<br>            JVM_VERSION = System.getProperty(<span class="hljs-string">&quot;java.vm.version&quot;</span>);<br>            JVM_SPECIFICATION_VERSION = System.getProperty(<span class="hljs-string">&quot;java.vm.specification.version&quot;</span>);<br>            JVM_ARGUMENTS = String.join(<span class="hljs-string">&quot;, &quot;</span>, jvmArguments);<br>            PROJECT_DIR = System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>            START_TIME = sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 输出系统信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/13</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> SystemInfo</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> org.example.utils</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toPrint</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;系统信息&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;操作系统:&#x27;&quot;</span> + OS_NAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 系统架构=&#x27;&quot;</span> + OS_ARCH + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 系统版本=&#x27;&quot;</span> + OS_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 主机名称=&#x27;&quot;</span> + HOST_NAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 主机网络地址=&#x27;&quot;</span> + HOST_IP + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 版本=&#x27;&quot;</span> + JAVA_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 安装路径=&#x27;&quot;</span> + JAVA_HOME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 虚拟机名称=&#x27;&quot;</span> + JVM_NAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 虚拟机版本=&#x27;&quot;</span> + JAVA_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, Java 虚拟机简介版本=&#x27;&quot;</span> + JVM_SPECIFICATION_VERSION + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, JVM 运行参数=&#x27;&quot;</span> + JVM_ARGUMENTS + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 项目路径=&#x27;&quot;</span> + PROJECT_DIR + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, 启动时间=&#x27;&quot;</span> + START_TIME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 测试主程序入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">SystemInfo</span> <span class="hljs-variable">systemInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemInfo</span>();<br>        System.out.println(systemInfo.toPrint());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统信息</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot 集成 Actuator 使用示例</title>
    <link href="/2024/11/13/Actuator%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/"/>
    <url>/2024/11/13/Actuator%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="Actuator-服务监控">Actuator &gt;&gt; 服务监控</h2><p>SpringBoot 2.7.18 - Actuator官方文档地址：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/actuator.html">https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/actuator.html</a></p><h3 id="Maven依赖">Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 服务监控 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-comment"># 暴露 EndPoint 以供访问，有jmx和web两种方式，exclude 的优先级高于 include</span><br>    <span class="hljs-attr">jmx:</span><span class="hljs-comment"># 供JMX使用的</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-comment"># 除非使用，否则就别开启</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>    <span class="hljs-comment"># 除非使用，否则就别开启</span><br>    <span class="hljs-attr">web:</span><span class="hljs-comment"># 供web使用的</span><br>      <span class="hljs-attr">exposure:</span><br>      <span class="hljs-comment"># exclude: &#x27;*&#x27;</span><br>        <span class="hljs-comment">#include: [&quot;health&quot;,&quot;info&quot;,&quot;beans&quot;,&quot;mappings&quot;,&quot;logfile&quot;,&quot;metrics&quot;,&quot;shutdown&quot;,&quot;env&quot;,&quot;prometheus&quot;]</span><br>      <span class="hljs-attr">include:</span> <span class="hljs-comment"># 正常开启这几个即可，不要全开，不然容易被攻击注入挖矿程序</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">health</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">info</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">prometheus</span>  <span class="hljs-comment"># 这是供普罗米修斯监控软件使用的</span><br>      <span class="hljs-attr">base-path:</span> <span class="hljs-string">/actuator</span>  <span class="hljs-comment"># 配置 Endpoint 的基础路径</span><br>      <span class="hljs-attr">cors:</span> <span class="hljs-comment"># 配置跨域资源共享</span><br>        <span class="hljs-attr">allowed-origins:</span> <span class="hljs-string">http://example.com</span><br>        <span class="hljs-attr">allowed-methods:</span> <span class="hljs-string">GET,POST</span><br>    <span class="hljs-attr">enabled-by-default:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 修改全局 endpoint 默认设置</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">auditevents:</span> <span class="hljs-comment"># 1、显示当前引用程序的审计事件信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">cache:</span><br>        <span class="hljs-attr">time-to-live:</span> <span class="hljs-string">10s</span> <span class="hljs-comment"># 配置端点缓存响应的时间</span><br>    <span class="hljs-attr">beans:</span> <span class="hljs-comment"># 2、显示一个应用中所有 Spring Beans 的完整列表，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">conditions:</span> <span class="hljs-comment"># 3、显示配置类和自动配置类的状态及它们被应用和未被应用的原因，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">configprops:</span> <span class="hljs-comment"># 4、显示一个所有@ConfigurationProperties的集合列表，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">env:</span> <span class="hljs-comment"># 5、显示来自Spring的 ConfigurableEnvironment的属性，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">flyway:</span> <span class="hljs-comment"># 6、显示数据库迁移路径，如果有的话，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">health:</span> <span class="hljs-comment"># 7、显示健康信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span>   <span class="hljs-comment"># 显示详细信息，例如宕机原因</span><br>    <span class="hljs-attr">info:</span> <span class="hljs-comment"># 8、显示任意的应用信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">liquibase:</span> <span class="hljs-comment"># 9、展示任何Liquibase数据库迁移路径，如果有的话，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">metrics:</span> <span class="hljs-comment"># 10、展示当前应用的metrics信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">mappings:</span> <span class="hljs-comment"># 11、显示一个所有@RequestMapping路径的集合列表，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">scheduledtasks:</span> <span class="hljs-comment"># 12、显示应用程序中的计划任务，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">sessions:</span> <span class="hljs-comment"># 13、允许从Spring会话支持的会话存储中检索和删除(retrieval and deletion)用户会话。使用Spring Session对反应性Web应用程序的支持时不可用。默认开启。</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">shutdown:</span> <span class="hljs-comment"># 14、允许应用以优雅的方式关闭，默认关闭</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">threaddump:</span> <span class="hljs-comment"># 15、执行一个线程dump</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># web 应用时可以使用以下端点</span><br>    <span class="hljs-attr">heapdump:</span> <span class="hljs-comment"># 16、    返回一个GZip压缩的hprof堆dump文件，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">jolokia:</span> <span class="hljs-comment"># 17、通过HTTP暴露JMX beans（当Jolokia在类路径上时，WebFlux不可用），默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">logfile:</span> <span class="hljs-comment"># 18、返回日志文件内容（如果设置了logging.file或logging.path属性的话），支持使用HTTP Range头接收日志文件内容的部分信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">prometheus:</span> <span class="hljs-comment">#19、以可以被Prometheus服务器抓取的格式显示metrics信息，默认开启</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="配置类">配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.Info;<br><span class="hljs-keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义服务器监控信息 &gt;&gt;&gt; Actuator</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> CustomInfoContributor</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> org.example.config</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomInfoContributor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InfoContributor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contribute</span><span class="hljs-params">(Info.Builder builder)</span> &#123;<br>        Map&lt;String, String&gt; infoDetails = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        infoDetails.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;MyApplication&quot;</span>);<br>        infoDetails.put(<span class="hljs-string">&quot;version&quot;</span>, <span class="hljs-string">&quot;1.0.0&quot;</span>);<br>        infoDetails.put(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;这是一段描述。&quot;</span>);<br><br>        <span class="hljs-comment">// 将 Map 转为不可修改的 Map</span><br>        infoDetails = Collections.unmodifiableMap(infoDetails);<br><br>        builder.withDetail(<span class="hljs-string">&quot;app&quot;</span>, infoDetails);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用">使用</h3><p>默认接口为 <code>/actuator</code>，其中包含了所有已开放的可供访问的接口</p><p>Spring Boot Actuator 的 <code>/actuator/metrics</code> 端点提供了多种系统和 JVM 指标数据。以下是一些关键的指标：</p><ul><li><strong>CPU</strong>：可以查看当前 CPU 使用情况，例如：<ul><li><code>system.cpu.usage</code>：系统的整体 CPU 使用率（0 到 1 之间的小数）。</li><li><code>process.cpu.usage</code>：当前 Java 进程的 CPU 使用率。</li></ul></li><li><strong>内存</strong>：提供堆内存和非堆内存的使用情况。<ul><li><code>jvm.memory.used</code>：已用内存，按区域（如 <code>heap</code> 和 <code>non-heap</code>）划分。</li><li><code>jvm.memory.max</code>：最大内存。</li><li><code>jvm.memory.committed</code>：已分配给 JVM 的内存量。</li></ul></li><li><strong>磁盘</strong>：磁盘存储信息。<ul><li><code>disk.total</code>：总磁盘空间。</li><li><code>disk.free</code>：剩余磁盘空间。</li><li><code>disk.usable</code>：可用磁盘空间。</li></ul></li><li><strong>Java 虚拟机</strong>：可以监控 JVM 的线程、垃圾回收等。<ul><li><code>jvm.threads.live</code>：当前活动线程数。</li><li><code>jvm.threads.peak</code>：线程的峰值数量。</li><li><code>jvm.gc.*</code>：垃圾回收统计，如 <code>jvm.gc.memory.allocated</code>（分配的内存量）、<code>jvm.gc.pause</code>（GC 暂停时间）。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>服务监控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Actuator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quartz - 定时任务框架</title>
    <link href="/2024/11/12/Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2024/11/12/Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="Quartz-定时任务框架">Quartz - 定时任务框架</h2><blockquote><p>以下为单机模式</p></blockquote><h3 id="快速开始">快速开始</h3><h4 id="Maven依赖">Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Quartz 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置文件">配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">quartz:</span>  <span class="hljs-comment"># 定时任务</span><br>    <span class="hljs-attr">job-store-type:</span> <span class="hljs-string">memory</span>        <span class="hljs-comment"># 存储类型 &gt;&gt; 内存</span><br>    <span class="hljs-attr">scheduler-name:</span> <span class="hljs-string">MyScheduler</span>   <span class="hljs-comment"># 调度器的名称</span><br></code></pre></td></tr></table></figure><h4 id="配置类">配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.example.task.MyJob;<br><span class="hljs-keyword">import</span> org.quartz.*;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务Quartz配置文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> QuartzConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> org.example.config</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JobDetail <span class="hljs-title function_">jobDetail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> JobBuilder.newJob(MyJob.class)<br>             .withIdentity(<span class="hljs-string">&quot;myJob&quot;</span>)<br>             .storeDurably()<br>             .build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Trigger <span class="hljs-title function_">trigger</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-comment">// 使用cron表达式</span><br>        <span class="hljs-type">CronScheduleBuilder</span> <span class="hljs-variable">scheduleBuilder</span> <span class="hljs-operator">=</span> CronScheduleBuilder.cronSchedule(<span class="hljs-string">&quot;0 30 14 * * ?&quot;</span>);<br>        <span class="hljs-keyword">return</span> TriggerBuilder.newTrigger()<br>             .forJob(jobDetail())<br>             .withIdentity(<span class="hljs-string">&quot;myTrigger&quot;</span>)<br>             <span class="hljs-comment">//.withSchedule(scheduleBuilder) // 这个是固定每天14：30分执行任务！</span><br>             .withSchedule(SimpleScheduleBuilder.simpleSchedule()<br>                    .withIntervalInSeconds(<span class="hljs-number">10</span>) <span class="hljs-comment">// 每 10 秒执行一次</span><br>                    .repeatForever()) <span class="hljs-comment">// 一直重复</span><br>             .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="作业类">作业类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.quartz.Job;<br><span class="hljs-keyword">import</span> org.quartz.JobExecutionContext;<br><span class="hljs-keyword">import</span> org.quartz.JobExecutionException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJob</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext context)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Executing MyJob...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Quartz-的-Cron-表达式">Quartz 的 Cron 表达式</h3><p>Quartz 的 Cron 表达式由 <strong>6 个字段</strong>组成，具体格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">秒 分 时 日 月 星期 年（可选）<br><span class="hljs-bullet">*</span>  <span class="hljs-emphasis">*  *</span>  <span class="hljs-emphasis">*  *</span>  <span class="hljs-emphasis">*  </span><br></code></pre></td></tr></table></figure><ul><li><strong>秒 (0 - 59)</strong>: 任务执行的秒数。</li><li><strong>分 (0 - 59)</strong>: 任务执行的分钟数。</li><li><strong>时 (0 - 23)</strong>: 任务执行的小时数。</li><li><strong>日 (1 - 31)</strong>: 任务执行的日子。</li><li><strong>月 (1 - 12)</strong>: 任务执行的月份。</li><li><strong>星期 (0 - 6)</strong>: 任务执行的星期几，<code>0</code> 代表星期天，<code>1</code> 代表星期一。</li><li><strong>年 (可选)</strong>: 任务执行的年份，可以省略。</li></ul><h3 id="Quartz-Cron-表达式示例">Quartz Cron 表达式示例</h3><p>以下是一些常见的 Quartz Cron 表达式示例，包含秒字段：</p><ol><li><p><strong>每秒执行一次：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> ?<br></code></pre></td></tr></table></figure><p>这个表达式表示任务每秒执行一次。</p></li><li><p><strong>每分钟执行一次：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* *</span> ?<br></code></pre></td></tr></table></figure><p>每分钟的第 0 秒执行一次任务。</p></li><li><p><strong>每 5 秒执行一次：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*/5 *</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* ?</span><br></code></pre></td></tr></table></figure><p>每隔 5 秒执行一次任务。</p></li><li><p><strong>每天午夜 12 点执行一次：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0 0 0 <span class="hljs-emphasis">* *</span> ?<br></code></pre></td></tr></table></figure><p>每天凌晨 12 点执行任务。</p></li><li><p><strong>每小时的第 15 分钟，第 30 秒执行：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">30 15 <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* ?</span><br></code></pre></td></tr></table></figure><p>每小时的第 15 分钟、第 30 秒执行任务。</p></li><li><p><strong>每 10 秒执行一次：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*/10 *</span> <span class="hljs-emphasis">* *</span> <span class="hljs-emphasis">* ?</span><br></code></pre></td></tr></table></figure><p>每 10 秒执行一次任务。</p></li><li><p><strong>每月 1 号的午夜 12 点执行：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0 0 0 1 <span class="hljs-emphasis">* ?</span><br></code></pre></td></tr></table></figure><p>每月的第 1 天午夜 12 点执行任务。</p></li><li><p><strong>每周一上午 10 点 30 分 15 秒执行任务：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">15 30 10 ? <span class="hljs-emphasis">* 2</span><br></code></pre></td></tr></table></figure><p>每周一上午 <code>10:30:15</code> 执行任务。</p></li><li><p><strong>每个月的最后一天午夜执行：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0 0 0 L <span class="hljs-emphasis">* ?</span><br></code></pre></td></tr></table></figure><p>每个月的最后一天午夜 12 点执行任务。</p></li><li><p><strong>每年 1 月 1 日凌晨 1 点执行：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0 0 1 1 <span class="hljs-emphasis">* ?</span><br></code></pre></td></tr></table></figure><p>每年 1 月 1 日凌晨 1 点执行任务。</p></li></ol><h3 id="关键点总结：">关键点总结：</h3><ul><li><strong>秒字段</strong> 使得 <code>Quartz Cron</code> 表达式比标准的 <code>Cron</code> 表达式更精确。</li><li><code>*</code> 表示任意值，<code>?</code> 用于占位，表示“不指定”。</li><li><code>L</code> 表示每月的最后一天或者每周的最后一天。</li><li><code>*/n</code> 表示每隔 <code>n</code> 个单位执行一次。</li><li><code>W</code> 表示最接近的工作日，通常用于日期字段。</li></ul><h3 id="适用场景：">适用场景：</h3><p>Quartz 的 Cron 表达式非常适合需要精确控制任务执行时间的场景，特别是在分布式系统中，可以确保任务按照严格的时间周期执行。</p><h3 id="单机模式">单机模式</h3><h4 id="只在项目启动时执行一次的任务">只在项目启动时执行一次的任务</h4><p>对于项目启动时只执行一次的任务，更推荐以实现 <code>CommandLineRunner</code>的类来开启子线程，在项目启动后，执行初始化数据等操作。这种方式更方便。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 项目启动初始化配置</span><br><span class="hljs-attr">boot:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-comment"># 配置文件属性（off会被springboot解析成false,on会被解析成true）</span><br>    <span class="hljs-attr">enable-init-database-table:</span> <span class="hljs-string">on</span>    <span class="hljs-comment"># 初始化数据表（若不存在则执行）</span><br>    <span class="hljs-attr">enable-init-database-data:</span> <span class="hljs-string">on</span>     <span class="hljs-comment"># 初始化数据库数据（若不存在则执行）</span><br>    <span class="hljs-attr">enable-first-start-clear-redis-catch:</span> <span class="hljs-string">on</span> <span class="hljs-comment"># 清空Redis缓存</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SpringBoot 副线程类</span><br><span class="hljs-comment"> * 日期：2024/8/12</span><br><span class="hljs-comment"> * 说明：此副线程一般用于以下场景</span><br><span class="hljs-comment"> * - 数据初始化：在应用程序启动时加载一些初始数据到数据库中。</span><br><span class="hljs-comment"> * - 发送通知：向用户或系统发送启动通知，例如发送邮件或消息队列中的消息。</span><br><span class="hljs-comment"> * - 执行检查：进行应用程序启动前的检查，如数据库连接检查、文件系统检查等。</span><br><span class="hljs-comment"> * - 启动日志：记录应用程序启动日志，提供启动时的系统状态信息。</span><br><span class="hljs-comment"> * - 定时任务：启动一些定时任务，如清理旧数据、备份操作等。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;boot.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enableInitDatabaseTable;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enableInitDatabaseData;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enableFirstStartClearRedisCatch;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据库初始化业务类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> DBInitializerService dbInitializerService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SpringBoot 副线程 【在此项目中用于数据库初始化】</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args 命令参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception 异常类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;=================&lt;初始化数据库&gt;=================&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (enableInitDatabaseTable) &#123;<br>dbInitializerService.initDBTable(); <span class="hljs-comment">// 初始化数据库表结构</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;配置文件已关闭初始化数据库表。&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (enableInitDatabaseData) &#123;<br>dbInitializerService.initDBData();  <span class="hljs-comment">// 初始化数据库数据</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;配置文件已关闭初始化数据库表数据。&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (enableFirstStartClearRedisCatch) &#123;<br>dbInitializerService.clearRedisCatch();  <span class="hljs-comment">// 清空Redis缓存</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;配置文件已关闭清空Redis缓存。&quot;</span>);<br>&#125;<br><br>&#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>System.out.println(<span class="hljs-string">&quot;初始化失败，系统终止！&quot;</span>);<br><span class="hljs-comment">// 初始化失败，系统终止</span><br>System.exit(<span class="hljs-number">1</span>);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;初始化完成！&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里也写一下<code>quartz</code>只在项目首次运行时执行一次的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 项目启动时执行一次的任务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InitDBTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> DBInitializerService dbInitializerService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始执行单次计划任务：数据库表，数据初始化和Redis缓存清理工作！&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            dbInitializerService.initDBTable();<br>            dbInitializerService.initDBData();<br>            dbInitializerService.clearRedisCatch();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;初始化任务失败！开始停止项目！&quot;</span>);<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.quartz.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.PostConstruct;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于首次启动时执行一次的简单任务触发器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> SingleExecutionJobScheduler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.task</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleExecutionJobScheduler</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Scheduler scheduler;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleJob</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(InitDBTask.class) <span class="hljs-comment">// 自定义的Job类</span><br>                .withIdentity(<span class="hljs-string">&quot;startupJob&quot;</span>, <span class="hljs-string">&quot;DEFAULT&quot;</span>)<br>                .build();<br><br>        <span class="hljs-type">Trigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger()<br>                .withIdentity(<span class="hljs-string">&quot;startupTrigger&quot;</span>, <span class="hljs-string">&quot;DEFAULT&quot;</span>)<br>                .startNow() <span class="hljs-comment">// 项目启动后立即执行</span><br>                .build();<br><br>        scheduler.scheduleJob(jobDetail, trigger);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="配置文件的方式">配置文件的方式</h4><p>这种方式可以解决：如果每增加一个任务就要在配置类中添加一个调度器，这样比较繁琐，且不利于管理。</p><h5 id="配置文件-2">配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 定时任务配置</span><br><span class="hljs-attr">quartz:</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">jobName:</span> <span class="hljs-string">&quot;cleanMessageRecordTask&quot;</span><br>      <span class="hljs-attr">jobGroup:</span> <span class="hljs-string">&quot;DEFAULT&quot;</span><br>      <span class="hljs-attr">cronExpression:</span> <span class="hljs-string">&quot;0 0 0 1/2 * ? *&quot;</span> <span class="hljs-comment"># 从每月1号开始，每两天执行一次，1、3、5...</span><br>      <span class="hljs-attr">jobClassName:</span> <span class="hljs-string">&quot;com.msrl.zhibo.task.cleanMessageRecordTask&quot;</span><br></code></pre></td></tr></table></figure><h5 id="配置类-2">配置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.quartz.SpringBeanJobFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">// 这里的配置是为了能在任务类中使用spring注入功能，否则使用注入功能将报错</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringBeanJobFactory <span class="hljs-title function_">springBeanJobFactory</span><span class="hljs-params">(ApplicationContext applicationContext)</span> &#123;<br>        <span class="hljs-type">SpringBeanJobFactory</span> <span class="hljs-variable">jobFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringBeanJobFactory</span>();<br>        jobFactory.setApplicationContext(applicationContext); <span class="hljs-comment">// 将 Spring 的 ApplicationContext 注入</span><br>        <span class="hljs-keyword">return</span> jobFactory;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SchedulerFactoryBean <span class="hljs-title function_">schedulerFactoryBean</span><span class="hljs-params">(SpringBeanJobFactory jobFactory, DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">SchedulerFactoryBean</span> <span class="hljs-variable">factoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerFactoryBean</span>();<br>        factoryBean.setJobFactory(jobFactory);  <span class="hljs-comment">// 设置自定义的 JobFactory，支持 Spring 注入</span><br>        <span class="hljs-comment">//factoryBean.setDataSource(dataSource);  // 配置数据源（可选）</span><br>        <span class="hljs-keyword">return</span> factoryBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="任务类">任务类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 过期消息清理任务【处理7天前的消息】</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@RequiredArgsConstructor(onConstructor = @__(@Autowired))</span><span class="hljs-comment">// 此处的参数是兼容spring4的写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">cleanMessageRecordTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Job</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LiveChatRecordService liveChatRecordServiceImpl;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(JobExecutionContext jobExecutionContext)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br><br>        <span class="hljs-comment">// 每次清理1000条符合条件的过期的7天前数据</span><br>        liveChatRecordServiceImpl.batchRemove();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="调度器">调度器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过配置文件动态加载定时任务的调度器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/11/20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> QuartzYamlScheduler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;quartz&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzYamlScheduler</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span> <span class="hljs-comment">// 因为从配置文件获取值，不适合再通过构造参数注入</span><br>    <span class="hljs-keyword">private</span> Scheduler scheduler;<br><br>    <span class="hljs-keyword">private</span> List&lt;Map&lt;String, String&gt;&gt; tasks;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuartzYamlScheduler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        <span class="hljs-built_in">this</span>.scheduler = StdSchedulerFactory.getDefaultScheduler();<br>        scheduler.start();<br>    &#125;<br><br><br>    <span class="hljs-comment">// 加载配置文件中的任务</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadTasks</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SchedulerException &#123;<br>        <span class="hljs-keyword">for</span> (Map&lt;String, String&gt; task : tasks) &#123;<br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob(getClass(task.get(<span class="hljs-string">&quot;jobClassName&quot;</span>)))<br>                    .withIdentity(task.get(<span class="hljs-string">&quot;jobName&quot;</span>), task.get(<span class="hljs-string">&quot;jobGroup&quot;</span>))<br>                    .build();<br><br>            <span class="hljs-type">Trigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> TriggerBuilder.newTrigger()<br>                    .withIdentity(task.get(<span class="hljs-string">&quot;jobName&quot;</span>) + <span class="hljs-string">&quot;Trigger&quot;</span>, task.get(<span class="hljs-string">&quot;jobGroup&quot;</span>))<br>                    .withSchedule(CronScheduleBuilder.cronSchedule(task.get(<span class="hljs-string">&quot;cronExpression&quot;</span>)))<br>                    .build();<br><br>            scheduler.scheduleJob(jobDetail, trigger);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Job</span>&gt; getClass(String jobClassName) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Job</span>&gt;) Class.forName(jobClassName);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Class not found: &quot;</span> + jobClassName);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以不用配置类了。</p><h4 id="自定义存数据库的方式">自定义存数据库的方式</h4><p>注意：这里存到数据库的是方便查看的，这里重启不会恢复计划任务接着上次的执行，比如上次执行到9了，重启后，这次依然从头开始。若需要重启后恢复，需要用quartz专门的sql进行创建</p><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.quartz.SpringBeanJobFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-comment">// 这里的配置是为了能在任务类中使用spring注入功能，否则使用注入功能将报错</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringBeanJobFactory <span class="hljs-title function_">springBeanJobFactory</span><span class="hljs-params">(ApplicationContext applicationContext)</span> &#123;<br>        <span class="hljs-type">SpringBeanJobFactory</span> <span class="hljs-variable">jobFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringBeanJobFactory</span>();<br>        jobFactory.setApplicationContext(applicationContext); <span class="hljs-comment">// 将 Spring 的 ApplicationContext 注入</span><br>        <span class="hljs-keyword">return</span> jobFactory;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SchedulerFactoryBean <span class="hljs-title function_">schedulerFactoryBean</span><span class="hljs-params">(SpringBeanJobFactory jobFactory, DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">SchedulerFactoryBean</span> <span class="hljs-variable">factoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerFactoryBean</span>();<br>        factoryBean.setJobFactory(jobFactory);  <span class="hljs-comment">// 设置自定义的 JobFactory，支持 Spring 注入</span><br>        <span class="hljs-comment">//factoryBean.setDataSource(dataSource);  // 配置数据源（可选）</span><br>        <span class="hljs-keyword">return</span> factoryBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实体类</p><p><code>quartz.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 项目的定时任务信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;quartz&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quartz</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 编号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long quartzId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 任务启用状态 【0 &gt; 启用 || 1 &gt; 停止】</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer quartzStatus;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 任务名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzJobName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 任务组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzJobGroup;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 任务描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzJobDescription;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 任务目标类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzJobClass;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 触发器名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzTriggerName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 触发器分组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzTriggerGroup;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; 任务触发器描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzTriggerDescription;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定时任务表 &gt; CRON时间表达式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String quartzCronExpression;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>数据库创建语句</p><p>初始化mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 创建定时任务表 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CreateQuartzTable&quot;</span>&gt;</span><br>    CREATE TABLE IF NOT EXISTS `quartz`<br>    (<br>        `quartz_id` BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#x27;编号&#x27;,<br>        `quartz_status` INTEGER DEFAULT 0 COMMENT &#x27;任务状态&#x27;,<br>        `quartz_job_name` VARCHAR(255) COMMENT &#x27;任务名称&#x27;,<br>        `quartz_job_group` VARCHAR(255) COMMENT &#x27;任务分组名&#x27;,<br>        `quartz_job_class` VARCHAR(255) COMMENT &#x27;目标任务类&#x27;,<br>        `quartz_job_description` VARCHAR(255) COMMENT &#x27;任务描述&#x27;,<br>        `quartz_trigger_name` VARCHAR(255) COMMENT &#x27;触发器名&#x27;,<br>        `quartz_trigger_group` VARCHAR(255) COMMENT &#x27;触发器分组&#x27;,<br>        `quartz_trigger_description` VARCHAR(255) COMMENT &#x27;任务描述&#x27;,<br>        `quartz_cron_expression` VARCHAR(255) COMMENT &#x27;CRON时间表达式&#x27;<br>    )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT &#x27;定时任务表&#x27;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>初始化定时任务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SpringBoot 副线程类</span><br><span class="hljs-comment"> * 说明：此副线程一般用于以下场景</span><br><span class="hljs-comment"> * - 数据初始化：在应用程序启动时加载一些初始数据到数据库中。</span><br><span class="hljs-comment"> * - 发送通知：向用户或系统发送启动通知，例如发送邮件或消息队列中的消息。</span><br><span class="hljs-comment"> * - 执行检查：进行应用程序启动前的检查，如数据库连接检查、文件系统检查等。</span><br><span class="hljs-comment"> * - 启动日志：记录应用程序启动日志，提供启动时的系统状态信息。</span><br><span class="hljs-comment"> * - 定时任务：启动一些定时任务，如清理旧数据、备份操作等。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicationInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CommandLineRunner</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * SpringBoot 副线程 【在此项目中用于数据库初始化】</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args 命令参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception 异常类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 这里编写定时任务的初始化逻辑</span><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定时任务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.quartz.*;<br><span class="hljs-keyword">import</span> org.quartz.impl.matchers.GroupMatcher;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定时任务实现类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;quartz&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuartzService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">OPEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PAUSED</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> List&lt;Quartz&gt; tasks;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> QuartzMapper quartzMapper;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Scheduler scheduler;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化定时任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 从数据库获取定时任务</span><br>        List&lt;Quartz&gt; quartzList = quartzMapper.selectList(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 若定时任务为空则终止初始化程序</span><br>        <span class="hljs-keyword">if</span> (quartzList == <span class="hljs-literal">null</span> || quartzList.isEmpty())&#123;<br>            <span class="hljs-keyword">if</span> (tasks.isEmpty())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">for</span> (Quartz quartz : tasks) &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">insert</span> <span class="hljs-operator">=</span> quartzMapper.insert(quartz);<br>                        <span class="hljs-keyword">if</span> (insert &gt; <span class="hljs-number">0</span>) &#123;<br>                            ++num;<br>                        &#125;<br>                    &#125;<br>                    FormatPrintUtil.Info(<span class="hljs-string">&quot;初始化定时任务，应添加定时任务&quot;</span>+tasks.size()+<span class="hljs-string">&quot;个，实际添加定时任务&quot;</span>+num+<span class="hljs-string">&quot;个，未添加任务&quot;</span>+(tasks.size()-num)+<span class="hljs-string">&quot;个&quot;</span>);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    FormatPrintUtil.Error(<span class="hljs-string">&quot;初始化默认定时任务异常！&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            quartzList = quartzMapper.selectList(<span class="hljs-literal">null</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 遍历获取到的所有任务</span><br>        <span class="hljs-keyword">for</span> (Quartz quartz : quartzList) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">JobKey</span> <span class="hljs-variable">jobKey</span> <span class="hljs-operator">=</span> JobKey.jobKey(quartz.getQuartzJobName(), quartz.getQuartzJobGroup());<br>                <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> scheduler.getJobDetail(jobKey);<br>                <span class="hljs-comment">// 若任务不存在，则正常添加任务</span><br>                <span class="hljs-keyword">if</span> (jobDetail==<span class="hljs-literal">null</span>) &#123;<br>                    jobDetail = JobBuilder.newJob((Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Job</span>&gt;) Class.forName(quartz.getQuartzJobClass())).withIdentity(jobKey).withDescription(quartz.getQuartzJobDescription()).build();<br>                &#125;<br>                <span class="hljs-type">TriggerKey</span> <span class="hljs-variable">triggerKey</span> <span class="hljs-operator">=</span> TriggerKey.triggerKey(quartz.getQuartzTriggerName(), quartz.getQuartzTriggerGroup());<br>                <span class="hljs-comment">// 通过键名获取触发器</span><br>                <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> (CronTrigger) scheduler.getTrigger(triggerKey);<br>                <span class="hljs-keyword">if</span> (trigger==<span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-comment">// 触发器名，触发器组</span><br>                    TriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger().withIdentity(quartz.getQuartzTriggerName(), quartz.getQuartzTriggerGroup());<br>                    <span class="hljs-comment">//triggerBuilder.startNow();</span><br>                    <span class="hljs-comment">// 触发时间设定</span><br>                    triggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(quartz.getQuartzCronExpression()));<br>                    <span class="hljs-comment">// 创建Trigger对象</span><br>                    trigger = (CronTrigger) triggerBuilder.build();<br><br>                    List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Trigger</span>&gt; triggersOfJob = scheduler.getTriggersOfJob(jobDetail.getKey());<br>                    scheduler.deleteJob(jobDetail.getKey());<br><br><br>                    <span class="hljs-comment">// 将任务与触发器关联</span><br>                    scheduler.scheduleJob(jobDetail,trigger);<br>                    <span class="hljs-keyword">for</span> (Trigger trigger1 : triggersOfJob) &#123;<br>                        scheduler.scheduleJob(trigger1);<br>                    &#125;<br><br><br>                    <span class="hljs-comment">// 若任务为未启用状态，则暂停触发器执行</span><br>                    <span class="hljs-keyword">if</span> (quartz.getQuartzStatus()==PAUSED)&#123;<br>                        scheduler.pauseTrigger(trigger.getKey());<br>                    &#125;<br><span class="hljs-comment">//                    // 将任务添加到调度器</span><br><span class="hljs-comment">//                    scheduler.addJob(jobDetail, false);  // false表示不会覆盖已有任务</span><br>                    scheduler.start();<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 若触发器不为空，则该触发器不能使用，创建失败！</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (SchedulerException | ClassNotFoundException e) &#123;<br>                FormatPrintUtil.Info(<span class="hljs-string">&quot;任务初始化失败！&quot;</span>+e.getMessage());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                FormatPrintUtil.Info(<span class="hljs-string">&quot;初始化定时任务：&quot;</span>+quartz.getQuartzJobName());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计划任务状态【总体】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">status</span><span class="hljs-params">(String status)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (status.equals(String.valueOf(PAUSED)))&#123;<br>                <span class="hljs-comment">// 暂停所有计划任务</span><br>                scheduler.standby();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 启动所有任务</span><br>                scheduler.start();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;调度器异常！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计划任务状态【单体】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">singleJob</span><span class="hljs-params">(String id,String status)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Quartz</span> <span class="hljs-variable">quartz</span> <span class="hljs-operator">=</span> quartzMapper.selectById(id);<br>            <span class="hljs-keyword">if</span> (quartz==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-type">TriggerKey</span> <span class="hljs-variable">triggerKey</span> <span class="hljs-operator">=</span> TriggerKey.triggerKey(quartz.getQuartzTriggerName(), quartz.getQuartzTriggerGroup());<br>            <span class="hljs-comment">// 通过键名获取触发器</span><br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">oldTrigger</span> <span class="hljs-operator">=</span> (CronTrigger) scheduler.getTrigger(triggerKey);<br>            <span class="hljs-comment">// 若触发器为空，或者触发器的时间表达式与数据库记录的不同，则终止方法</span><br>            <span class="hljs-keyword">if</span>(oldTrigger == <span class="hljs-literal">null</span> || !oldTrigger.getCronExpression().equalsIgnoreCase(quartz.getQuartzCronExpression()))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// 若为1，恢复当前触发器</span><br>            <span class="hljs-keyword">if</span> (status.equals(String.valueOf(PAUSED)))&#123;<br>                scheduler.resumeTrigger(triggerKey);<br>            &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 暂停当前任务触发器</span><br>                scheduler.pauseTrigger(triggerKey);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            FormatPrintUtil.Error(<span class="hljs-string">&quot;任务执行失败！&quot;</span>+e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计划任务状态【任务组】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">jobGroup</span><span class="hljs-params">(String jobGroup,String status)</span> &#123;<br>        <span class="hljs-comment">// 根据任务组名称获取当前任务组下所有匹配到的任务</span><br>        GroupMatcher&lt;JobKey&gt; groupMatcher = GroupMatcher.jobGroupEquals(jobGroup);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (status.equals(String.valueOf(PAUSED)))&#123;<br>                scheduler.pauseJobs(groupMatcher);<br>                System.out.println(<span class="hljs-string">&quot;任务组 &quot;</span> + jobGroup + <span class="hljs-string">&quot; 中的所有任务已暂停&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                scheduler.resumeJobs(groupMatcher);<br>                System.out.println(<span class="hljs-string">&quot;任务组 &quot;</span> + jobGroup + <span class="hljs-string">&quot; 中的所有任务已恢复&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行一次任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">once</span><span class="hljs-params">(String id)</span>&#123;<br>        <span class="hljs-type">Quartz</span> <span class="hljs-variable">quartz</span> <span class="hljs-operator">=</span> quartzMapper.selectById(id);<br>        <span class="hljs-keyword">if</span> (quartz==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">JobKey</span> <span class="hljs-variable">jobKey</span> <span class="hljs-operator">=</span> JobKey.jobKey(quartz.getQuartzJobName(), quartz.getQuartzJobGroup());<br>        <span class="hljs-comment">// 立刻执行一次任务</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            scheduler.triggerJob(jobKey);<br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询所有计划任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Page&lt;Quartz&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Page&lt;Quartz&gt; page)</span>&#123;<br>        quartzMapper.selectPage(page,<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">return</span> page;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 新增定时任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Quartz quartz)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">insert</span> <span class="hljs-operator">=</span> quartzMapper.insert(quartz);<br>            <span class="hljs-keyword">if</span> (insert == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">// 任务名，任务组，任务类</span><br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> JobBuilder.newJob((Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Job</span>&gt;) Class.forName(quartz.getQuartzJobClass()))<br>                    .withIdentity(quartz.getQuartzJobName(), quartz.getQuartzJobGroup())<br>                    .withDescription(quartz.getQuartzJobDescription())<br>                    .build();<br>            <span class="hljs-comment">// 触发器名，触发器组</span><br>            TriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger().withIdentity(quartz.getQuartzTriggerName(), quartz.getQuartzTriggerGroup()).withDescription(quartz.getQuartzTriggerDescription());<br>            <span class="hljs-comment">//triggerBuilder.startNow();</span><br>            <span class="hljs-comment">// 触发时间设定</span><br>            triggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(quartz.getQuartzCronExpression()));<br>            <span class="hljs-comment">// 创建Trigger对象</span><br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">trigger</span> <span class="hljs-operator">=</span> (CronTrigger) triggerBuilder.build();<br>            <span class="hljs-comment">// 将任务与触发器关联</span><br>            scheduler.scheduleJob(jobDetail, trigger);<br>            <span class="hljs-comment">// 若任务为未启用状态，则暂停触发器执行</span><br>            <span class="hljs-keyword">if</span> (quartz.getQuartzStatus()==<span class="hljs-number">1</span>)&#123;<br>                scheduler.pauseTrigger(trigger.getKey());<br>            &#125;<br>            <span class="hljs-comment">// 启动定时任务</span><br>            scheduler.start();<br><br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;调度器异常！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;未找到目标任务类!&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;......新增定时任务......&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新定时任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional(rollbackFor = Exception.class)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Quartz quartz)</span> &#123;<br>        <span class="hljs-comment">// 获取数据库中的定时任务信息</span><br>        <span class="hljs-type">Quartz</span> <span class="hljs-variable">quartzDBData</span> <span class="hljs-operator">=</span> quartzMapper.selectById(quartz.getQuartzId());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取要修改的任务触发器键名</span><br>            <span class="hljs-type">TriggerKey</span> <span class="hljs-variable">triggerKey</span> <span class="hljs-operator">=</span> TriggerKey.triggerKey(quartz.getQuartzTriggerName(), quartz.getQuartzTriggerGroup());<br>            <span class="hljs-comment">// 通过键名获取触发器</span><br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">oldTrigger</span> <span class="hljs-operator">=</span> (CronTrigger) scheduler.getTrigger(triggerKey);<br>            <span class="hljs-comment">// 若触发器为空，或者触发器的时间表达式与数据库记录的不同，则终止方法</span><br>            <span class="hljs-keyword">if</span>(oldTrigger == <span class="hljs-literal">null</span> || !oldTrigger.getCronExpression().equalsIgnoreCase(quartzDBData.getQuartzCronExpression()))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-type">JobKey</span> <span class="hljs-variable">jobKey</span> <span class="hljs-operator">=</span> JobKey.jobKey(quartz.getQuartzJobName(), quartz.getQuartzJobGroup());<br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">jobDetail</span> <span class="hljs-operator">=</span> scheduler.getJobDetail(jobKey);<br>            <span class="hljs-comment">// 若不存在此计划，终止</span><br>            <span class="hljs-keyword">if</span> (jobDetail == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-type">JobDetail</span> <span class="hljs-variable">updatedJobDetail</span> <span class="hljs-operator">=</span> jobDetail.getJobBuilder()<br>                    .withDescription(quartz.getQuartzJobDescription()) <span class="hljs-comment">// 设置新的描述</span><br>                    .build();<br><br>            <span class="hljs-comment">// 更新任务</span><br>            scheduler.addJob(updatedJobDetail, <span class="hljs-literal">true</span>); <span class="hljs-comment">// true 表示替换现有任务</span><br><br>            <span class="hljs-comment">// 触发器名，触发器组</span><br>            TriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger()<br>                    .withIdentity(quartz.getQuartzTriggerName(),quartz.getQuartzTriggerGroup())<br>                    .withDescription(quartz.getQuartzTriggerDescription());<br>            <span class="hljs-comment">// 若修改的执行状态为执行一次</span><br><span class="hljs-comment">//                if (quartz.getQuartzStatus()==1)&#123;</span><br><span class="hljs-comment">//                    triggerBuilder.startNow();</span><br><span class="hljs-comment">//                &#125;</span><br><br>            <span class="hljs-comment">// 设置任务触发的时间表达式</span><br>            triggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(quartz.getQuartzCronExpression()));<br><br>            <span class="hljs-comment">// 创建Trigger对象</span><br>            <span class="hljs-type">CronTrigger</span> <span class="hljs-variable">newTrigger</span> <span class="hljs-operator">=</span> (CronTrigger) triggerBuilder.build();<br>            <span class="hljs-comment">// 更新</span><br>            scheduler.rescheduleJob(triggerKey, newTrigger);<br>            <span class="hljs-keyword">if</span> (quartz.getQuartzStatus()==<span class="hljs-number">1</span>)&#123;<br>                scheduler.pauseTrigger(triggerKey);<br>            &#125;<br>            <span class="hljs-comment">// 虽然这里只需要在初始化时执行一次就可以了，但为了防止初始化无任务时没有启动定时任务的情况。</span><br>            scheduler.start();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> quartzMapper.updateById(quartz);<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SchedulerException e)&#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;调度器异常！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除一个计划任务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> QuartzServiceImpl</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.service.impl</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-comment">// 查询是否存在</span><br>        <span class="hljs-type">Quartz</span> <span class="hljs-variable">quartz</span> <span class="hljs-operator">=</span> quartzMapper.selectById(id);<br>        <span class="hljs-keyword">if</span> (quartz==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">JobKey</span> <span class="hljs-variable">jobKey</span> <span class="hljs-operator">=</span> JobKey.jobKey(quartz.getQuartzJobName(), quartz.getQuartzJobGroup());<br>            List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Trigger</span>&gt; triggers = scheduler.getTriggersOfJob(jobKey);<br>            <span class="hljs-comment">// 若触发器为空，则无需删除</span><br>            <span class="hljs-keyword">if</span> (triggers == <span class="hljs-literal">null</span> || triggers.isEmpty())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(triggers.size() == <span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 若触发器只有一个，则可以删除触发器和任务</span><br>                <span class="hljs-comment">// 删除任务及其所有触发器</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scheduler.deleteJob(JobKey.jobKey(quartz.getQuartzJobName(), quartz.getQuartzJobGroup()));<br>                <span class="hljs-comment">// 删除计划任务</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> quartzMapper.deleteById(quartz.getQuartzId());<br>                <span class="hljs-comment">// 若有一个删除失败，那都是失败的</span><br>                <span class="hljs-keyword">if</span> (!b || i==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;删除计划任务失败！&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 移除触发器</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scheduler.unscheduleJob(TriggerKey.triggerKey(quartz.getQuartzTriggerName(), quartz.getQuartzTriggerGroup()));<br><br>                <span class="hljs-comment">// 删除计划任务</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> quartzMapper.deleteById(quartz.getQuartzId());<br>                <span class="hljs-keyword">if</span> (!b || i==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;删除计划任务失败！&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (SchedulerException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;删除失败！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;......移除一个定时任务......&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="用官方存数据库的方式">用官方存数据库的方式</h4><p>此种方式需要用官方的sql文件导入数据库进行初始化。这种方式在项目运行期间会自行保存到数据库。并在每次项目启动时读取定时任务。</p>]]></content>
    
    
    <categories>
      
      <category>定时任务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quartz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>订单id生成工具</title>
    <link href="/2024/11/12/%E8%AE%A2%E5%8D%95id%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/11/12/%E8%AE%A2%E5%8D%95id%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="订单id生成工具">订单id生成工具</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 订单id生成器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 前缀名+时间+随机数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomId</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单id生成器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> RandomId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix 订单号前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 数值相加生成法 &gt;&gt;&gt; 效率更高 &gt;&gt;&gt; 范围【100000 - 999999】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回订单id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandom</span><span class="hljs-params">(String prefix)</span>&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-keyword">if</span> (prefix.isEmpty())&#123;<br>            prefix = <span class="hljs-string">&quot;ES&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">100000</span> + random.nextInt(<span class="hljs-number">900000</span>);<br>        <span class="hljs-keyword">return</span> prefix + sdf.format(date) + randomNumber;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 订单id生成器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> RandomId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix 订单号前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 末尾随机数不足6位前缀补零 &gt;&gt;&gt; 范围更大 &gt;&gt;&gt; 范围【000000 - 999999】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回订单id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSixNum</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-keyword">if</span> (prefix.isEmpty())&#123;<br>            prefix = <span class="hljs-string">&quot;ES&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyyMMddHHmmss&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">randomNumber</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">1000000</span>); <span class="hljs-comment">// 生成 0 到 999999 之间的随机数</span><br><br>        <span class="hljs-comment">// 使用 String.format() 补齐 6 位，不足部分用 0 填充</span><br><br>        <span class="hljs-keyword">return</span> prefix + sdf.format(date) + randomNumber;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;订单编号：&quot;</span>);<br>        <span class="hljs-comment">// 高效率</span><br>        System.out.println(getRandom(<span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-comment">// 大范围</span><br>        System.out.println(getSixNum(<span class="hljs-string">&quot;&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生成器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字+字符的随机工具</title>
    <link href="/2024/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="数字-字符的随机工具">数字+字符的随机工具</h3><p>前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomString</span>(<span class="hljs-params">len</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CHARACTERS</span> = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BASE</span> = <span class="hljs-variable constant_">CHARACTERS</span>.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">while</span> (result.<span class="hljs-property">length</span> &lt; len) &#123;<br>        <span class="hljs-comment">// 生成一个大随机数并转换为 62 进制字符串</span><br>        <span class="hljs-keyword">let</span> randomNum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span>);<br>        <span class="hljs-keyword">let</span> randomPart = <span class="hljs-title function_">toBase62</span>(randomNum, <span class="hljs-variable constant_">CHARACTERS</span>, <span class="hljs-variable constant_">BASE</span>);<br>        result += randomPart;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, len);  <span class="hljs-comment">// 截取指定长度</span><br>&#125;<br><br><span class="hljs-comment">// 将数字转换为 62 进制字符串</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toBase62</span>(<span class="hljs-params">value, characters, base</span>) &#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">const</span> index = value % base;<br>        result = characters[index] + result;<br>        value = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(value / base);<br>    &#125; <span class="hljs-keyword">while</span> (value &gt; <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 示例：生成一个长度为 11 的随机字符串</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">randomString</span>(<span class="hljs-number">11</span>));<br><br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomStringGenerator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHARACTERS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> CHARACTERS.length();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">RANDOM</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">randomString</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(len);<br><br>        <span class="hljs-keyword">while</span> (sb.length() &lt; len) &#123;<br>            <span class="hljs-comment">// 生成一个较大的随机数，再将其转换为 62 进制字符串</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">randomLong</span> <span class="hljs-operator">=</span> Math.abs(RANDOM.nextLong());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">randomPart</span> <span class="hljs-operator">=</span> toBase62(randomLong);<br>            sb.append(randomPart);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sb.substring(<span class="hljs-number">0</span>, len);  <span class="hljs-comment">// 截取指定长度</span><br>    &#125;<br><br>    <span class="hljs-comment">// 将数字转换为 62 进制字符串</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toBase62</span><span class="hljs-params">(<span class="hljs-type">long</span> value)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (value % BASE);<br>            sb.append(CHARACTERS.charAt(index));<br>            value /= BASE;<br>        &#125; <span class="hljs-keyword">while</span> (value &gt; <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> sb.reverse().toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(randomString(<span class="hljs-number">11</span>));  <span class="hljs-comment">// 生成一个长度为 11 的随机字符串</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="颜色随机工具">颜色随机工具</h3><p>前端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomColor</span>(<span class="hljs-params">len = <span class="hljs-number">6</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (len &lt;= <span class="hljs-number">11</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span> + len);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">randomColor</span>(<span class="hljs-number">11</span>) + <span class="hljs-title function_">randomColor</span>(len - <span class="hljs-number">11</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomColorGenerator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Random</span> <span class="hljs-variable">RANDOM</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">randomColor</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(len);<br>        <br>        <span class="hljs-keyword">while</span> (sb.length() &lt; len) &#123;<br>            <span class="hljs-comment">// 生成一个随机整数，并将其转换为 36 进制字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">randomPart</span> <span class="hljs-operator">=</span> Integer.toString(RANDOM.nextInt(<span class="hljs-number">36</span>), <span class="hljs-number">36</span>);<br>            sb.append(randomPart);<br>        &#125;<br><br>        <span class="hljs-comment">// 确保生成的字符串满足长度要求</span><br>        <span class="hljs-keyword">return</span> sb.substring(<span class="hljs-number">0</span>, len);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(randomColor(<span class="hljs-number">6</span>));  <span class="hljs-comment">// 生成一个长度为 6 的随机字符串</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随机数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23种设计模式</title>
    <link href="/2024/11/08/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/11/08/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="23种设计模式">23种设计模式</h2><h3 id="按问题类型划分">按问题类型划分</h3><h4 id="1-创建型设计模式（解决对象创建过程中的问题）">1. <strong>创建型设计模式</strong>（解决对象创建过程中的问题）</h4><p>这些设计模式关注如何创建对象，确保系统在创建对象时具备灵活性和可扩展性，减少对象创建时的复杂度。</p><ul><li><strong>单例模式 (Singleton)</strong><br><strong>问题</strong>：需要确保一个类只有一个实例，并提供全局访问点。<br><strong>解决</strong>：通过控制实例的创建过程来保证类只有一个实例。</li><li><strong>工厂方法模式 (Factory Method)</strong><br><strong>问题</strong>：不知道在运行时需要创建哪些类的实例。<br><strong>解决</strong>：通过定义一个创建对象的接口，让子类决定实例化哪个类。</li><li><strong>抽象工厂模式 (Abstract Factory)</strong><br><strong>问题</strong>：需要创建一组相关的对象，但不想指定它们的具体类。<br><strong>解决</strong>：提供一个接口来创建一系列相关或依赖的对象，而不具体指定它们的类。</li><li><strong>建造者模式 (Builder)</strong><br><strong>问题</strong>：创建一个复杂对象时，构建过程非常复杂，或者创建过程中的多个步骤独立。<br><strong>解决</strong>：通过分步构建，逐步创建复杂的对象。</li><li><strong>原型模式 (Prototype)</strong><br><strong>问题</strong>：创建新对象时性能较低或对象创建比较复杂。<br><strong>解决</strong>：通过克隆现有对象来创建新对象，避免重复的创建操作。</li></ul><h4 id="2-结构型设计模式（解决类或对象之间的关系问题）">2. <strong>结构型设计模式</strong>（解决类或对象之间的关系问题）</h4><p>这些模式主要处理类或对象的组成方式，帮助设计更加高效、灵活的系统结构。</p><ul><li><strong>适配器模式 (Adapter)</strong><br><strong>问题</strong>：需要使用某个现有的接口，但它的接口与当前系统不兼容。<br><strong>解决</strong>：通过创建一个适配器类，将现有接口转换为需要的接口。</li><li><strong>桥接模式 (Bridge)</strong><br><strong>问题</strong>：在不同的维度上扩展类（如功能与实现分离）时，导致类的数量急剧增加。<br><strong>解决</strong>：将功能和实现分离，让它们独立变化，从而降低系统复杂性。</li><li><strong>组合模式 (Composite)</strong><br><strong>问题</strong>：处理部分与整体的层级结构时。<br><strong>解决</strong>：通过将对象组合成树形结构，使得客户端可以一致地对待单个对象和组合对象。</li><li><strong>装饰器模式 (Decorator)</strong><br><strong>问题</strong>：需要动态地为对象添加职责，但不能通过继承来扩展。<br><strong>解决</strong>：通过包装原始对象，动态添加新的功能。</li><li><strong>外观模式 (Facade)</strong><br><strong>问题</strong>：系统中的子系统复杂且不易使用。<br><strong>解决</strong>：提供一个统一的接口，简化子系统的操作。</li><li><strong>享元模式 (Flyweight)</strong><br><strong>问题</strong>：对象数量过多，导致内存消耗过大。<br><strong>解决</strong>：通过共享已存在的对象来减少内存消耗。</li><li><strong>代理模式 (Proxy)</strong><br><strong>问题</strong>：控制对一个对象的访问，提供对某个对象的间接访问。<br><strong>解决</strong>：通过代理对象控制对目标对象的访问（可以是延迟加载、访问控制等）。</li></ul><h4 id="3-行为型设计模式（解决对象之间的交互和职责分配问题）">3. <strong>行为型设计模式</strong>（解决对象之间的交互和职责分配问题）</h4><p>这些设计模式主要关注类与类之间如何交互，如何分配责任，以及如何使得对象之间的交互更加灵活和解耦。</p><ul><li><strong>责任链模式 (Chain of Responsibility)</strong><br><strong>问题</strong>：请求的处理者不确定，或者处理者的顺序不确定。<br><strong>解决</strong>：通过创建一个链表结构的处理对象，让每个对象负责处理特定的请求，直到某个对象处理完毕。</li><li><strong>命令模式 (Command)</strong><br><strong>问题</strong>：请求的发送者和请求的接收者之间高度耦合。<br><strong>解决</strong>：将请求封装成一个命令对象，从而解耦请求的发送者和接收者。</li><li><strong>解释器模式 (Interpreter)</strong><br><strong>问题</strong>：需要对语言进行解析和解释。<br><strong>解决</strong>：为特定的语言或表达式创建解释器，通过定义文法规则来解释和计算输入。</li><li><strong>迭代器模式 (Iterator)</strong><br><strong>问题</strong>：需要遍历一个容器中的元素，而不暴露容器的内部结构。<br><strong>解决</strong>：提供一个迭代器对象，允许客户端按顺序访问集合元素。</li><li><strong>中介者模式 (Mediator)</strong><br><strong>问题</strong>：多个对象之间有复杂的交互，导致系统非常复杂。<br><strong>解决</strong>：通过引入中介者对象，所有的交互都通过中介者进行，从而简化对象之间的关系。</li><li><strong>备忘录模式 (Memento)</strong><br><strong>问题</strong>：需要保存和恢复对象的状态，但又不能暴露对象的内部结构。<br><strong>解决</strong>：通过备忘录对象保存对象的状态，以便以后恢复。</li><li><strong>观察者模式 (Observer)</strong><br><strong>问题</strong>：一个对象的状态变化需要通知其他依赖的对象。<br><strong>解决</strong>：定义一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖它的对象都会自动得到通知。</li><li><strong>状态模式 (State)</strong><br><strong>问题</strong>：一个对象的行为取决于它的状态，而且状态之间的切换逻辑较为复杂。<br><strong>解决</strong>：通过将不同的状态抽象为状态对象，每个状态对象定义自己的行为，并在状态之间进行切换。</li><li><strong>策略模式 (Strategy)</strong><br><strong>问题</strong>：需要根据不同的条件选择不同的算法或行为。<br><strong>解决</strong>：将每个算法或行为封装成一个策略对象，客户端可以根据需要选择不同的策略。</li><li><strong>模板方法模式 (Template Method)</strong><br><strong>问题</strong>：子类需要按照特定顺序执行一些步骤，但这些步骤中的某些操作是可变的。<br><strong>解决</strong>：通过在父类中定义一个模板方法，调用一些可变的步骤，由子类来实现具体的步骤。</li><li><strong>访问者模式 (Visitor)</strong><br><strong>问题</strong>：对象结构中的元素需要不同的操作，但它们通常很难扩展。<br><strong>解决</strong>：通过访问者对象来定义对不同元素的操作，将操作与对象结构解耦。</li></ul><h4 id="总结">总结</h4><ul><li><strong>创建型模式</strong>：主要解决对象创建的问题。</li><li><strong>结构型模式</strong>：主要解决对象的组成结构和类之间的关系。</li><li><strong>行为型模式</strong>：主要解决对象之间的交互、职责分配和行为变化问题。</li></ul><h3 id="按使用频率划分">按使用频率划分</h3><h4 id="设计模式【常用】">设计模式【常用】</h4><h5 id="1-单例模式-Singleton">1. <strong>单例模式 (Singleton)</strong></h5><ul><li><strong>用途</strong>：确保一个类只有一个实例，并提供一个全局访问点。</li><li><strong>应用场景</strong>：数据库连接池、日志管理器、线程池、配置管理等场景中需要全局共享的资源。</li><li><strong>常见度</strong>：非常常见，尤其在需要管理全局状态或系统资源时。</li></ul><h5 id="2-工厂方法模式-Factory-Method-和-简单工厂-Simple-Factory">2. <strong>工厂方法模式 (Factory Method) 和 简单工厂 (Simple Factory)</strong></h5><ul><li><strong>用途</strong>：定义一个创建对象的接口，让子类决定要实例化的类。</li><li><strong>应用场景</strong>：当系统中存在多种类的对象时，通过工厂方法模式来创建对象，使代码解耦。</li><li><strong>常见度</strong>：非常常见，用于实例化可能变化的类。</li></ul><h5 id="3-策略模式-Strategy">3. <strong>策略模式 (Strategy)</strong></h5><ul><li><strong>用途</strong>：定义一系列算法，将它们封装起来，并使它们可以互相替换。</li><li><strong>应用场景</strong>：实现不同的业务逻辑或算法，比如支付方式的选择、日志记录方式的不同策略等。</li><li><strong>常见度</strong>：常见，尤其在需要在运行时动态选择算法或逻辑时使用。</li></ul><h5 id="4-观察者模式-Observer">4. <strong>观察者模式 (Observer)</strong></h5><ul><li><strong>用途</strong>：当对象状态发生变化时，自动通知并更新依赖的对象。</li><li><strong>应用场景</strong>：事件驱动系统、UI组件的状态联动、MVC架构中的视图更新等。</li><li><strong>常见度</strong>：非常常见，特别在订阅/发布模式中。</li></ul><h5 id="5-装饰器模式-Decorator">5. <strong>装饰器模式 (Decorator)</strong></h5><ul><li><strong>用途</strong>：动态地为对象添加额外的职责，而不影响其他对象。</li><li><strong>应用场景</strong>：为对象添加功能，比如为文件输入流/输出流添加加密功能、数据校验等。</li><li><strong>常见度</strong>：在需要扩展对象功能时非常常见，尤其是在流式处理和中间件的构建中。</li></ul><h5 id="6-模板方法模式-Template-Method">6. <strong>模板方法模式 (Template Method)</strong></h5><ul><li><strong>用途</strong>：在父类中定义算法的骨架，子类可以覆盖某些步骤。</li><li><strong>应用场景</strong>：处理具有一致流程的业务逻辑，但其中某些步骤是可变的，比如订单处理、数据处理等。</li><li><strong>常见度</strong>：常见，尤其在具有类似业务流程的场景中。</li></ul><h5 id="7-代理模式-Proxy">7. <strong>代理模式 (Proxy)</strong></h5><ul><li><strong>用途</strong>：为其他对象提供一种代理，以控制对这个对象的访问。</li><li><strong>应用场景</strong>：远程代理（如RMI）、虚拟代理（如懒加载）、保护代理（如访问控制）。</li><li><strong>常见度</strong>：常见，尤其在需要控制对对象访问的场景中，比如远程方法调用或权限控制。</li></ul><h5 id="8-责任链模式-Chain-of-Responsibility">8. <strong>责任链模式 (Chain of Responsibility)</strong></h5><ul><li><strong>用途</strong>：为请求创建一条处理链，每个对象沿链判断是否需要处理该请求。</li><li><strong>应用场景</strong>：事件处理链、审批流程、日志处理（不同级别的日志处理器链）。</li><li><strong>常见度</strong>：常见，尤其在多级处理系统或审批流程中。</li></ul><h5 id="9-建造者模式-Builder">9. <strong>建造者模式 (Builder)</strong></h5><ul><li><strong>用途</strong>：分步骤构造一个复杂对象，而不依赖于其他对象的内部表示。</li><li><strong>应用场景</strong>：构建复杂对象，如创建具有多参数的对象、SQL查询、构建UI界面等，避免构造器或工厂方法带来的大量参数，使代码更简洁。</li><li><strong>适用场景</strong>：当需要分步骤构造对象且构造过程复杂时，如创建带有多个可选参数的对象或当初始化需要多步设置时（例如SQL查询构建器、HTTP请求构建器）。</li><li><strong>常见度</strong>：常见，尤其在对象属性较多且构造过程较复杂时。</li><li><strong>使用频率</strong>：在构造复杂对象时非常常见，尤其在构造过程需要分步骤并且有多个可选参数的场景下。Java中的<code>StringBuilder</code>、<code>StringBuffer</code>类和<code>HttpRequest.Builder</code>就是典型的生成器模式应用。</li></ul><h5 id="10-外观模式-Facade">10. <strong>外观模式 (Facade)</strong></h5><ul><li><strong>用途</strong>：为一组复杂的子系统提供一个简单的接口，简化客户端对这些子系统的访问。</li><li><strong>应用场景</strong>：为复杂的系统（如服务层）提供统一接口，如数据库操作、Web服务接口等。</li><li><strong>常见度</strong>：较为常见，特别是当需要简化系统接口时。</li></ul><hr><h5 id="总结-2">总结</h5><ul><li><strong>最常见的设计模式</strong>：单例模式、工厂模式、策略模式和观察者模式，通常在日常开发和常规业务逻辑实现中最常用。</li><li><strong>场景驱动的模式</strong>：装饰器、模板方法、代理模式和责任链模式，主要在特定业务或需求时使用。</li></ul><h4 id="设计模式【不常用】">设计模式【不常用】</h4><h5 id="1-抽象工厂模式-Abstract-Factory">1. <strong>抽象工厂模式 (Abstract Factory)</strong></h5><ul><li><strong>用途</strong>：提供一个创建一系列相关或依赖对象的接口，而无需指定具体类。</li><li><strong>应用场景</strong>：跨平台应用开发（如GUI库的跨平台支持）、生产不同风格的一组产品（如不同品牌的UI控件）。</li><li><strong>适用场景</strong>：在需要创建一组相关联的对象时使用，比如前端组件库的不同主题下的一系列组件。</li></ul><h5 id="2-享元模式-Flyweight">2. <strong>享元模式 (Flyweight)</strong></h5><ul><li><strong>用途</strong>：通过共享减少大量细粒度对象带来的内存开销。</li><li><strong>应用场景</strong>：文字处理系统中的字符对象、地图应用中的图标对象、缓存系统等。</li><li><strong>适用场景</strong>：在系统中有大量相似对象时使用，以减少内存使用，如大量重复数据的游戏对象或界面元素。</li></ul><h5 id="3-中介者模式-Mediator">3. <strong>中介者模式 (Mediator)</strong></h5><ul><li><strong>用途</strong>：用一个中介对象封装一系列对象交互，避免对象之间的直接引用，解耦系统。</li><li><strong>应用场景</strong>：聊天系统、MVC架构中的控制器、UI组件的事件处理。</li><li><strong>适用场景</strong>：当系统中存在大量对象之间的复杂通信时，通过中介者简化交互逻辑。</li></ul><h5 id="4-命令模式-Command">4. <strong>命令模式 (Command)</strong></h5><ul><li><strong>用途</strong>：将请求封装为对象，使得用户可以用不同请求来参数化对象，支持撤销和重做操作。</li><li><strong>应用场景</strong>：事务操作（如数据库操作的撤销与恢复）、任务调度系统、菜单命令。</li><li><strong>适用场景</strong>：在系统中需要执行请求队列、记录操作日志或支持撤销/重做功能时使用。</li></ul><h5 id="5-备忘录模式-Memento">5. <strong>备忘录模式 (Memento)</strong></h5><ul><li><strong>用途</strong>：在不破坏封装的前提下，捕获并存储对象的内部状态，以便之后恢复。</li><li><strong>应用场景</strong>：数据恢复功能（如编辑器的撤销操作）、游戏存档功能。</li><li><strong>适用场景</strong>：在需要记录对象状态以便稍后恢复时使用，比如文本编辑器的多步撤销功能。</li></ul><h5 id="6-状态模式-State">6. <strong>状态模式 (State)</strong></h5><ul><li><strong>用途</strong>：允许对象在内部状态改变时改变其行为。</li><li><strong>应用场景</strong>：状态驱动的系统（如工单流程的状态转移）、状态机、游戏角色状态（如攻击、防御、逃跑）。</li><li><strong>适用场景</strong>：在对象的行为随状态变化时使用，比如订单状态流转系统或工作流系统。</li></ul><h5 id="7-原型模式-Prototype">7. <strong>原型模式 (Prototype)</strong></h5><ul><li><strong>用途</strong>：通过克隆现有对象来创建新对象，而不依赖于具体类。</li><li><strong>应用场景</strong>：需要频繁创建对象但对象初始化成本高时、对象结构较复杂。</li><li><strong>适用场景</strong>：在对象初始化成本较高，且希望通过复制已有对象来提高性能时使用，比如拷贝一张复杂数据结构的文档。</li></ul><h5 id="8-桥接模式-Bridge">8. <strong>桥接模式 (Bridge)</strong></h5><ul><li><strong>用途</strong>：将抽象部分与实现部分分离，使它们可以独立变化。</li><li><strong>应用场景</strong>：图形绘制系统中的不同形状和渲染方式、文件转换系统。</li><li><strong>适用场景</strong>：当需要跨多个维度扩展时使用，比如支持多种数据库和多种缓存策略的系统。</li></ul><h5 id="9-组合模式-Composite">9. <strong>组合模式 (Composite)</strong></h5><ul><li><strong>用途</strong>：将对象组合成树形结构以表示“部分-整体”的层次结构。</li><li><strong>应用场景</strong>：文件系统、GUI界面（如树状菜单和控件）、组织结构。</li><li><strong>适用场景</strong>：在需要处理树形结构或递归结构的系统中使用，比如图形界面中的复合控件。</li></ul><h5 id="10-访问者模式-Visitor">10. <strong>访问者模式 (Visitor)</strong></h5><ul><li><strong>用途</strong>：为对象结构增加新的操作，而无需更改对象结构本身。</li><li><strong>应用场景</strong>：编译器中的语法树操作、对象序列化与反序列化。</li><li><strong>适用场景</strong>：在需要对对象结构添加新操作但不希望更改对象结构时使用。</li></ul><h5 id="11-解释器模式-Interpreter">11. <strong>解释器模式 (Interpreter)</strong></h5><ul><li><strong>用途</strong>：给定一个语言，定义它的语法表示，并实现一个解释器来解释语法。</li><li><strong>应用场景</strong>：SQL解析、表达式求值、规则引擎、脚本解释器。</li><li><strong>适用场景</strong>：在需要解释和执行自定义语言或表达式的场景中使用，比如规则引擎和数学表达式解析器。</li></ul><hr><h5 id="总结-3">总结</h5><p>较少使用的设计模式通常解决的是较特殊或复杂的需求。例如：</p><ul><li><strong>享元模式</strong>和<strong>组合模式</strong>多用于性能优化或树结构管理。</li><li><strong>访问者模式</strong>和<strong>解释器模式</strong>用于需要扩展操作或语言解析的系统。</li><li><strong>状态模式</strong>和<strong>中介者模式</strong>在实现状态机或复杂的对象通信时非常实用。</li></ul><h4 id="设计模式【补充】">设计模式【补充】</h4><h5 id="1-迭代器模式-Iterator">1. <strong>迭代器模式 (Iterator)</strong></h5><ul><li><strong>用途</strong>：提供一种方法顺序访问一个聚合对象中的各个元素，而不暴露该对象的内部表示。</li><li><strong>应用场景</strong>：遍历容器（如列表、集合、树形结构）中的元素。</li><li><strong>适用场景</strong>：当需要在不同的数据结构上实现一致的访问方式时使用。例如，实现自定义集合类时，可通过迭代器模式为集合提供一致的遍历方式。</li><li><strong>使用频率</strong>：非常高，尤其在Java、C#等语言中，该模式被集合框架广泛使用。<code>for-each</code>循环和各种<code>Iterator</code>接口本质上都实现了迭代器模式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swagger2 升级到 openapi3</title>
    <link href="/2024/11/07/swagger%E5%8D%87%E7%BA%A7%E5%88%B0openapi/"/>
    <url>/2024/11/07/swagger%E5%8D%87%E7%BA%A7%E5%88%B0openapi/</url>
    
    <content type="html"><![CDATA[<h2 id="Swagger2-升级到-openapi3">Swagger2 升级到 openapi3</h2><h3 id="springboot-2-2-6-springboot-2-7-18"><code>springboot 2.2.6</code> -&gt; <code>springboot 2.7.18</code></h3><blockquote><p>由于springboot2.x最新版是2.7.18，所以为了更安全，也为了能用上之前版本缺失的配置，所以推荐升级到2.7.18，这个版本默认是开启静态资源访问的，无需再手动配置。</p></blockquote><h3 id="pom-xml"><code>pom.xml</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- knife4j的整合了openapi3的springboot依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-openapi3-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="application-yaml"><code>application.yaml</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 接口文档增强模式</span><br><span class="hljs-comment"># springdoc-openapi项目配置</span><br><span class="hljs-attr">springdoc:</span><br>  <span class="hljs-attr">swagger-ui:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/swagger-ui.html</span><br>    <span class="hljs-attr">tags-sorter:</span> <span class="hljs-string">alpha</span><br>    <span class="hljs-attr">operations-sorter:</span> <span class="hljs-string">alpha</span><br>  <span class="hljs-attr">api-docs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/v3/api-docs</span><br>  <span class="hljs-attr">group-configs:</span> <span class="hljs-comment"># 分组配置</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;用户模块&#x27;</span><br>      <span class="hljs-attr">paths-to-match:</span> <span class="hljs-string">&#x27;/vr/**&#x27;</span> <span class="hljs-comment"># 根据controller中的请求路径匹配</span><br>      <span class="hljs-attr">packages-to-scan:</span> <span class="hljs-string">org.example.controller</span> <span class="hljs-comment"># 指定要扫描的包</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">&#x27;管理员模块&#x27;</span><br>      <span class="hljs-attr">paths-to-match:</span> <span class="hljs-string">&#x27;/vrs/**&#x27;</span> <span class="hljs-comment"># 根据controller中的请求路径匹配</span><br>      <span class="hljs-attr">packages-to-scan:</span> <span class="hljs-string">org.example.converter</span> <span class="hljs-comment"># 指定要扫描的包</span><br><br><span class="hljs-comment"># knife4j的增强配置，不需要增强可以不配</span><br><span class="hljs-attr">knife4j:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>     <span class="hljs-comment"># 增强模式开关</span><br>  <span class="hljs-attr">production:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否是生产环境，是则禁止访问接口文档</span><br>  <span class="hljs-attr">setting:</span><br>    <span class="hljs-attr">language:</span> <span class="hljs-string">zh_cn</span><br>    <br><span class="hljs-comment"># 接口配置</span><br><span class="hljs-attr">api-doc:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-comment"># 文档标题</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">XXX系统</span> <span class="hljs-bullet">-</span> <span class="hljs-string">项目对接文档</span><br>    <span class="hljs-comment"># 文档描述</span><br>    <span class="hljs-attr">description:</span> <span class="hljs-string">本文为XXX系统内部资料，未经过项目负责人允许情况下禁止借阅和传播！</span><br>    <span class="hljs-comment"># 文档版本</span><br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1.0.0</span> <span class="hljs-bullet">-</span> <span class="hljs-string">Alpha</span><br>    <span class="hljs-comment"># API服务条款地址</span><br>    <span class="hljs-attr">terms-of-service-url:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-comment"># 文档作者</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Peter</span> <span class="hljs-string">Zhu</span><br>    <span class="hljs-comment"># 文档作者主页</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">http://localhost</span><br>    <span class="hljs-comment"># 文档作者邮箱</span><br>    <span class="hljs-attr">email:</span> <span class="hljs-string">localhost@localhost.com</span><br></code></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><p>完整配置文档参考地址：<a href="https://springdoc.org/#springdoc-openapi-core-properties">https://springdoc.org/#springdoc-openapi-core-properties</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.Components;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.OpenAPI;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.Contact;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.Info;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.License;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.security.SecurityRequirement;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.security.SecurityScheme;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springdoc.core.customizers.GlobalOpenApiCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Api配置类</span><br><span class="hljs-comment"> *  - 本项目接口文档地址[第三方UI]：ip地址:端口号/doc.html</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;api-doc.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 文档标题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 文档描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String description;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 版本号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String version;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 服务条款地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String termsOfServiceUrl;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 作者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 作者主页</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接口文档 &gt;&gt; 作者邮箱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据<span class="hljs-doctag">@Tag</span> 上的排序，写入x-order</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the global open api customizer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> GlobalOpenApiCustomizer <span class="hljs-title function_">orderGlobalOpenApiCustomizer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> openApi -&gt; &#123;<br>            <span class="hljs-comment">// 全局添加鉴权参数</span><br>            <span class="hljs-keyword">if</span>(openApi.getPaths()!=<span class="hljs-literal">null</span>)&#123;<br>                openApi.getPaths().forEach((s, pathItem) -&gt; &#123;<br>                    pathItem.readOperations().forEach(operation -&gt; &#123;<br>                        operation.addSecurityItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityRequirement</span>().addList(HttpHeaders.AUTHORIZATION));<br>                    &#125;);<br>                &#125;);<br>            &#125;<br>        &#125;;<br>    &#125;<br><br><span class="hljs-comment">//    @Bean  // 用于配置分组，可在配置文件中配置</span><br><span class="hljs-comment">//    public GroupedOpenApi userApi()&#123;</span><br><span class="hljs-comment">//        String[] paths = &#123; &quot;/**&quot; &#125;;</span><br><span class="hljs-comment">//        String[] packagedToMatch = &#123; &quot;com.xiaominfo.knife4j.demo.web&quot; &#125;;</span><br><span class="hljs-comment">//        return GroupedOpenApi.builder().group(&quot;用户模块&quot;)</span><br><span class="hljs-comment">//                .pathsToMatch(paths)</span><br><span class="hljs-comment">//                .addOperationCustomizer((operation, handlerMethod) -&gt; operation.addParametersItem(new HeaderParameter().name(&quot;groupCode&quot;).example(&quot;测试&quot;).description(&quot;集团code&quot;).schema(new StringSchema()._default(&quot;BR&quot;).name(&quot;groupCode&quot;).description(&quot;集团code&quot;))))</span><br><span class="hljs-comment">//                .packagesToScan(packagedToMatch).build();</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">// 配置文档信息</span><br>    <span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">customOpenAPI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()<br>                .info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>()<br>                        .title(title)<br>                        .contact(<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>()<br>                                        .name(name)  <span class="hljs-comment">// 作者</span><br>                                        .email(email)  <span class="hljs-comment">// 作者邮箱</span><br>                                        .url(url))  <span class="hljs-comment">// 作者主页</span><br>                        .version(version)         <span class="hljs-comment">// 文档版本</span><br>                        .description(description)  <span class="hljs-comment">// 文档描述</span><br>                        .termsOfService(termsOfServiceUrl) <span class="hljs-comment">// API服务条款</span><br>                        .license(<span class="hljs-keyword">new</span> <span class="hljs-title class_">License</span>().name(<span class="hljs-string">&quot;Apache 2.0&quot;</span>) <span class="hljs-comment">// 版权信息</span><br>                                .url(<span class="hljs-string">&quot;http://doc.xiaominfoss.com&quot;</span>)) <span class="hljs-comment">// 版权相关地址</span><br>                )<br>                .addSecurityItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityRequirement</span>().addList(HttpHeaders.AUTHORIZATION))  <span class="hljs-comment">// 用于添加请求头的信息</span><br>                .components(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>().addSecuritySchemes(HttpHeaders.AUTHORIZATION,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityScheme</span>()<br>                        .name(HttpHeaders.AUTHORIZATION).type(SecurityScheme.Type.HTTP).scheme(<span class="hljs-string">&quot;bearer&quot;</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="相关注解变化">相关注解变化</h3><p>迁移后注解变更参考文档：<a href="https://springdoc.org/#migrating-from-springfox">https://springdoc.org/#migrating-from-springfox</a></p><blockquote><ul><li>Replace swagger 2 annotations with swagger 3 annotations (it is already included with <code>springdoc-openapi-starter-webmvc-ui</code> dependency). Package for swagger 3 annotations is <code>io.swagger.v3.oas.annotations</code>.<ul><li><code>@Api</code> → <code>@Tag</code></li><li><code>@ApiIgnore</code> → <code>@Parameter(hidden = true)</code> or <code>@Operation(hidden = true)</code> or <code>@Hidden</code></li><li><code>@ApiImplicitParam</code> → <code>@Parameter</code></li><li><code>@ApiImplicitParams</code> → <code>@Parameters</code></li><li><code>@ApiModel</code> → <code>@Schema</code></li><li><code>@ApiModelProperty(allowEmptyValue = true)</code> → <code>@Schema(nullable = true)</code></li><li><code>@ApiModelProperty</code> → <code>@Schema</code></li><li><code>@ApiOperation(value = &quot;foo&quot;, notes = &quot;bar&quot;)</code> → <code>@Operation(summary = &quot;foo&quot;, description = &quot;bar&quot;)</code></li><li><code>@ApiParam</code> → <code>@Parameter</code></li><li><code>@ApiResponse(code = 404, message = &quot;foo&quot;)</code> → <code>@ApiResponse(responseCode = &quot;404&quot;, description = &quot;foo&quot;)</code></li></ul></li><li>This step is optional: Only if you have <strong>multiple</strong> <code>Docket</code> beans replace them with <code>GroupedOpenApi</code> beans.</li></ul></blockquote><h3 id="user-java实体类"><code>user.java</code>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.example.enums.User.GenderStatus;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户注册类【AO】</span><br><span class="hljs-comment"> * 说明：UserAO 用于处理用户的输入数据，通常用于将请求数据转换为内部的 DTO 或 BO。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(defaultValue = &quot;用户注册类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRegistrationAO</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 用户名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;用户名&quot;,name = &quot;username&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;密码&quot;,name = &quot;password&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 生日</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;生日&quot;,name = &quot;birthday&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 性别(0男，1女)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;性别&quot;,name = &quot;gender&quot;)</span><br>    <span class="hljs-keyword">private</span> GenderStatus gender;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 联系方式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;联系方式&quot;,name = &quot;phone&quot;)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 邮箱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;邮箱&quot;,name = &quot;email&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户输入类 &gt;&gt;&gt; 地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Schema(allowableValues = &quot;地址&quot;,name = &quot;address&quot;)</span><br>    <span class="hljs-keyword">private</span> String address;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="枚举类">枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 性别状态枚举类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">GenderStatus</span> &#123;<br><br>    MAN(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;男&quot;</span>),<br>    WOMEN(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;女&quot;</span>);<br><br>    <span class="hljs-meta">@EnumValue</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-meta">@JsonValue</span> <span class="hljs-comment">//json数据返回描述信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br><br><br>    GenderStatus(<span class="hljs-type">int</span> value, String message) &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Controller控制层"><code>Controller</code>控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.bean.BeanUtil;<br><span class="hljs-keyword">import</span> com.alibaba.excel.EasyExcel;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.Operation;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.Parameter;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponse;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.responses.ApiResponses;<br><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.example.mapper.VisitorRecordsMapper;<br><span class="hljs-keyword">import</span> org.example.model.domain.VisitorRecordsDO;<br><span class="hljs-keyword">import</span> org.example.result.Result;<br><span class="hljs-keyword">import</span> org.example.result.Result200;<br><span class="hljs-keyword">import</span> org.example.result.Result201;<br><span class="hljs-keyword">import</span> org.example.service.VisitorRecordsService;<br><span class="hljs-keyword">import</span> org.example.model.vo.VisitorRecordsVO;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> javax.validation.constraints.NotBlank;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;vr&quot;)</span><br><span class="hljs-meta">@ApiResponses(&#123;</span><br><span class="hljs-meta">    @ApiResponse(responseCode = &quot;200&quot;,description = &quot;请求成功！&quot;),</span><br><span class="hljs-meta">    @ApiResponse(responseCode = &quot;201&quot;,description = &quot;上传失败！&quot;)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Tag(name = &quot;访问记录&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VisitorRecordsController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VisitorRecordsService visitorRecordsService;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> VisitorRecordsMapper visitorRecordsMapper;<br><br>    <span class="hljs-meta">@ApiOperationSupport(author = &quot;Peter&quot;)</span><br>    <span class="hljs-meta">@Operation(summary = &quot;分页查询所有记录&quot;)</span><br>    <span class="hljs-meta">@GetMapping(&quot;queryAllByPages&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;Page&lt;VisitorRecordsVO&gt;&gt; <span class="hljs-title function_">queryAllVisitorRecordsByPage</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@NotBlank</span></span><br><span class="hljs-params">            <span class="hljs-meta">@Parameter(name = &quot;num&quot;)</span></span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(defaultValue = &quot;1&quot;)</span></span><br><span class="hljs-params">            Integer num,</span><br><span class="hljs-params">            <span class="hljs-meta">@NotBlank</span></span><br><span class="hljs-params">            <span class="hljs-meta">@Parameter(name = &quot;size&quot;)</span></span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(defaultValue = &quot;10&quot;)</span></span><br><span class="hljs-params">            Integer size)</span> &#123;<br><br>        Page&lt;VisitorRecordsDO&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(num, size);<br>        Page&lt;VisitorRecordsVO&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(num, size);<br>        visitorRecordsService.page(page);<br><br>        <span class="hljs-comment">//设置页数据</span><br>        page1.setRecords(BeanUtil.copyToList(page.getRecords(), VisitorRecordsVO.class));<br>        <span class="hljs-comment">//设置总记录数</span><br>        page1.setTotal(page.getTotal());<br>        <span class="hljs-comment">//设置总页数</span><br>        page1.setPages(page.getPages());<br><br>        <span class="hljs-keyword">return</span> Result200.ok(page1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Result-java"><code>Result.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 全局统一返回结果类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Schema(defaultValue = &quot;Result&quot;,description = &quot;响应类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-meta">@Schema(defaultValue = &quot;响应码&quot;,name = &quot;code&quot;,description = &quot;响应码&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer code;<br><br>    <span class="hljs-meta">@Schema(defaultValue = &quot;响应信息&quot;,name = &quot;message&quot;,description = &quot;响应信息&quot;)</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-meta">@Schema(defaultValue = &quot;响应数据&quot;,name = &quot;data&quot;,description = &quot;响应数据&quot;)</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">// 返回数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(T data)</span> &#123;<br>        Result&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>)<br>            result.setData(data);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(T body, Integer code, String message)</span> &#123;<br>        Result&lt;T&gt; result = build(body);<br>        result.setCode(code);<br>        result.setMessage(message);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">build</span><span class="hljs-params">(T body, ResultCodeEnum resultCodeEnum)</span> &#123;<br>        Result&lt;T&gt; result = build(body);<br>        result.setCode(resultCodeEnum.getCode());<br>        result.setMessage(resultCodeEnum.getMessage());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data  baseCategory1List</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Result</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="hljs-title function_">ok</span><span class="hljs-params">(T data)</span>&#123;<br>        <span class="hljs-keyword">return</span> build(data,ResultCodeEnum.SUCCESS);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Result&lt;T&gt; <span class="hljs-title function_">message</span><span class="hljs-params">(String msg)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setMessage(msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Result&lt;T&gt; <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setCode(code);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>启动后访问：<code>localhost/doc.html</code></p>]]></content>
    
    
    <categories>
      
      <category>接口文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swagger2</tag>
      
      <tag>openapi3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决cookie中无samesite的漏洞和无反CSRF设置的漏洞</title>
    <link href="/2024/11/06/cookie%E8%AE%BE%E7%BD%AEsamesite/"/>
    <url>/2024/11/06/cookie%E8%AE%BE%E7%BD%AEsamesite/</url>
    
    <content type="html"><![CDATA[<h2 id="解决cookie中无samesite的漏洞和无反CSRF设置的漏洞">解决cookie中无samesite的漏洞和无反CSRF设置的漏洞</h2><p>SpringBoot2.6.0之后可直接在配置文件中设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">session:</span><br>      <span class="hljs-attr">cookie:</span><br>        <span class="hljs-attr">same-site:</span> <span class="hljs-string">LAX</span>  <span class="hljs-comment"># 可以是 LAX、STRICT 或 NONE</span><br><span class="hljs-comment"># LAX：默认值，允许同站请求以及一些跨站请求（如 GET 表单提交）。</span><br><span class="hljs-comment"># STRICT：限制更加严格，Cookie 只会在同站请求中发送，不会在跨站请求中发送。</span><br><span class="hljs-comment"># NONE：允许跨站请求发送 Cookie，但需要将 Secure 属性设置为 true，即只通过 HTTPS 发送。</span><br></code></pre></td></tr></table></figure><p>以下为2.6.0之前</p><p>服务器会默认自动生成一个<code>cookie</code>,其中属性为<code>JSESSIONID</code>，这个是没有指定<code>samesite</code>。</p><p>解决方法是自己实现生成一个防止CSRF的cookie属性，并设置上<code>samesite</code>。这样自动生成的这个我们不用，也不做验证，就可以直接忽略掉了。</p><p>例如在网站入口处生成，以下以springboot的thymeleaf控制方法演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">(HttpSession session,HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">csrf_id</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">// 将加密后的存入cookie返回给前端，加密方法随意，可以用MD5或者BCrypt</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> PasswordUtil.hashPassword(csrf_id);<br>    <span class="hljs-comment">// 将csrf密文存入session</span><br>    session.setAttribute(<span class="hljs-string">&quot;XSRF-TOKEN&quot;</span>, s);<br>    <span class="hljs-type">ResponseCookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> ResponseCookie.from(<span class="hljs-string">&quot;XSRF-TOKEN&quot;</span>, csrf_id)<br>            .sameSite(<span class="hljs-string">&quot;Strict&quot;</span>)  <span class="hljs-comment">// SameSite 属性</span><br>            .maxAge(<span class="hljs-number">604800</span>) <span class="hljs-comment">// 7天</span><br>            .path(<span class="hljs-string">&quot;/&quot;</span>)<br>            .httpOnly(<span class="hljs-literal">true</span>)<br>            .secure(<span class="hljs-literal">true</span>)<br>            .build();<br>    response.addHeader(HttpHeaders.SET_COOKIE, cookie.toString());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在拦截器内进行验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 生成CSRF以防止跨站请求伪造</span><br>Cookie[] cookies = request.getCookies();<br><span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>    <span class="hljs-keyword">if</span> (cookie.getName().equals(<span class="hljs-string">&quot;XSRF-TOKEN&quot;</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (cookie.getValue() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 获取 session</span><br>            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>); <span class="hljs-comment">// false 表示如果会话不存在则返回 null</span><br>            <span class="hljs-keyword">if</span> (session != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">csrf</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;XSRF-TOKEN&quot;</span>);<br>                <span class="hljs-keyword">if</span> (csrf == <span class="hljs-literal">null</span> || csrf.isEmpty()) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;csrf为空&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br><br>                <span class="hljs-comment">// 执行 CSRF 验证 &gt;&gt; 将cookie内的值加密后与session中的值比对</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">csrfValid</span> <span class="hljs-operator">=</span> PasswordUtil.checkPassword(cookie.getValue(), csrf);<br>                System.out.println(<span class="hljs-string">&quot;验证CSRF!&quot;</span>);<br>                <span class="hljs-keyword">if</span> (!csrfValid) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Session 不存在&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞解决</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cookie</tag>
      
      <tag>CSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Console的N种用法</title>
    <link href="/2024/11/06/%E5%89%8D%E7%AB%AFconsole%E7%94%A8%E6%B3%95/"/>
    <url>/2024/11/06/%E5%89%8D%E7%AB%AFconsole%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Console的N种用法">Console的N种用法</h2><h3 id="打印调试信息">打印调试信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="打印消息">打印消息</h3><h4 id="普通消息">普通消息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="信息">信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="表格">表格</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>([<br>    &#123;<br>        <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>,<br>        <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Tom&#x27;</span><br>    &#125;,<br>&#123;<br>        <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Alixia&#x27;</span>,<br>        <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Jerry&#x27;</span>,<br>        <span class="hljs-attr">info</span>: <span class="hljs-string">&#x27;123243&#x27;</span><br>        <br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Alia&#x27;</span>,<br>        <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Peter&#x27;</span><br>    &#125;<br>]);<br></code></pre></td></tr></table></figure><h4 id="分组">分组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> label = <span class="hljs-string">&#x27;分组名称&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(label); # 默认分组是展开的<br># <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupCollapsed</span>(label);  # 这个可以让分组不展开<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>(label);<br></code></pre></td></tr></table></figure><h4 id="对象结构">对象结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br></code></pre></td></tr></table></figure><h4 id="计时">计时</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;loop&#x27;</span>);<br><span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - start &lt; <span class="hljs-number">2000</span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;loop&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="计数">计数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br><span class="hljs-keyword">while</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - start &lt; <span class="hljs-number">20</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;loop&#x27;</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">countReset</span>(<span class="hljs-string">&#x27;loop&#x27;</span>); <span class="hljs-comment">// 计数清零</span><br></code></pre></td></tr></table></figure><h4 id="堆栈">堆栈</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">trace</span>();<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">b</span>();<br>&#125;<br><span class="hljs-title function_">a</span>();<br></code></pre></td></tr></table></figure><h4 id="断言-成功不显示信息，失败才显示">断言 (成功不显示信息，失败才显示)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">assert</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) === <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h3 id="打印警告">打印警告</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="打印错误">打印错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="清空消息">清空消息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>(); # 清空消息<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="给消息添加样式">给消息添加样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> styles = <span class="hljs-string">`</span><br><span class="hljs-string">padding: 5px;</span><br><span class="hljs-string">background-color: #90442E;</span><br><span class="hljs-string">color: white;</span><br><span class="hljs-string">font-style: italic;</span><br><span class="hljs-string">border: 5px solid #E06E3C;</span><br><span class="hljs-string">font-size: 2em;`</span>;<br># 消息前加%c后面加样式变量<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%c Hello World!&#x27;</span>,styles);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用正则表达式</title>
    <link href="/2024/11/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/11/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式">正则表达式</h2><h3 id="常用表达式">常用表达式</h3><h4 id="手机号匹配">手机号匹配</h4><p>主要是开头，若运营商新增号段则可能不支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^(<span class="hljs-number">13</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">14</span>[01456879]|<span class="hljs-number">15</span>[<span class="hljs-number">0</span>-<span class="hljs-number">35</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">16</span>[<span class="hljs-number">2567</span>]|<span class="hljs-number">17</span>[<span class="hljs-number">0</span>-<span class="hljs-number">8</span>]|<span class="hljs-number">18</span>[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]|<span class="hljs-number">19</span>[<span class="hljs-number">0</span>-<span class="hljs-number">35</span>-<span class="hljs-number">9</span>])\d&#123;<span class="hljs-number">8</span>&#125;$/<br></code></pre></td></tr></table></figure><h4 id="姓名匹配">姓名匹配</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^[\u4e00-\u9fa5]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;$/    <span class="hljs-comment">//2-4个中文字符正则</span><br></code></pre></td></tr></table></figure><h4 id="座机号码">座机号码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^(<span class="hljs-number">0</span>\d&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;)-?(\d&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;)$/<br></code></pre></td></tr></table></figure><h4 id="电子邮箱">电子邮箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/<br></code></pre></td></tr></table></figure><h4 id="身份证校验">身份证校验</h4><p>普通校验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/(^\d&#123;<span class="hljs-number">15</span>&#125;$)|(^\d&#123;<span class="hljs-number">18</span>&#125;$)|(^\d&#123;<span class="hljs-number">17</span>&#125;(\d|X|x)$)/<br></code></pre></td></tr></table></figure><p>精准校验</p><p>18位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d&#123;<span class="hljs-number">5</span>&#125;(<span class="hljs-number">19</span>|<span class="hljs-number">20</span>)\d&#123;<span class="hljs-number">2</span>&#125;((<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])|(<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>]))(([<span class="hljs-number">0</span>-<span class="hljs-number">2</span>][<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])|<span class="hljs-number">10</span>|<span class="hljs-number">20</span>|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)\d&#123;<span class="hljs-number">3</span>&#125;[<span class="hljs-number">0</span>-9Xx]$/<br></code></pre></td></tr></table></figure><p>15位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>]\d&#123;<span class="hljs-number">5</span>&#125;\d&#123;<span class="hljs-number">2</span>&#125;((<span class="hljs-number">0</span>[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])|(<span class="hljs-number">1</span>[<span class="hljs-number">0</span>-<span class="hljs-number">2</span>]))(([<span class="hljs-number">0</span>-<span class="hljs-number">2</span>][<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])|<span class="hljs-number">10</span>|<span class="hljs-number">20</span>|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)\d&#123;<span class="hljs-number">2</span>&#125;[<span class="hljs-number">0</span>-9Xx]$/<br></code></pre></td></tr></table></figure><p>后6位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/^(([<span class="hljs-number">0</span>-<span class="hljs-number">2</span>][<span class="hljs-number">1</span>-<span class="hljs-number">9</span>])|<span class="hljs-number">10</span>|<span class="hljs-number">20</span>|<span class="hljs-number">30</span>|<span class="hljs-number">31</span>)\d&#123;<span class="hljs-number">3</span>&#125;[<span class="hljs-number">0</span>-9Xx]$/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Kafka</title>
    <link href="/2024/11/01/Kafka/"/>
    <url>/2024/11/01/Kafka/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Kafka示例"><code>Spring-Kafka</code>示例</h2><h3 id="Maven依赖">Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- kafka --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-kafka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span>                    <span class="hljs-comment"># Kafka 服务器配置</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">localhost:9090</span>                    <span class="hljs-comment"># Kafka 服务器集群1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">localhost:9091</span>                    <span class="hljs-comment"># Kafka 服务器集群2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">localhost:9092</span>                    <span class="hljs-comment"># Kafka 服务器集群3</span><br>    <span class="hljs-comment"># Kafka 消费者配置</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">localhost:9092</span>                 <span class="hljs-comment"># Kafka 服务器地址</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">apple</span>                                <span class="hljs-comment"># 消费者组 ID</span><br>      <span class="hljs-attr">auto-offset-reset:</span> <span class="hljs-string">earliest</span>                       <span class="hljs-comment"># 消费者偏移量重置策略（&quot;earliest&quot;, &quot;latest&quot;, &quot;none&quot;）</span><br>      <span class="hljs-attr">enable-auto-commit:</span> <span class="hljs-literal">true</span>                          <span class="hljs-comment"># 是否自动提交偏移量</span><br>      <span class="hljs-attr">auto-commit-interval:</span> <span class="hljs-number">1000</span>                        <span class="hljs-comment"># 自动提交偏移量的间隔时间（毫秒）</span><br>      <span class="hljs-attr">key-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span>  <span class="hljs-comment"># 键反序列化类</span><br>      <span class="hljs-attr">value-deserializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringDeserializer</span>  <span class="hljs-comment"># 值反序列化类</span><br>      <span class="hljs-attr">max-poll-records:</span> <span class="hljs-number">500</span>         <span class="hljs-comment"># 每次调用 poll() 方法返回的最大记录数</span><br>      <span class="hljs-attr">properties:</span><br>        <span class="hljs-attr">session-timeout-ms:</span> <span class="hljs-number">15000</span>     <span class="hljs-comment"># 会话超时时间</span><br>    <span class="hljs-attr">admin:</span><br>      <span class="hljs-attr">client-id:</span> <span class="hljs-number">1</span>                        <span class="hljs-comment"># 客户端 ID，用于标识客户端应用程序</span><br>    <span class="hljs-comment"># Kafka 生产者配置</span><br>    <span class="hljs-attr">producer:</span><br>      <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">localhost:9092</span>   <span class="hljs-comment"># Kafka 服务器地址</span><br>      <span class="hljs-attr">key-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span>  <span class="hljs-comment"># 键序列化类</span><br>      <span class="hljs-attr">value-serializer:</span> <span class="hljs-string">org.apache.kafka.common.serialization.StringSerializer</span> <span class="hljs-comment"># 值序列化类</span><br>      <span class="hljs-attr">acks:</span> <span class="hljs-string">all</span>                 <span class="hljs-comment"># 确认模式（&quot;all&quot;, &quot;1&quot;, &quot;0&quot; 等）</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span>                <span class="hljs-comment"># 失败时的重试次数</span><br>      <span class="hljs-attr">batch-size:</span> <span class="hljs-number">16384</span>         <span class="hljs-comment"># 批量发送的消息大小</span><br>      <span class="hljs-attr">buffer-memory:</span> <span class="hljs-number">33554432</span>   <span class="hljs-comment"># 缓存的内存大小</span><br>      <span class="hljs-attr">properties:</span><br>        <span class="hljs-attr">linger-ms:</span> <span class="hljs-number">1</span>            <span class="hljs-comment"># 批量发送的延迟时间</span><br></code></pre></td></tr></table></figure><h3 id="配置类-可选">配置类(可选)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.config;<br><br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;<br><span class="hljs-keyword">import</span> org.apache.kafka.common.serialization.StringSerializer;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.EnableKafka;<br><span class="hljs-keyword">import</span> org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.*;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableKafka</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ProducerFactory&lt;String, String&gt; <span class="hljs-title function_">producerFactory</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; configProps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;localhost:9092&quot;</span>);<br>        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);<br>        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultKafkaProducerFactory</span>&lt;&gt;(configProps);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KafkaTemplate&lt;String, String&gt; <span class="hljs-title function_">kafkaTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaTemplate</span>&lt;&gt;(producerFactory());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConsumerFactory&lt;String, String&gt; <span class="hljs-title function_">consumerFactory</span><span class="hljs-params">()</span> &#123;<br>        Map&lt;String, Object&gt; props = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="hljs-string">&quot;localhost:9092&quot;</span>);<br>        props.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="hljs-string">&quot;group_id&quot;</span>);<br>        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);<br>        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultKafkaConsumerFactory</span>&lt;&gt;(props);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="hljs-title function_">kafkaListenerContainerFactory</span><span class="hljs-params">()</span> &#123;<br>        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentKafkaListenerContainerFactory</span>&lt;&gt;();<br>        factory.setConsumerFactory(consumerFactory());<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="生产者">生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaProducer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaProducer</span><span class="hljs-params">(KafkaTemplate&lt;String, String&gt; kafkaTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.kafkaTemplate = kafkaTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String topic, String message)</span> &#123;<br>        kafkaTemplate.send(topic, message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="消费者">消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.kafka.annotation.KafkaListener;<br><span class="hljs-keyword">import</span> org.springframework.kafka.support.KafkaHeaders;<br><span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.Header;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaConsumer</span> &#123;<br><br>    <span class="hljs-meta">@KafkaListener(topics = &quot;topic&quot;, groupId = &quot;apple&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(String message, <span class="hljs-meta">@Header(KafkaHeaders.RECEIVED_TOPIC)</span>String topic)</span> &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;Received Topic: &quot;</span> + topic);<br>        System.out.println(<span class="hljs-string">&quot;Received Message: &quot;</span> + message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="控制器">控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.controller;<br><br><span class="hljs-keyword">import</span> com.example.utils.KafkaProducer;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.kafka.core.KafkaTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/kafka&quot;)</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> KafkaProducer kafkaProducer;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/producer&quot;,produces = &quot;application/json&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">producer</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String message)</span>&#123;<br>        kafkaProducer.sendMessage(<span class="hljs-string">&quot;topic&quot;</span>,message);<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="运行">运行</h3><p>启动<code>Zookeeper</code>，然后启动<code>Kafka</code>，最后启动项目。</p><h3 id="Postman测试"><code>Postman</code>测试</h3><p>请求类型：POST</p><p>请求地址：localhost/kafka/producer</p><p>请求体内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>控制台输出打印信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Received Topic: topic<br>Received Message: &#123;<br>    &quot;message&quot;: &quot;Hello World&quot;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>示例程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CSP】内容安全策略违规报告接口示例</title>
    <link href="/2024/10/31/CSP%E8%BF%9D%E8%A7%84%E6%8A%A5%E5%91%8A%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B/"/>
    <url>/2024/10/31/CSP%E8%BF%9D%E8%A7%84%E6%8A%A5%E5%91%8A%E6%8E%A5%E5%8F%A3%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="CSP违规报告接口示例"><code>CSP</code>违规报告接口示例</h2><h3 id="Maven依赖">Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- json解析 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.51<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--  官方地址：https://hutool.cn/  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mysql驱动依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="前端">前端</h3><p>（可以在服务器端设置此请求头）而不是<code>&lt;meta&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; report-uri /csp-violation-report-endpoint<br></code></pre></td></tr></table></figure><p>例如<code>Spring</code>后端项目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping()</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>    <span class="hljs-comment">// 设置CSP头</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Security-Policy&quot;</span>, <span class="hljs-string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; report-uri /csp-violation-report-endpoint&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后端接收模型">后端接收模型</h3><p><code>CspViolationReportWrapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 接收CSP请求携带的参数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> CspViolationReportWrapper</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CspViolationReportWrapper</span> &#123;<br><br>    <span class="hljs-meta">@JsonProperty(&quot;csp-report&quot;)</span><br>    <span class="hljs-keyword">private</span> CspViolationReport cspReport;<br><br>    <span class="hljs-keyword">public</span> CspViolationReport <span class="hljs-title function_">getCspReport</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cspReport;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCspReport</span><span class="hljs-params">(CspViolationReport cspReport)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cspReport = cspReport;<br>    &#125;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CspViolationReport</span> &#123;<br>        <span class="hljs-keyword">private</span> String referrer;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;status-code&quot;)</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> statusCode;<br><br>        <span class="hljs-keyword">private</span> String disposition;<br>        <span class="hljs-keyword">private</span> String scriptSample;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;violated-directive&quot;)</span><br>        <span class="hljs-keyword">private</span> String violatedDirective;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;original-policy&quot;)</span><br>        <span class="hljs-keyword">private</span> String originalPolicy;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;source-file&quot;)</span><br>        <span class="hljs-keyword">private</span> String sourceFile;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;document-uri&quot;)</span><br>        <span class="hljs-keyword">private</span> String documentUri;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;line-number&quot;)</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> lineNumber;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;effective-directive&quot;)</span><br>        <span class="hljs-keyword">private</span> String effectiveDirective;<br><br>        <span class="hljs-meta">@JsonProperty(&quot;blocked-uri&quot;)</span><br>        <span class="hljs-keyword">private</span> String blockedUri;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实体类">实体类</h3><p><code>CspViolationReport.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 内容安全策略违规报告模型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CspViolationReport</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 唯一标识。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 违规发生的文档URI。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String documentUri;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送请求的来源。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String referrer;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 触发违规的CSP指令。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String violatedDirective;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前生效的CSP指令。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String effectiveDirective;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 引发违规的资源文件。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String sourceFile;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  违规发生的行号。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> lineNumber;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 违规发生的列号。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> columnNumber;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 违规请求的HTTP状态码。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String statusCode;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Long timestamp;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="转换器">转换器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.msrl.zhibo.thirdparty.demo;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpInputMessage;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpOutputMessage;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CspReportMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CspReportMessageConverter</span><span class="hljs-params">(ObjectMapper objectMapper)</span> &#123;<br>        <span class="hljs-built_in">super</span>(objectMapper);<br>        <span class="hljs-comment">// 这里可以添加自定义的媒体类型</span><br>        setSupportedMediaTypes(Collections.singletonList(MediaType.valueOf(<span class="hljs-string">&quot;application/csp-report&quot;</span>)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="配置类">配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">// 添加转换器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CspReportMessageConverter cspReportMessageConverter;<br><br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        converters.add(cspReportMessageConverter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="控制层">控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.bean.BeanUtil;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 内容安全策略违规报告接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/csp-violation-report-endpoint&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CspReportController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(consumes = &quot;application/csp-report&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">receiveCspReport</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CspViolationReportWrapper cspViolationReportWrapper)</span> &#123;<br><br>        CspViolationReportWrapper.<span class="hljs-type">CspViolationReport</span> <span class="hljs-variable">cspReport</span> <span class="hljs-operator">=</span> cspViolationReportWrapper.getCspReport();<br>        <span class="hljs-type">CspViolationReport</span> <span class="hljs-variable">cspViolationReport</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(cspReport, CspViolationReport.class);<br><br>        cspViolationReport.setTimestamp(System.currentTimeMillis());<br>        <span class="hljs-comment">// 处理CSP违规报告，例如保存到数据库、记录日志等</span><br>        System.out.println(<span class="hljs-string">&quot;CSP Violation Report: &quot;</span> + cspViolationReport);<br>        <br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 将报告存储到数据库</span><br><br>        <span class="hljs-comment">// 返回204 No Content表示接收成功</span><br>        <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jwt工具类</title>
    <link href="/2024/10/30/Jwt%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/10/30/Jwt%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="Jwt工具类"><code>Jwt</code>工具类</h2><h3 id="Maven依赖">Maven依赖</h3><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--  jwt令牌依赖  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 阿里json框架 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jwt:</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">key</span><br>  <span class="hljs-attr">issuer:</span> <span class="hljs-string">签发者</span><br>  <span class="hljs-attr">expiration:</span> <span class="hljs-number">3600000</span>  <span class="hljs-comment"># 1 hour in milliseconds</span><br>  <span class="hljs-attr">aud:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Dark</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Black</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Purple</span><br>  <span class="hljs-attr">start-date:</span> <span class="hljs-number">2024-10-30 12:11:00</span><br></code></pre></td></tr></table></figure><h3 id="工具类">工具类</h3><p><code>JwtTokenUtil.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.*;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * [Json Web Token]工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 用于Token的生成和验证</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jwt&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;<br>    <br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jwt密钥生成模式 &gt;&gt; 动态生成和静态自定义</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">private</span> SecretType secret_mode;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jwt密钥 &gt;&gt; 生成token时将使用此密钥进行加密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;secret&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jwt签发者 &gt;&gt; 用于说明签发此token的所有者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">issuer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1号签发者&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jwt到期时间【单位毫秒】 &gt;&gt; 当超过此段时间，jwt令牌将因过期而无法使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-number">86400000</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jwt预期接收者 &gt;&gt; 用于确保 Token 只被特定的服务或系统接受，从而增强安全性。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; aud = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;接收者1&quot;</span>, <span class="hljs-string">&quot;接收者2&quot;</span>, <span class="hljs-string">&quot;接收者3&quot;</span>));<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * jwt生效时间 &gt;&gt; 只有在此时间后，jwt所生成的token才可用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-meta">@Setter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">startDate</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2000-01-01 00:00:00&quot;</span>;<br><br><br>    <span class="hljs-keyword">final</span> Set&lt;String&gt; jtiSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌到期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的到期时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">extractExpiration</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getExpiration);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌签发时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt签发时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">extractIssuedAt</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getIssuedAt);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌主题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 主题一般表示用户 ID 或用户名。这里我们选择存储用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌主题</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractSubject</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getSubject);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌接收者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌接收者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractAudience</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getAudience);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌生效时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌生效时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">extractNotBefore</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getNotBefore);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌签发者</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌签发者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractIssuer</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getIssuer);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractId</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getId);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌载荷</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> claimsResolver 载荷解析器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌载荷信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">extractClaim</span><span class="hljs-params">(String token, Function&lt;Claims, T&gt; claimsResolver)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> extractAllClaims(token);<br>        <span class="hljs-keyword">return</span> claimsResolver.apply(claims);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出jwt令牌所有载荷信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回解析出的jwt令牌所有载荷信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Claims <span class="hljs-title function_">extractAllClaims</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; <span class="hljs-title function_">extractHeader</span><span class="hljs-params">(String token)</span> &#123;<br>        String[] parts = token.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>        <span class="hljs-keyword">if</span> (parts.length != <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;JWT token格式不正确&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 解码头部部分</span><br>        <span class="hljs-type">byte</span>[] headerBytes = java.util.Base64.getUrlDecoder().decode(parts[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">return</span> (Map&lt;String, String&gt;) JSON.parse(headerBytes);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证token是否到期，到期true,否则false</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户的令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回到期true,否则false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">isTokenExpired</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractExpiration(token).before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回生成的token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-comment">// jwt 有效载荷</span><br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// sub 主题，一般表示用户 ID 或用户名。</span><br>        claims.put(<span class="hljs-string">&quot;sub&quot;</span>, username);<br>        <span class="hljs-comment">// aud 预期接收者 &gt;&gt;&gt; 用于确保 Token 只被特定的服务或系统接受，从而增强安全性。</span><br>        claims.put(<span class="hljs-string">&quot;aud&quot;</span>, aud.get(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 接收</span><br><br>        <span class="hljs-comment">// iss 签发者，表示谁生成了这个 Token。</span><br>        claims.put(<span class="hljs-string">&quot;iss&quot;</span>, issuer);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jti</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// jwt唯一标识</span><br>        claims.put(<span class="hljs-string">&quot;jti&quot;</span>, jti);<br>        <span class="hljs-comment">// 将生成的id加入set集合 <span class="hljs-doctag">NOTE:</span>这里是需要存放jwtId的,这里我为了方便放set集合里了，正常请更换存储位置，例如存到redis缓存或者其他数据库中</span><br>        jtiSet.add(jti);<br><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//sdf.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;));</span><br>        Date createdDate;<br>        <span class="hljs-keyword">try</span> &#123;<br>            createdDate = sdf.parse(startDate);<br><br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        <span class="hljs-comment">// 定义jwt生效时间.  &gt;&gt;&gt;  JWT 中的 nbf 需要 秒级时间戳，所以需要除以 1000</span><br>        claims.put(<span class="hljs-string">&quot;nbf&quot;</span>, createdDate.getTime()/<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">return</span> createToken(claims, username);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> claims 载荷信息，包含很多东西</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject 主题，这里是用户名(因为我存的是用户名，就是根据用户名来生成的token)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回生成的token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(Map&lt;String, Object&gt; claims, String subject)</span> &#123;<br>        Map&lt;String, Object&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// 常见头部配置【默认】</span><br>        headers.put(<span class="hljs-string">&quot;typ&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>); <span class="hljs-comment">// 类型jwt</span><br>        headers.put(<span class="hljs-string">&quot;alg&quot;</span>, <span class="hljs-string">&quot;HS256&quot;</span>); <span class="hljs-comment">// 加密算法 HS256</span><br>        <span class="hljs-comment">// 也可以自定义其他信息加入头部信息 TODO...</span><br><br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setHeader(headers)      <span class="hljs-comment">// 头部信息</span><br>                .setClaims(claims)       <span class="hljs-comment">// 有效载荷</span><br>                .setSubject(subject)     <span class="hljs-comment">// 主题，我们这里存了用户名</span><br>                .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) <span class="hljs-comment">// jwt签发时间</span><br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>                .signWith(SignatureAlgorithm.HS256, secret)<br>                .compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 【不推荐使用】验证token有效性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> 这里只是验证用户名和令牌是否到期【验证不完整】,请改用 &#123;<span class="hljs-doctag">@link</span> #validateTokenEnhance(String, String)&#125; ()&#125;。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true则有效，否则无效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">validateToken</span><span class="hljs-params">(String token, String name)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> extractSubject(token);<br>        <span class="hljs-keyword">return</span> (username.equals(name) &amp;&amp; !isTokenExpired(token));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证token有效性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtTokenUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.utils</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 用户令牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true则有效，否则无效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">validateTokenEnhance</span><span class="hljs-params">(String token, String name)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> extractSubject(token);<br>            <span class="hljs-keyword">if</span> (!username.equals(name) || isTokenExpired(token))&#123;<br>                <span class="hljs-comment">// 若用户名不匹配或者令牌已到期</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!extractIssuer(token).equals(issuer))&#123;<br>                <span class="hljs-comment">// 若签发者不匹配</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!extractIssuedAt(token).before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())||!extractIssuedAt(token).after(extractNotBefore(token)))&#123;<br>                <span class="hljs-comment">// 若签发时间不在指定区间</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!aud.contains(extractAudience(token)))&#123;<br>                <span class="hljs-comment">// 若预期接收对象列表中找不到此接收对象</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 若jwt的id不存在，则无效 // <span class="hljs-doctag">NOTE:</span> 验证id是否存在已生成的名单中</span><br>                <span class="hljs-keyword">return</span> jtiSet.contains(extractId(token));<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 解析异常信息</span><br>            <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> PrematureJwtException) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> e.getMessage();<br><br>                <span class="hljs-comment">// 使用正则表达式提取毫秒差值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a difference of (\\d+) milliseconds&quot;</span>;<br>                java.util.regex.<span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> java.util.regex.Pattern.compile(regex);<br>                java.util.regex.<span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(message);<br><br>                <span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">millisecondsString</span> <span class="hljs-operator">=</span> matcher.group(<span class="hljs-number">1</span>);<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">millisecondsDifference</span> <span class="hljs-operator">=</span> Long.parseLong(millisecondsString);<br>                    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>);<br>                    sdf.setTimeZone(TimeZone.getTimeZone(<span class="hljs-string">&quot;UTC&quot;</span>));<br>                    System.out.println(<span class="hljs-string">&quot;令牌未到生效时间！距离生效时间剩余：&quot;</span>);<br>                    System.out.println(sdf.format(millisecondsDifference));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    System.out.println(<span class="hljs-string">&quot;在异常信息中未找到相差的毫秒数&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;发生了一个jwt预期外的错误: &quot;</span> + e.getMessage());<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(ApplicationReadyEvent applicationReadyEvent)</span> &#123;<br>        <span class="hljs-comment">// 在应用启动完成后生成新的密钥</span><br>        generateNewJwtSecretKey();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自动生成jwt密钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/11/8</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> JwtUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.msrl.zhibo.utils</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateNewJwtSecretKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 若生成密钥的模式为自定义，则取消每次启动项目时自动生成</span><br>        <span class="hljs-keyword">if</span> (secret_mode.getValue()==<span class="hljs-number">1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;jwt密钥策略：静态自定义(CUSTOM)&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;jwt当前密钥：&quot;</span>+SECRET);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 生成一个随机的密钥</span><br>        <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">secureRandom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br>        <span class="hljs-type">byte</span>[] secretKeyBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">32</span>];  <span class="hljs-comment">// 256-bit key</span><br>        secureRandom.nextBytes(secretKeyBytes);<br><br>        <span class="hljs-comment">// 将密钥转为Base64编码</span><br>        SECRET = Base64.getEncoder().encodeToString(secretKeyBytes);<br><br>        System.out.println(<span class="hljs-string">&quot;jwt密钥策略：\u001B[34;1m动态生成(AUTO)\u001B[0m&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;jwt当前密钥：\u001B[34;1m&quot;</span>+SECRET+<span class="hljs-string">&quot;\u001B[0m&quot;</span>);<br><br>        <span class="hljs-comment">// 你可以选择将这个密钥存储在数据库或外部配置管理系统中</span><br>    &#125;<br><br>    <span class="hljs-comment">// 可以提供一个获取JWT密钥的方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJwtSecretKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SECRET;<br>    &#125;<br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SecretType</span>&#123;<br>        AUTO(<span class="hljs-number">0</span>),<br>        CUSTOM(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br><br>        SecretType(<span class="hljs-type">int</span> value) &#123;<br>            <span class="hljs-built_in">this</span>.value = value;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 主测试程序入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">JwtTokenUtil</span> <span class="hljs-variable">jwtTokenUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenUtil</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtTokenUtil.generateToken(<span class="hljs-string">&quot;admin&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;生成的Token:\n&quot;</span>+token);<br><br>        Map&lt;String,String&gt; map = jwtTokenUtil.extractHeader(token);<br>        System.out.println(<span class="hljs-string">&quot;请求头消息：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;类型:&quot;</span>+map.get(<span class="hljs-string">&quot;typ&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;签名算法:&quot;</span>+map.get(<span class="hljs-string">&quot;alg&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;######################&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jti</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractId(token);<br>        System.out.println(<span class="hljs-string">&quot;导出jwt唯一id:&quot;</span>+jti);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractSubject(token);<br>        System.out.println(<span class="hljs-string">&quot;导出用户名:&quot;</span>+username);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractNotBefore(token);<br>        System.out.println(<span class="hljs-string">&quot;导出令牌生效时间:&quot;</span>+sdf.format(date2));<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractExpiration(token);<br>        System.out.println(<span class="hljs-string">&quot;导出令牌到期时间:&quot;</span>+sdf.format(date));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractAudience(token);<br>        System.out.println(<span class="hljs-string">&quot;导出接收者:&quot;</span>+s);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">issuer</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractIssuer(token);<br>        System.out.println(<span class="hljs-string">&quot;导出签发者:&quot;</span>+issuer);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractIssuedAt(token);<br>        System.out.println(<span class="hljs-string">&quot;导出签发时间:&quot;</span>+sdf.format(date1));<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">tokenExpired</span> <span class="hljs-operator">=</span> jwtTokenUtil.isTokenExpired(token);<br>        System.out.println(<span class="hljs-string">&quot;jwt是否过期:&quot;</span>+tokenExpired);<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> jwtTokenUtil.validateTokenEnhance(token, <span class="hljs-string">&quot;admin&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;令牌验证:&quot;</span>+flag);<br>        System.out.println(<span class="hljs-string">&quot;/////////////////////////////////////&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token1</span> <span class="hljs-operator">=</span> jwtTokenUtil.generateToken(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;生成的Token:\n&quot;</span>+token1);<br>        Map&lt;String,String&gt; map1 = jwtTokenUtil.extractHeader(token1);<br>        System.out.println(<span class="hljs-string">&quot;请求头消息：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;类型:&quot;</span>+map1.get(<span class="hljs-string">&quot;typ&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;签名算法:&quot;</span>+map1.get(<span class="hljs-string">&quot;alg&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;######################&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jti1</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractId(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出jwt唯一id:&quot;</span>+jti1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username1</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractSubject(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出用户名:&quot;</span>+username1);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date22</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractNotBefore(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出令牌生效时间:&quot;</span>+sdf.format(date22));<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date3</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractExpiration(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出令牌到期时间:&quot;</span>+sdf.format(date3));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractAudience(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出接收者:&quot;</span>+s3);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">issuer3</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractIssuer(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出签发者:&quot;</span>+issuer3);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date13</span> <span class="hljs-operator">=</span> jwtTokenUtil.extractIssuedAt(token1);<br>        System.out.println(<span class="hljs-string">&quot;导出签发时间:&quot;</span>+sdf.format(date13));<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">tokenExpired3</span> <span class="hljs-operator">=</span> jwtTokenUtil.isTokenExpired(token1);<br>        System.out.println(<span class="hljs-string">&quot;jwt是否过期:&quot;</span>+tokenExpired3);<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag3</span> <span class="hljs-operator">=</span> jwtTokenUtil.validateTokenEnhance(token1, <span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;令牌验证:&quot;</span>+flag3);<br>        System.out.println(<span class="hljs-string">&quot;/////////////////////////////////////&quot;</span>);<br>        System.out.println(jwtTokenUtil.jtiSet);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站集成微信分享功能</title>
    <link href="/2024/10/26/%E7%BD%91%E7%AB%99%E9%9B%86%E6%88%90%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/"/>
    <url>/2024/10/26/%E7%BD%91%E7%AB%99%E9%9B%86%E6%88%90%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="网站集成微信分享功能">网站集成微信分享功能</h2><blockquote><p>说明：文章具有时效性，若您此刻的时间距离文章发布时间过长，无法保证此文章依旧有效，请自行斟酌。本文写于<code>2024/10/26</code></p></blockquote><h3 id="序言">序言</h3><p><strong>写在前面的话</strong>：</p><p>要想实现在微信分享出去的链接携带有<strong>网站图标</strong>，<strong>网站标题</strong>和<strong>网站描述</strong>。只能按照<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/iOS_WKWebview.html"><strong>微信官方文档</strong></a>中的要求，使用微信<code>js</code>文件的<code>SDK</code>。</p><p>这种必须是在微信中用<strong>微信自带的浏览器</strong>打开的网页下才能生效。**而且不能是直接复制链接发送给好友然后点开网站的方式进去，这种状态下即便进去，分享网站后，出来的内容也只有一条网址而已。对于已经生成带有图标标题和描述的分享卡片，这种类型的链接点进去打开网站是可以正常分享出这种效果的。**普通网站想分享还是应该采用二维码展示的方式。</p><p>如果你的网站要适配移动端，希望在微信打开后方便分享给其他微信用户或者朋友圈，那我这篇文章将会有所帮助。</p><h3 id="准备">准备</h3><h4 id="一、微信服务号">一、微信服务号</h4><p>首先，要实现这种类似的功能需要一个企业认证的微信服务号，而且认证必须在有效期内。若只是个人测试学习，可以申请使用<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login&amp;token=1061624296&amp;lang=zh_CN"><strong>公众平台测试号</strong></a>。测试号拥有全部功能，会生成一个虚拟的微信公众号，需要关注这个号，才能正常使用。</p><h4 id="二、服务器">二、服务器</h4><p>一台拥有公网<code>IP</code>的服务器。**因为微信公众平台需要测试你要引入此功能的项目地址是可用的。**若是个人测试，为了尽量节省开销，可以考虑开通个按量付费的服务器，<strong>选择停机不收费</strong>，用的时候打开，不用的时候关掉就好了，只不过每次启用公网<code>IP</code>地址都会变。按自己需求来吧，这里不再赘述。</p><h3 id="配置">配置</h3><p>测试号与微信服务号信息位置对照表</p><table><thead><tr><th style="text-align:center">测试号</th><th style="text-align:center">服务号</th></tr></thead><tbody><tr><td style="text-align:center">测试号信息</td><td style="text-align:center">设置与开发 &gt; 开发接口管理 &gt; 基本配置 &gt; 公众号开发信息</td></tr><tr><td style="text-align:center">接口配置信息</td><td style="text-align:center">设置与开发 &gt; 开发接口管理 &gt; 基本配置 &gt; 服务器配置</td></tr><tr><td style="text-align:center"><code>JS</code>接口安全域名</td><td style="text-align:center">设置与开发 &gt; 公众号设置 &gt; 功能设置 &gt; <code>JS</code>接口安全域名</td></tr></tbody></table><h4 id="微信服务器接口配置">微信服务器接口配置</h4><p>这里需要你的项目中开放一个供微信请求的接口，微信通过成功调用这个接口来判断你的项目是否可用。</p><p>注：由于测试号无法指定令牌加密方式，所以接下来就以<strong>明文模式</strong>来展示后端接口的示例。</p><p>其他加密模式请参阅<a href="https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Message_encryption_and_decryption_instructions.html"><strong>官方文档</strong></a>自行实现。当然你不验证<code>token</code>直接返回<code>echostr</code>，也能直接验证成功！成功后，即便再次启动项目，接口配置信息也无需再次配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此接口用于给微信验证服务器是否可用【微信接口配置信息 &gt;&gt;&gt; 验证消息的确来自微信服务器】</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> signature 签名，微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timestamp 时间戳</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> nonce 随机数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> echostr 随机字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 原样返回微信请求携带的随机字符串,即可通过微信的服务器验证</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%AA%8C%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E7%A1%AE%E6%9D%A5%E8%87%AA%E5%BE%AE%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8&quot;&gt;验证消息的确来自微信服务器&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/wxCheck&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">wxCheck</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;signature&quot;)</span></span><br><span class="hljs-params">        String signature,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;timestamp&quot;)</span></span><br><span class="hljs-params">        String timestamp,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;nonce&quot;)</span></span><br><span class="hljs-params">        String nonce,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;echostr&quot;)</span></span><br><span class="hljs-params">        String echostr</span><br><span class="hljs-params">)</span>&#123;<br>    <span class="hljs-comment">// 验证消息是否来自微信服务器</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;myWXToken&quot;</span>;<br>    String[] arr = &#123;token, timestamp, nonce&#125;;<br><br>    <span class="hljs-comment">// 按字典序排序</span><br>    Arrays.sort(arr);<br><br>    <span class="hljs-comment">// 使用StringBuilder进行拼接</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (String s : arr) &#123;<br>        result.append(s);<br>    &#125;<br>    <span class="hljs-comment">// 将字符串加密</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> SHA1(String.valueOf(result));<br><span class="hljs-comment">// 将加密后的密文与签名匹配，失败则说明项目内的token与服务器配置的token不一致！</span><br>    <span class="hljs-keyword">if</span> (!s.equals(signature)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Token值匹配失败！&quot;</span>);<br>        <span class="hljs-comment">// 返回给微信空值，说明验证不通过</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;Token值匹配成功！&quot;</span>);<br>    <span class="hljs-comment">// 将请求携带的参数加入Map集合</span><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;signature&quot;</span>,signature);<br>    map.put(<span class="hljs-string">&quot;timestamp&quot;</span>,timestamp);<br>    map.put(<span class="hljs-string">&quot;nonce&quot;</span>,nonce);<br>    map.put(<span class="hljs-string">&quot;echostr&quot;</span>,echostr);<br>    <span class="hljs-comment">// 打印Map集合查看微信的消息</span><br>    System.out.println(<span class="hljs-string">&quot;来自微信的消息：&quot;</span>+map);<br>    <span class="hljs-comment">// 返回给微信自己传来的随机字符串，则验证通过</span><br>    <span class="hljs-keyword">return</span> echostr;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：需要先启动项目，再配置接口，因为确定配置接口时，微信会请求我们填写的请求接口。当成功返回微信本身请求携带的随机字符串给他后，验证成功！</p><h4 id="JS接口安全域名"><code>JS</code>接口安全域名</h4><p>这里配置服务器地址或绑定服务器的已备案的域名。</p><p>这里测试号与服务号有些区别：</p><h5 id="服务号的官方提示信息：">服务号的官方提示信息：</h5><blockquote><p>设置<code>JS</code>接口安全域名后，公众号开发者可在该域名下调用微信开放的<code>JS</code>接口。</p><p>注意事项：</p><p>1、可填写五个域名或路径（例：<code>wx.qq.com</code>或<code>wx.qq.com/mp</code>），需使用由字母、数字、“-”或中文组成的合法域名，不支持<code>IP</code>地址、端口号及短链域名。</p><p>2、填写的域名须通过<code>ICP</code>备案的验证。</p><p>3、 将文件<code>MP_verify_ffPvlU5jlXYhLLC2.txt</code>上传至填写域名或路径指向的web服务器（或虚拟主机）的目录（若填写域名，将文件放置在域名根目录下，例如<code>wx.qq.com/MP_verify_ffPvlU5jlXYhLLC2.txt</code>；若填写路径，将文件放置在路径目录下，例如<code>wx.qq.com/mp/MP_verify_ffPvlU5jlXYhLLC2.txt</code>），并确保可以访问。</p><p>4、 一个自然月内最多可修改并保存五次，本月剩余保存次数：4</p></blockquote><p>服务号，需要项目开放静态资源路径以供微信访问，若开启了拦截器或过滤器，则需要将此放行。</p><hr><h5 id="测试号的提示信息：">测试号的提示信息：</h5><blockquote><p>设置<code>JS</code>接口安全域后，通过关注该测试号，开发者即可在该域名下调用微信开放的<code>JS</code>接口</p></blockquote><h5 id="IP白名单"><code>IP</code>白名单</h5><p>服务号需要将服务器的<code>ip</code>地址配置在白名单里，否则会报异常。</p><h3 id="流程">流程</h3><ol><li>引入微信<code>SDK</code>的<code>js</code>文件</li><li><code>js</code>携带当前页地址参数请求后端接口</li><li>后端通过<code>appid</code>和<code>appsecret</code>参数，使用<code>OAuth2.0</code>的客户端认证模式，请求获取微信<code>access_token</code></li><li>后端通过<code>access_token</code>获取<code>api_ticket</code></li><li>生成当前时间戳<code>timestamp</code>和随机字符串<code>nonceStr</code></li><li>通过<code>SHA1</code>签名算法生成签名<code>signature</code></li><li>将签名signature，时间戳timestamp，随机字符串nonceStr和appID返回给前端。</li><li>前端接收到信息后，完成微信配置</li><li>前端定义分享的格式。</li><li>测试微信分享效果。</li></ol><h3 id="开始">开始</h3><h4 id="前端页面完整代码示例">前端页面完整代码示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>微信分享示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎使用微信分享功能！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入微信JS SDK --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://res.wx.qq.com/open/js/jweixin-1.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/dist/js/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">async</span> : <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/demo&quot;</span>,</span><br><span class="language-javascript">    data : &#123;</span><br><span class="language-javascript">        <span class="hljs-variable constant_">URL</span> : <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;#&quot;</span>)[<span class="hljs-number">0</span>])</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">        <span class="hljs-comment">// 微信JS SDK配置</span></span><br><span class="language-javascript">        wx.<span class="hljs-title function_">config</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启后，微信打开网页后，会显示配置是否成功的信息</span></span><br><span class="language-javascript">            <span class="hljs-attr">appId</span>: data.<span class="hljs-property">appId</span>, <span class="hljs-comment">// 替换为您的微信公众平台App ID</span></span><br><span class="language-javascript">            <span class="hljs-attr">timestamp</span>: data.<span class="hljs-property">timestamp</span>, <span class="hljs-comment">// 替换为您的服务器时间戳</span></span><br><span class="language-javascript">            <span class="hljs-attr">nonceStr</span>: data.<span class="hljs-property">nonceStr</span>, <span class="hljs-comment">// 替换为您的随机字符串</span></span><br><span class="language-javascript">            <span class="hljs-attr">signature</span>: data.<span class="hljs-property">signature</span>, <span class="hljs-comment">// 替换为您的签名</span></span><br><span class="language-javascript">            <span class="hljs-attr">jsApiList</span>: [</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;updateAppMessageShareData&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;updateTimelineShareData&#x27;</span></span><br><span class="language-javascript">            ] <span class="hljs-comment">// 需要使用的微信JS接口列表</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;wx配置结束！&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 页面加载完成后的回调函数</span></span><br><span class="language-javascript">        wx.<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 在这里编写分享到朋友圈和分享给好友的代码</span></span><br><span class="language-javascript">            shareData = &#123; <span class="hljs-comment">// 标题和描述这里我是从localStorage取的值，可自定义</span></span><br><span class="language-javascript">                <span class="hljs-attr">title</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;title&quot;</span>),  <span class="hljs-comment">// 分享标题</span></span><br><span class="language-javascript">                <span class="hljs-attr">desc</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;Description&quot;</span>), <span class="hljs-comment">// 分享描述       </span></span><br><span class="language-javascript">                <span class="hljs-attr">link</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>, <span class="hljs-comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="language-javascript">                <span class="hljs-attr">imgUrl</span>: <span class="hljs-string">&quot;http://你的域名/你的图片.jpg&quot;</span>,  <span class="hljs-comment">// 分享图标</span></span><br><span class="language-javascript">                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;分享成功&#x27;</span>);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">cancel</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 取消分享的回调函数</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;取消分享&#x27;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            <span class="hljs-comment">// 分享到朋友圈</span></span><br><span class="language-javascript">            wx.<span class="hljs-title function_">updateTimelineShareData</span>(shareData);</span><br><span class="language-javascript">            <span class="hljs-comment">// 分享给好友</span></span><br><span class="language-javascript">            wx.<span class="hljs-title function_">updateAppMessageShareData</span>(shareData);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 页面卸载前的回调函数，用于清理资源等操作</span></span><br><span class="language-javascript">        wx.<span class="hljs-title function_">error</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;微信JS SDK加载失败&#x27;</span>);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, status, error</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;提交失败: &#x27;</span>, error);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="后端接口：">后端接口：</h4><p><code>demo</code>页面控制，引入<code>thymeleaf</code>视图解析器依赖测试即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/demo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 集成微信登录控制器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> WechatController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html&quot;&gt;微信官方文档&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxController</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此接口用于给微信验证本地服务器是否可用【微信接口配置信息 &gt;&gt;&gt; 验证消息的确来自微信服务器】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> signature 签名，微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timestamp 时间戳</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nonce 随机数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> echostr 随机字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 原样返回微信请求携带的随机字符串,即可通过微信的服务器验证</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> &lt;a href=&quot;https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%AA%8C%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E7%A1%AE%E6%9D%A5%E8%87%AA%E5%BE%AE%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8&quot;&gt;验证消息的确来自微信服务器&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/wxCheck&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">wxCheck</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@ApiParam(name = &quot;signature&quot;,value = &quot;微信加密签名&quot;)</span></span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;signature&quot;)</span></span><br><span class="hljs-params">            String signature,</span><br><span class="hljs-params">            <span class="hljs-meta">@ApiParam(name = &quot;timestamp&quot;,value = &quot;时间戳&quot;)</span></span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;timestamp&quot;)</span></span><br><span class="hljs-params">            String timestamp,</span><br><span class="hljs-params">            <span class="hljs-meta">@ApiParam(name = &quot;nonce&quot;,value = &quot;随机数&quot;)</span></span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;nonce&quot;)</span></span><br><span class="hljs-params">            String nonce,</span><br><span class="hljs-params">            <span class="hljs-meta">@ApiParam(name = &quot;echostr&quot;,value = &quot;随机字符串&quot;)</span></span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;echostr&quot;)</span></span><br><span class="hljs-params">            String echostr</span><br><span class="hljs-params">    )</span>&#123;<br><br>        <span class="hljs-comment">// 验证消息是否来自微信服务器</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;weChatTest&quot;</span>;<br>        String[] arr = &#123;token, timestamp, nonce&#125;;<br><br>        <span class="hljs-comment">// 按字典序排序</span><br>        Arrays.sort(arr);<br><br>        <span class="hljs-comment">// 使用StringBuilder进行拼接</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (String s : arr) &#123;<br>            result.append(s);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> SHA1(String.valueOf(result));<br><br>        <span class="hljs-keyword">if</span> (!s.equals(signature)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Token值匹配失败！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Token值匹配成功！&quot;</span>);<br><br>        <span class="hljs-comment">// 将请求携带的参数加入Map集合</span><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;signature&quot;</span>,signature);<br>        map.put(<span class="hljs-string">&quot;timestamp&quot;</span>,timestamp);<br>        map.put(<span class="hljs-string">&quot;nonce&quot;</span>,nonce);<br>        map.put(<span class="hljs-string">&quot;echostr&quot;</span>,echostr);<br>        <span class="hljs-comment">// 打印Map集合查看微信的消息</span><br>        System.out.println(<span class="hljs-string">&quot;来自微信的消息：&quot;</span>+map);<br>        <span class="hljs-keyword">return</span> echostr;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 微信分享专用接口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> WechatController</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(&quot;demo&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">demo</span><span class="hljs-params">(</span><br><span class="hljs-params">        HttpSession session, String URL)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">appId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你的appid&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">appSecret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你的appSecret&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            url = java.net.URLDecoder.decode(URL,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;UTF-8格式地址解析异常！&quot;</span>);<br>            retuen <span class="hljs-literal">null</span>;<span class="hljs-comment">// 异常就停止</span><br>        &#125;<br>        <span class="hljs-comment">// 获取access_token，这里要从存到session，生成这个参数的wx调用接口有调用次数限制。这部分存session，下面的下载文件里面没有更新，自己添加进去吧，不然接口次数很快就用完了。</span><br>        String access_token=(String) session.getAttribute(<span class="hljs-string">&quot;access_token&quot;</span>);<br>        <span class="hljs-keyword">if</span>(access_token==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 若session中不存在才请求token,并将请求到的token存到session中</span><br>            access_token = getAccessToken(appId, appSecret);<br>            <span class="hljs-keyword">if</span> (access_token ==<span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;获取access_token失败！&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            session.setAttribute(<span class="hljs-string">&quot;access_token&quot;</span>, access_token);<br>        &#125;<br>        <span class="hljs-comment">// 获取jsapi_ticket</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsapi_ticket</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;access_ticket&quot;</span>);<br>        <span class="hljs-keyword">if</span>(jsapi_ticket==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">// 若session中不存在才请求api_ticket,并将请求到的api_ticket存到session中</span><br>            jsapi_ticket = getTicket(access_token);<br>            <span class="hljs-keyword">if</span> (jsapi_ticket ==<span class="hljs-literal">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;获取jsapi_ticket失败！&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            session.setAttribute(<span class="hljs-string">&quot;jsapi_ticket&quot;</span>, jsapi_ticket);<br>        &#125;<br><br>        <span class="hljs-comment">// 3、时间戳和随机字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">noncestr</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).substring(<span class="hljs-number">0</span>, <span class="hljs-number">16</span>);<span class="hljs-comment">//随机字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> String.valueOf(System.currentTimeMillis() / <span class="hljs-number">1000</span>);<span class="hljs-comment">//时间戳</span><br><br>        System.out.println(<span class="hljs-string">&quot;accessToken:&quot;</span>+access_token+<span class="hljs-string">&quot;\njsapi_ticket:&quot;</span>+jsapi_ticket+<span class="hljs-string">&quot;\n时间戳：&quot;</span>+timestamp+<span class="hljs-string">&quot;\n随机字符串：&quot;</span>+noncestr);<br><br><br>        <span class="hljs-comment">// 4、将参数排序并拼接字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jsapi_ticket=&quot;</span>+jsapi_ticket+<span class="hljs-string">&quot;&amp;noncestr=&quot;</span>+noncestr+<span class="hljs-string">&quot;&amp;timestamp=&quot;</span>+timestamp+<span class="hljs-string">&quot;&amp;url=&quot;</span>+url;<br><br>        <span class="hljs-comment">// 5、将字符串进行sha1加密</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span>SHA1(str);<br>        <span class="hljs-keyword">if</span> (signature == <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;SHA1加密失败！&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;参数：&quot;</span>+str+<span class="hljs-string">&quot;\n签名：&quot;</span>+signature);<br><span class="hljs-comment">// 将参数统一放进Map集合，然后返回给前端</span><br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;signature&quot;</span>,signature);<br>        map.put(<span class="hljs-string">&quot;appId&quot;</span>,appId);<br>        map.put(<span class="hljs-string">&quot;timestamp&quot;</span>,timestamp);<br>        map.put(<span class="hljs-string">&quot;nonceStr&quot;</span>,noncestr);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第一步：获取access_token</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getAccessToken</span><span class="hljs-params">(String appid,String secret)</span> &#123;<br><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault()) &#123;<br>            <span class="hljs-comment">// 请求地址</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&quot;</span>+appid+<span class="hljs-string">&quot;&amp;secret=&quot;</span>+secret;<br>            <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>            <span class="hljs-comment">// 接收请求响应的信息</span><br>            <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>            System.out.println(response.getStatusLine());<br>            <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                System.out.println(result);<br>                Map&lt;String, Object&gt; map = JSON.parseObject(result);<br>                <span class="hljs-keyword">return</span> (String) map.get(<span class="hljs-string">&quot;access_token&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第二步：获取ticket</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getTicket</span><span class="hljs-params">(String access_token)</span> &#123;<br><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault()) &#123;<br><span class="hljs-comment">// 请求地址</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=&quot;</span>+access_token+<span class="hljs-string">&quot;&amp;type=jsapi&quot;</span>;<br>            <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>            <span class="hljs-comment">// 接收请求响应的信息</span><br>            <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>            System.out.println(response.getStatusLine());<br>            <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                System.out.println(result);<br>                Map&lt;String, Object&gt; map = JSON.parseObject(result);<br>                <span class="hljs-keyword">return</span> (String) map.get(<span class="hljs-string">&quot;ticket&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第三步：SHA1加密</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">SHA1</span><span class="hljs-params">(String decript)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">digest</span> <span class="hljs-operator">=</span> java.security.MessageDigest.getInstance(<span class="hljs-string">&quot;SHA-1&quot;</span>);<br>            digest.update(decript.getBytes());<br>            <span class="hljs-type">byte</span> messageDigest[] = digest.digest();<br>            <span class="hljs-comment">// Create Hex String  </span><br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">hexString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>            <span class="hljs-comment">// 字节数组转换为 十六进制 数  </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; messageDigest.length; i++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">shaHex</span> <span class="hljs-operator">=</span> Integer.toHexString(messageDigest[i] &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span> (shaHex.length() &lt; <span class="hljs-number">2</span>) &#123;<br>                    hexString.append(<span class="hljs-number">0</span>);<br>                &#125;<br>                hexString.append(shaHex);<br>            &#125;<br>            <span class="hljs-keyword">return</span> hexString.toString();<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用">使用</h3><p>这里需要将地址构造成二维码的形式，再用微信扫描打开。</p><p><a href="https://cli.im/text/other"><strong>草料二维码</strong></a></p><p>因为微信对直接访问直链地址有限制，直接在聊天记录里点链接打开，分享出的信息也只有直链地址，没有标题、描述和图标的。</p><p>打开后，进入我们的那个<code>demo</code>页面，前端如果在微信配置中，开启了debug，那么这时就会弹出提示框：<code>errMsg：config:ok</code>这样就成功了，点击右上角然后分享给自己，就可以看到带有标题、描述和图标的分享卡片效果了。</p><h3 id="最后">最后</h3><p>弄好后，可以先在电脑上打开页面，这样可以在控制台看到后端请求的结果，前端数据载入情况等。</p><p>控制台都正常，没有问题信息的话，再用手机扫码访问测试。</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#%E9%99%84%E5%BD%955-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95"><strong>附录5-常见错误及解决方法</strong></a></p><h3 id="参考资料">参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_37698433/article/details/93307212?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=93307212&amp;sharerefer=PC&amp;sharesource=weixin_44816404&amp;sharefrom=from_link"><strong>微信内分享网页自定义标题，图片，描述</strong></a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html"><strong>微信公众号官方文档 - 开始开发 - 接入指南</strong></a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Requesting_an_API_Test_Account.html"><strong>微信公众号官方文档 - 开始开发 - 接口测试号申请</strong></a></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html"><strong>微信公众号官方文档 - 微信网页开发 - <code>JS-SDK</code>说明文档</strong></a></li></ol>]]></content>
    
    
    <categories>
      
      <category>微信集成</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信卡片分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前后端分离 - Ajax请求和Controller接收示例</title>
    <link href="/2024/10/19/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BC%A0%E5%80%BC%E5%8C%B9%E9%85%8D/"/>
    <url>/2024/10/19/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BC%A0%E5%80%BC%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前后端分离-Ajax请求和Controller接收示例">前后端分离 - Ajax请求和Controller接收示例</h2><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br></code></pre></td></tr></table></figure><p>后端准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 统一返回类、</span><br><br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据返回值实体类</span><br><span class="hljs-comment"> * 此类主要用于响应前端的请求</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(value = &quot;响应类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span>&lt;T&gt;&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应码 &gt;&gt;&gt; 200成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;响应码&quot;,name = &quot;code&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据返回值 &gt;&gt;&gt; 响应信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;响应信息&quot;,name = &quot;message&quot;,position = 1)</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据返回值 &gt;&gt;&gt; 响应数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;响应数据&quot;,name = &quot;data&quot;,position = 2)</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义响应信息【单例模式】</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data 响应数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 响应代码枚举</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 响应信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ResultData</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="hljs-title function_">BUILD</span><span class="hljs-params">(T data, <span class="hljs-type">int</span> code,String message)</span> &#123;<br>        R&lt;T&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>&lt;&gt;();<br>        result.setData(data);<br>        result.setCode(code);<br>        result.setMessage(message);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>后端Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 给登录页添加路径</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;demo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>前端准备</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>前后端传值匹配Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  jquery  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/dist/js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;user-name-label&quot;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user-name-label&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;user-password-label&quot;</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user-password-label&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 这里写ajax异步请求</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="直接传参">直接传参</h3><h4 id="后端">后端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这种方法需固定顺序[不推荐]</span><br><span class="hljs-meta">@PostMapping(value=&quot;/directExample&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">directExample</span><span class="hljs-params">(String username,String password)</span>&#123;<br>    <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,username);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,password);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br>    <br>    <span class="hljs-keyword">return</span> R.BUILD(map,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;请求成功&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 这种无需固定顺序[推荐]</span><br><span class="hljs-meta">@PostMapping(value=&quot;/directExample2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">directExample2</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span></span><br><span class="hljs-params">    String username,</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(value = &quot;password&quot;)</span></span><br><span class="hljs-params">    String password)</span>&#123;<br>    <br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,username);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,password);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br>    <br>    <span class="hljs-keyword">return</span> R.BUILD(map,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;请求成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端js">前端js</h4><p>依赖<code>jquery-3.6.0</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;form&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止默认提交行为</span><br>    <span class="hljs-comment">// 将表单数据序列化为对象</span><br>    <span class="hljs-keyword">const</span> formData = &#123;<br>        <span class="hljs-attr">username</span>: $(<span class="hljs-string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">password</span>: $(<span class="hljs-string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData);<br>    <span class="hljs-comment">// 使用 AJAX 提交数据</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/directExample2&#x27;</span>, <br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">data</span>: formData,  <br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> code = data.<span class="hljs-property">code</span>;<br>            <span class="hljs-keyword">if</span> (code===<span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;登录失败！&quot;</span>)<br>                <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;提交失败: &#x27;</span>, error);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="请求头传参">请求头传参</h3><h4 id="后端-2">后端</h4><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value=&quot;/requestHeaderExample&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">requestHeaderExample</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span></span><br><span class="hljs-params">    String token,</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span></span><br><span class="hljs-params">    String username,</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(value = &quot;password&quot;)</span></span><br><span class="hljs-params">    String password)</span>&#123;<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;token&quot;</span>,token);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,username);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,password);<br>    System.out.println(<span class="hljs-string">&quot;token = &quot;</span> + token + <span class="hljs-string">&quot;,username = &quot;</span> + username + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br>    <span class="hljs-keyword">return</span> R.BUILD(map,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;请求成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端">前端</h4><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;form&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止默认提交行为</span><br>    <span class="hljs-comment">// 将表单数据序列化为对象</span><br>    <span class="hljs-keyword">const</span> formData = &#123;<br>        <span class="hljs-attr">username</span>: $(<span class="hljs-string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">password</span>: $(<span class="hljs-string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData);<br>    <span class="hljs-comment">// 使用 AJAX 提交数据</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/requestHeaderExample&#x27;</span>,  <span class="hljs-comment">// 替换为服务器的 URL</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-string">&quot;12345&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">data</span>: formData,  <span class="hljs-comment">// 表单数据</span><br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> code = data.<span class="hljs-property">code</span>;<br>            <span class="hljs-keyword">if</span> (code===<span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;登录失败！&quot;</span>)<br>                <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;提交失败: &#x27;</span>, error);<br>        &#125;<br>    &#125;);<br>&#125;);<br><br><br></code></pre></td></tr></table></figure><h3 id="Cookie传参"><code>Cookie</code>传参</h3><h4 id="后端-3">后端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value=&quot;/cookieExample&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> R&lt;Map&lt;String,Object&gt;&gt; <span class="hljs-title function_">cookieExample</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@CookieValue(&quot;cookie&quot;)</span></span><br><span class="hljs-params">    String cookie,</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span></span><br><span class="hljs-params">    String username,</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(value = &quot;password&quot;)</span></span><br><span class="hljs-params">    String password)</span>&#123;<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;cookie&quot;</span>,cookie);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,username);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,password);<br>    System.out.println(<span class="hljs-string">&quot;token = &quot;</span> + token + <span class="hljs-string">&quot;,username = &quot;</span> + username + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br>    <span class="hljs-keyword">return</span> R.BUILD(map,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;请求成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端-2">前端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;form&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止默认提交行为</span><br>    <span class="hljs-comment">// 将表单数据序列化为对象</span><br>    <span class="hljs-keyword">const</span> formData = &#123;<br>        <span class="hljs-attr">username</span>: $(<span class="hljs-string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">password</span>: $(<span class="hljs-string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData);<br>    <span class="hljs-comment">// 使用 AJAX 提交数据</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/cookieExample&#x27;</span>,  <span class="hljs-comment">// 替换为服务器的 URL</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">xhrFields</span>: &#123;<br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">// 允许发送 Cookies</span><br>  &#125;,                    <br>        <span class="hljs-attr">data</span>: formData,  <span class="hljs-comment">// 表单数据</span><br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> code = data.<span class="hljs-property">code</span>;<br>            <span class="hljs-keyword">if</span> (code===<span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;登录失败！&quot;</span>)<br>                <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;提交失败: &#x27;</span>, error);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="JSON传参"><code>JSON</code>传参</h3><h4 id="后端-4">后端</h4><p>DTO类，用于接收前端json数据的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDTO</span> &#123;<br><br>    <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-comment">// 密码</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value=&quot;/JSONExample&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResultData&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">JSONExample</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestBody</span></span><br><span class="hljs-params">        UserDTO userDTO)</span>&#123;<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,userDTO.getUsername);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,userDTO.getPassword);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br><br>    <span class="hljs-keyword">return</span> ResultData.BUILD(map,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;请求成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端-3">前端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;form&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止默认提交行为</span><br>    <span class="hljs-comment">// 将表单数据序列化为对象</span><br>    <span class="hljs-keyword">const</span> formData = &#123;<br>        <span class="hljs-attr">username</span>: $(<span class="hljs-string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">password</span>: $(<span class="hljs-string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData);<br>    <span class="hljs-comment">// 使用 AJAX 提交数据</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/JSONExample&#x27;</span>,  <span class="hljs-comment">// 替换为服务器的 URL</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,  <span class="hljs-comment">// 设置内容类型为 JSON</span><br>        <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(formData),  <span class="hljs-comment">// 转换为 JSON 字符串</span><br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> code = data.<span class="hljs-property">code</span>;<br>            <span class="hljs-keyword">if</span> (code===<span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;登录失败！&quot;</span>)<br>                <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;提交失败: &#x27;</span>, error);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="路径传参">路径传参</h3><h4 id="后端-5">后端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value=&quot;/PathExample/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResultData&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">PathExample</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable</span></span><br><span class="hljs-params">        String id,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span></span><br><span class="hljs-params">        String username,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;password&quot;)</span></span><br><span class="hljs-params">        String password)</span>&#123;<br><br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;id&quot;</span>,id);<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,username);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,password);<br>    System.out.println(<span class="hljs-string">&quot;username = &quot;</span> + username + <span class="hljs-string">&quot;, password = &quot;</span> + password);<br><br>    <span class="hljs-keyword">return</span> ResultData.BUILD(map,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;请求成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="前端-4">前端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;form&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止默认提交行为</span><br>    <span class="hljs-comment">// 将表单数据序列化为对象</span><br>    <span class="hljs-keyword">const</span> formData = &#123;<br>        <span class="hljs-attr">username</span>: $(<span class="hljs-string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>        <span class="hljs-attr">password</span>: $(<span class="hljs-string">&#x27;input[name=&quot;password&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(formData);<br>    <span class="hljs-comment">// 使用 AJAX 提交数据</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/PathExample/1&#x27;</span>,  <span class="hljs-comment">// 路径上直接加参数</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,  <span class="hljs-comment">// 设置内容类型为 JSON</span><br>        <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(formData),  <span class="hljs-comment">// 转换为 JSON 字符串</span><br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">let</span> code = data.<span class="hljs-property">code</span>;<br>            <span class="hljs-keyword">if</span> (code===<span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;登录失败！&quot;</span>)<br>                <span class="hljs-title function_">alert</span>(data.<span class="hljs-property">message</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, status, error</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;提交失败: &#x27;</span>, error);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端联调</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jquery</tag>
      
      <tag>ajax</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OAuth2.0认证授权</title>
    <link href="/2024/10/18/OAuth2.0%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    <url>/2024/10/18/OAuth2.0%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="OAuth2-0认证授权"><code>OAuth2.0</code>认证授权</h2><blockquote><p>SSO 单点登录</p></blockquote><h3 id="模式介绍">模式介绍</h3><h4 id="四种认证模式：">四种认证模式：</h4><h5 id="授权码模式-authorization-code">授权码模式 - [authorization_code]</h5><p>前后端项目的推荐模式，也是标准模式。</p><p>大致流程：首先通过<code>app_id</code>和<code>app_secret</code>等一系列参数获取授权码（这种可以通过二维码方式扫描打开授权登录页，然后用户登录授权后，授权服务器会将授权码和随机字符串返回给后端的接口，再由接口通过授权码请求授权服务器获取token和refresh_token） -&gt; 再通过授权码获取<code>token</code>和<code>refresh_token</code>，再用<code>token</code>从资源服务器获取资源。<code>token</code>过期后，可以用<code>refresh_token</code>获取新<code>token</code>，就不用再次获取授权码了，除非刷新的<code>refresh_token</code>也到期了（通常，<code>refresh_token</code>的有效期远大于<code>token</code>。例如：<code>token</code> 3天有效，而<code>refresh_token</code> 15天有效）</p><p>注意：前端只需要返回token即可，且token推荐保存到cookie中，并设置token只读，从而禁止前端js读取操作。</p><h5 id="简单模式-implicit">简单模式 - [implicit]</h5><p>这个主要是给无后台的纯前端项目用的，认证授权服务器的回调地址的参数也是只有前端能处理</p><h5 id="密码模式-password">密码模式 - [password]</h5><p>直接拿用户的账号密码授权  【不安全】</p><h5 id="客户端模式-client-credentials">客户端模式 - [client_credentials]</h5><p>主要用于服务器与服务器的通信，不涉及前端</p><h3 id="认证-授权服务">认证/授权服务</h3><blockquote><p>认证服务器：1、需允许所有人访问</p></blockquote><h4 id="Maven依赖">Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--  SpringMVC  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  oauth2  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  test  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置类">配置类</h4><p><code>AuthorizationServerConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAuthorizationServer</span> <span class="hljs-comment">// 开启oauth2,auth server模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizationServerConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-comment">// 密码加密</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<br><br>    <span class="hljs-comment">// 配置客户端 http://localhost:3001/oauth/authorize?response_type=code&amp;client_id=client1&amp;redirect_uri=http://127.0.0.1:8080/callback&amp;scope=scope1&amp;state=admin</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        clients.inMemory()<br>                <span class="hljs-comment">// client的id和密码</span><br>                .withClient(<span class="hljs-string">&quot;client1&quot;</span>)<br>                .secret(passwordEncoder.encode(<span class="hljs-string">&quot;123123&quot;</span>))<br><br>                <span class="hljs-comment">// 给client一个id,这个在client的配置里要用的</span><br>                .resourceIds(<span class="hljs-string">&quot;resource1&quot;</span>)<br><br>                <span class="hljs-comment">// 允许的申请token的方式,测试用例在test项目里都有.</span><br>                <span class="hljs-comment">// authorization_code授权码模式,这个是标准模式</span><br>                <span class="hljs-comment">// implicit简单模式,这个主要是给无后台的纯前端项目用的</span><br>                <span class="hljs-comment">// password密码模式,直接拿用户的账号密码授权,不安全</span><br>                <span class="hljs-comment">// client_credentials客户端模式,用clientid和密码授权,和用户无关的授权方式</span><br>                <span class="hljs-comment">// refresh_token使用有效的refresh_token去重新生成一个token,之前的会失效</span><br>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;client_credentials&quot;</span>, <span class="hljs-string">&quot;implicit&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>)<br><br>                <span class="hljs-comment">// 授权的范围,每个resource会设置自己的范围.</span><br>                .scopes(<span class="hljs-string">&quot;scope1&quot;</span>, <span class="hljs-string">&quot;scope2&quot;</span>)<br><br>                <span class="hljs-comment">// 自动授权：若为true则登录成功后，用户无需再手动选择是否授权，false则弹出确认授权页面</span><br>                .autoApprove(<span class="hljs-literal">true</span>)<br>                <span class="hljs-comment">//.autoApprove(&quot;scope1&quot;)  // 或者指定自动批准的scope</span><br>                <span class="hljs-comment">// 这个相当于是client的域名,重定向给code的时候会跳转这个域名</span><br>                .redirectUris(<span class="hljs-string">&quot;http://127.0.0.1:8080/callback&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8080/index2&quot;</span>);<br><br>                <span class="hljs-comment">/*.and()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                .withClient(&quot;client2&quot;)</span><br><span class="hljs-comment">                .secret(passwordEncoder.encode(&quot;123123&quot;))</span><br><span class="hljs-comment">                .resourceIds(&quot;resource1&quot;)</span><br><span class="hljs-comment">                .authorizedGrantTypes(&quot;authorization_code&quot;, &quot;password&quot;, &quot;client_credentials&quot;, &quot;implicit&quot;, &quot;refresh_token&quot;)</span><br><span class="hljs-comment">                .scopes(&quot;all&quot;)</span><br><span class="hljs-comment">                .autoApprove(false)</span><br><span class="hljs-comment">                .redirectUris(&quot;http://www.qq.com&quot;);*/</span><br>    &#125;<br><br><span class="hljs-comment">// 客户端详细业务</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ClientDetailsService clientDetailsService;<br><br>    <span class="hljs-comment">// token存储</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenStore tokenStore;<br><br>    <span class="hljs-comment">// jwt的token转换器</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtAccessTokenConverter tokenConverter;<br><br>    <span class="hljs-comment">// 配置token管理服务</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthorizationServerTokenServices <span class="hljs-title function_">tokenServices</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DefaultTokenServices</span> <span class="hljs-variable">defaultTokenServices</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultTokenServices</span>();<br>        defaultTokenServices.setClientDetailsService(clientDetailsService);<br>        <span class="hljs-comment">// 设置以支持  刷新token</span><br>        defaultTokenServices.setSupportRefreshToken(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 配置token的存储方法</span><br>        defaultTokenServices.setTokenStore(tokenStore);<br>        <span class="hljs-comment">// token有效期300秒 -&gt; 5分钟</span><br>        defaultTokenServices.setAccessTokenValiditySeconds(<span class="hljs-number">300</span>);<br>        <span class="hljs-comment">// 刷新token有效期1500秒 -&gt; 25分钟</span><br>        defaultTokenServices.setRefreshTokenValiditySeconds(<span class="hljs-number">1500</span>);<br><br>        <span class="hljs-comment">// 配置token增加,把一般token转换为jwt token</span><br>        <span class="hljs-type">TokenEnhancerChain</span> <span class="hljs-variable">tokenEnhancerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenEnhancerChain</span>();<br>        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(tokenConverter));<br>        defaultTokenServices.setTokenEnhancer(tokenEnhancerChain);<br>        <span class="hljs-keyword">return</span> defaultTokenServices;<br>    &#125;<br><br>    <span class="hljs-comment">// 密码模式才需要配置,认证管理器</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;<br><br>    <span class="hljs-comment">// 把上面的各个组件组合在一起</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        endpoints.authenticationManager(authenticationManager)<span class="hljs-comment">// 认证管理器</span><br>                .authorizationCodeServices(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryAuthorizationCodeServices</span>())<span class="hljs-comment">// 授权码管理</span><br>                .tokenServices(tokenServices())<span class="hljs-comment">// token管理</span><br>                .allowedTokenEndpointRequestMethods(HttpMethod.POST);<br>    &#125;<br><br>    <span class="hljs-comment">// 配置哪些接口可以被访问</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        security.tokenKeyAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)<span class="hljs-comment">// oauth/token_key公开</span><br>                .checkTokenAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)<span class="hljs-comment">// oauth/check_token公开</span><br>                .allowFormAuthenticationForClients();<span class="hljs-comment">// 允许表单认证</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TokenConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenConfig</span> &#123;<br><br>    <span class="hljs-comment">//配置如何把普通token转换成jwt token</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title function_">tokenConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JwtAccessTokenConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessTokenConverter</span>();<br>        <span class="hljs-comment">//使用对称秘钥加密token,resource那边会用这个秘钥校验token</span><br>        converter.setSigningKey(<span class="hljs-string">&quot;uaa123&quot;</span>);<br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br><br>    <span class="hljs-comment">//配置token的存储方法</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">tokenStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//把用户信息都存储在token当中,相当于存储在客户端,性能好很多</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenStore</span>(tokenConverter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 密码模式才需要配置,认证管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManager();<br>    &#125;<br><br>    <span class="hljs-comment">// 授权服务器需要开放所有限制，允许所有人访问</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable()<br>                .authorizeRequests()<br>                .anyRequest().permitAll()<br><br>                .and()<br>                .formLogin()<br><br>                .and()<br>                .logout();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> s -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(s) || <span class="hljs-string">&quot;user&quot;</span>.equals(s)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUserDetails</span>(s, passwordEncoder().encode(s), s);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>MyUserDetails.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String perms;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetails</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetails</span><span class="hljs-params">(String username, String password, String perms)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.perms = perms;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPerms</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> perms;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPerms</span><span class="hljs-params">(String perms)</span> &#123;<br>        <span class="hljs-built_in">this</span>.perms = perms;<br>    &#125;<br><br>    <span class="hljs-comment">////////////////////////////////////////////////</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> Stream.of(perms.split(<span class="hljs-string">&quot;,&quot;</span>)).map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>).collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>上面是模拟的用户数据是在内存中的，以下是在数据库中读取的：</p><p><code>MyUserDetails.java</code>文件改成如下文件：</p><p><code>SecurityUser.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lee.pojo.User;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询数据库后返回的信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br><br>    <span class="hljs-comment">// 当前登录用户</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> User currentUserInfo;<br><br>    <span class="hljs-comment">// 当前权限</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permissionValueList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityUser</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SecurityUser</span><span class="hljs-params">(User currentUserInfo)</span> &#123;<br>        <span class="hljs-keyword">if</span> (currentUserInfo != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.currentUserInfo = currentUserInfo;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        Collection&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String permissionValue : permissionValueList) &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.isEmpty(permissionValue)) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">SimpleGrantedAuthority</span> <span class="hljs-variable">authority</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(permissionValue);<br>            authorities.add(authority);<br>        &#125;<br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentUserInfo.getPassword();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> currentUserInfo.getUsername();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>新增<code>UserDetailsServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class="hljs-keyword">import</span> lee.mapper.UserMapper;<br><span class="hljs-keyword">import</span> lee.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">// 这个文件可以看成是BO业务验证类</span><br><span class="hljs-meta">@Service(&quot;userDetailsService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper; <span class="hljs-comment">// UserMapper和User文件就是熟悉的正常流程了</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        qw.eq(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(qw);<br><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;User not found&quot;</span>);<br>        &#125;<br>        System.out.println(user);<br>        <span class="hljs-type">SecurityUser</span> <span class="hljs-variable">securityUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityUser</span>();<br>        securityUser.setCurrentUserInfo(user);<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(user.getRole());<br>        securityUser.setPermissionValueList(list);<br>        System.out.println(securityUser);<br>        <span class="hljs-keyword">return</span> securityUser;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件<code>SecurityConfig.java</code>变动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lee.model.UserDetailsServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDetailsServiceImpl userDetailsService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 密码模式才需要配置,认证管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManager();<br>    &#125;<br><br>    <span class="hljs-comment">// 授权服务器需要开放所有限制，允许所有人访问</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable()<br>                .authorizeRequests()<br>                .anyRequest().permitAll()<br><br>                .and()<br>                .formLogin()<br><br>                .and()<br>                .logout();<br>    &#125;<br><br><br><span class="hljs-comment">//    @Bean</span><br><span class="hljs-comment">//    public UserDetailsService userDetailsService() &#123;</span><br><span class="hljs-comment">//        return s -&gt; &#123;</span><br><span class="hljs-comment">//            if (&quot;admin&quot;.equals(s) || &quot;user&quot;.equals(s)) &#123;</span><br><span class="hljs-comment">//                return new MyUserDetails(s, passwordEncoder().encode(s), s);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//            return null;</span><br><span class="hljs-comment">//        &#125;;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="资源服务">资源服务</h3><blockquote><p>资源服务器：只允许有特定访问资源权限的用户访问</p></blockquote><p>资源服务器配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//开启oauth2,reousrce server模式</span><br><span class="hljs-meta">@EnableResourceServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ResourceServerConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenStore tokenStore;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        resources<br>                <span class="hljs-comment">// 将资源服务器的 ID 设置为 &quot;resource1&quot;，需与授权服务器中的资源 ID 配置一致，表示该资源需要授权访问。</span><br>                .resourceId(<span class="hljs-string">&quot;resource1&quot;</span>)<br>                .tokenStore(tokenStore)<br><br>                <span class="hljs-comment">//  配置资源服务器为无状态，这意味着不会将认证信息存储在 HTTP session 中，而是依赖于每次请求携带的令牌（token）来验证身份</span><br>                .stateless(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable()<br>                <span class="hljs-comment">//配置请求的访问控制。</span><br>                .authorizeRequests()<br><br>                <span class="hljs-comment">// 表示要求请求具备 OAuth2 令牌中定义的 scope1 授权范围。如果令牌中没有 scope1 授权范围，则用户无权访问。</span><br>                .antMatchers(<span class="hljs-string">&quot;/**&quot;</span>).access(<span class="hljs-string">&quot;#oauth2.hasScope(&#x27;scope1&#x27;)&quot;</span>)<br><br>                .and()<br>                <span class="hljs-comment">// 配置会话管理策略。</span><br>                <span class="hljs-comment">// 将会话管理策略设置为 STATELESS，表示不会创建 HTTP 会话，服务不会在 session 中保存任何状态信息。</span><br>                <span class="hljs-comment">// 在无状态的 REST API 中，通常不使用会话，而是通过每次请求的 OAuth2 令牌来验证用户身份，达到无状态的效果</span><br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>SecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 资源服务器的配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/31</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> SecurityConfig</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf().disable() <span class="hljs-comment">// 关闭了 CSRF（跨站请求伪造）保护功能，前后端分离一般不需要</span><br>                .authorizeRequests() <span class="hljs-comment">// 开始配置请求的访问控制。</span><br>                .anyRequest().permitAll(); <span class="hljs-comment">// 允许所有请求，不需要任何权限认证</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TokenConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> lee.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenConfig</span> &#123;<br><br>    <span class="hljs-comment">// 配置如何把普通token转换成jwt token</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title function_">tokenConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JwtAccessTokenConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessTokenConverter</span>();<br><br>        <span class="hljs-comment">// 使用对称秘钥加密token,resource那边会用这个秘钥校验token</span><br>        converter.setSigningKey(<span class="hljs-string">&quot;uaa123&quot;</span>);<br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br><br>    <span class="hljs-comment">// 配置token的存储方法</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TokenStore <span class="hljs-title function_">tokenStore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//把用户信息都存储在token当中,相当于存储在客户端,性能好很多</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenStore</span>(tokenConverter());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>资源服务器供访问的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//测试接口</span><br>    <span class="hljs-meta">@RequestMapping(&quot;admin&quot;)</span><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">admin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;admin&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;me&quot;)</span><br>    <span class="hljs-keyword">public</span> Principal <span class="hljs-title function_">me</span><span class="hljs-params">(Principal principal)</span> &#123;<br>        <span class="hljs-keyword">return</span> principal;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试服务器">测试服务器</h3><h5 id="控制器">控制器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类名称</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">indexController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;callback&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">callback</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;code&quot;)</span></span><br><span class="hljs-params">            String code, // 获取到的授权码</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;state&quot;)</span></span><br><span class="hljs-params">            String state)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;code: &quot;</span> + code + <span class="hljs-string">&quot; state: &quot;</span> + state);<br>        <span class="hljs-comment">//https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+ appId +&quot;&amp;secret=&quot;+appSecret+&quot;&amp;code=&quot;+code+&quot;&amp;grant_type=authorization_code&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;access_token&quot;)</span></span><br><span class="hljs-params">            String access_token, // 获取到的授权码</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;token_type&quot;)</span></span><br><span class="hljs-params">            String token_type,</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;expires_in&quot;)</span></span><br><span class="hljs-params">            String expires_in, // 获取到的授权码</span><br><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;refresh_token&quot;)</span></span><br><span class="hljs-params">            String refresh_token)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;access_token: &quot;</span> + access_token + <span class="hljs-string">&quot; token_type: &quot;</span> + token_type+<span class="hljs-string">&quot;expires_in: &quot;</span> + expires_in + <span class="hljs-string">&quot; refresh_token: &quot;</span> + refresh_token);<br>        <span class="hljs-comment">//https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+ appId +&quot;&amp;secret=&quot;+appSecret+&quot;&amp;code=&quot;+code+&quot;&amp;grant_type=authorization_code&quot;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;index2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index2</span><span class="hljs-params">(</span><br><span class="hljs-params">            //<span class="hljs-meta">@RequestParam(value = &quot;access_token&quot;)</span></span><br><span class="hljs-params">            String access_token, // 获取到的授权码</span><br><span class="hljs-params">            //<span class="hljs-meta">@RequestParam(value = &quot;token_type&quot;)</span></span><br><span class="hljs-params">            String token_type,</span><br><span class="hljs-params">            //<span class="hljs-meta">@RequestParam(value = &quot;expires_in&quot;)</span></span><br><span class="hljs-params">            String expires_in, // 获取到的授权码</span><br><span class="hljs-params">            //<span class="hljs-meta">@RequestParam(value = &quot;scope&quot;)</span></span><br><span class="hljs-params">            String scope,</span><br><span class="hljs-params">            //<span class="hljs-meta">@RequestParam(value = &quot;jti&quot;)</span></span><br><span class="hljs-params">            String jti, // 获取到的授权码</span><br><span class="hljs-params">            //<span class="hljs-meta">@RequestParam(value = &quot;state&quot;)</span></span><br><span class="hljs-params">            String state)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;access_token: &quot;</span> + access_token + <span class="hljs-string">&quot; token_type: &quot;</span> + token_type+<span class="hljs-string">&quot;expires_in: &quot;</span> + expires_in + <span class="hljs-string">&quot; state: &quot;</span> + state+ <span class="hljs-string">&quot; scope: &quot;</span> + scope+ <span class="hljs-string">&quot; jti: &quot;</span> + jti);<br>        <span class="hljs-comment">//https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;+ appId +&quot;&amp;secret=&quot;+appSecret+&quot;&amp;code=&quot;+code+&quot;&amp;grant_type=authorization_code&quot;;</span><br><br>        <span class="hljs-comment">//http://127.0.0.1:8080/index2#access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIl0sImV4cCI6MTcyOTY3MzE1NSwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiNmE4ZTQxMjAtMmE1My00MTY3LTg4ZjItMzkzZmRiNWQyZTgzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.VnrB18dLY6bsKpJ_4E0PTvc3TGsek8je6iaL8PU6w_4&amp;token_type=bearer&amp;state=admin&amp;expires_in=299&amp;scope=scope1&amp;jti=6a8e4120-2a53-4167-88f2-393fdb5d2e83</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ces&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="前端测试页">前端测试页</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>点击Test后，弹出表单登录，登录成功会返回到此页面，然后控制台会输出如下内容：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Access Token:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJf<br>    bmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2Nv<br>    cGUxIiwic2NvcGUyIl0sImV4cCI6MTcyOTgy<br>    MzI4NCwiYXV0aG9yaXRpZXMiOlsiYWRtaW4i<br>    XSwianRpIjoiNzJmOWYxNjItZjlhZS00Nzg5<br>    LWI4ZmItYzA2Nzg2YzM5MTM1IiwiY2xpZW50<br>    X2lkIjoiY2xpZW50MSJ9.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    fmNgfkfp9_7xuRLqbDx_Fr5FDKRQ90-YPduWUj7qzPM<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Token Type: bearer<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Expires In: 300<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    State: admin<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login-btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;login-btn&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 跳转到授权页面</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">`http://localhost:3001/oauth/authorize?client_id=client1&amp;redirect_uri=http://127.0.0.1:8080/index2&amp;grant_type=implicit&amp;response_type=token&amp;state=admin`</span>;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 检查 URL Fragment 中是否包含 access_token</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> hash = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 去掉开头的 #</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(hash); <span class="hljs-comment">// 创建 URLSearchParams 对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> accessToken = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;access_token&#x27;</span>); <span class="hljs-comment">// 获取 access_token</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> tokenType = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;token_type&#x27;</span>); <span class="hljs-comment">// 获取 token_type</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> expiresIn = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;expires_in&#x27;</span>); <span class="hljs-comment">// 获取 expires_in</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> state = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;state&#x27;</span>); <span class="hljs-comment">// 获取 state</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (accessToken) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Access Token:&#x27;</span>, accessToken);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Token Type:&#x27;</span>, tokenType);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Expires In:&#x27;</span>, expiresIn);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;State:&#x27;</span>, state);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 在这里你可以将 access_token 存储在本地存储或会话存储中</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;access_token&#x27;</span>, accessToken);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="请求示例">请求示例</h3><h5 id="授权码模式-authorization-code-2">授权码模式 - [authorization_code]</h5><h6 id="获取授权码">获取授权码</h6><blockquote><p>在OAuth2.0中，获取授权码的默认请求地址是<code>/oauth/authorize</code></p><p>所需的参数：</p><ol><li><code>response_type</code>：<code>code</code>。这是固定格式。</li><li><code>grant_type</code>：<code>authorization_code</code> -&gt; 认证类型：授权码模式。</li><li><code>client_id</code>：<code>client1</code>，客户端id，这是在认证服务器配置好的。只接受配置中存在的客户端。</li><li><code>redirect_uri</code>：回调地址，由后端接口接收回调返回的授权码等信息</li><li><code>scope</code>：【可选】作用域，资源服务器配置了用户可以访问的权限</li><li><code>state</code>：【可选】【推荐使用】随机字符串，用来验证信息，防止 CSRF 攻击。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试需直接在浏览器访问url地址，然后会进行登录操作，登录成功后，若是自动授权，则会直接触发回调地址，否则需用户手动授权后再触发回调地址。可以在后端回调地址的接口中看到授权码和state</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCodeByAuthorization_code</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault()) &#123;<br>        <span class="hljs-comment">// 创建 GET 请求</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:3001/oauth/authorize&quot;</span> +<br>                <span class="hljs-string">&quot;?response_type=code&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;redirect_uri=http://127.0.0.1:8080/callback&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;scope=scope1&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;state=admin&quot;</span>;<br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br><br>        <span class="hljs-comment">// 发送 GET 请求并检查重定向</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>            <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">302</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">redirectUrl</span> <span class="hljs-operator">=</span> response.getFirstHeader(<span class="hljs-string">&quot;Location&quot;</span>).getValue();<br>                System.out.println(<span class="hljs-string">&quot;Redirected to: &quot;</span> + redirectUrl);<br><br>                <span class="hljs-comment">// 手动提取授权码（示例）</span><br>                <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URI</span>(redirectUrl);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> uri.getQuery(); <span class="hljs-comment">// 示例: code=abc123&amp;state=admin</span><br>                System.out.println(<span class="hljs-string">&quot;Query: &quot;</span> + query);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Failed with HTTP error code: &quot;</span> + statusCode);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (URISyntaxException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="获取token和refresh-token">获取<code>token</code>和<code>refresh_token</code></h6><blockquote><p>在OAuth2.0中，用授权码获取<code>token</code>的默认请求地址是<code>/oauth/token</code></p><p>必需的参数：</p><ol><li><code>grant_type</code>：<code>authorization_code</code> -&gt; 认证类型：授权码模式。</li><li><code>client_id</code>：<code>client1</code>，客户端id，这是在认证服务器配置好的。只接受配置中存在的客户端。</li><li><code>client_secret</code>：<code>123123</code>，客户端密码，这是也在认证服务器配置好的，而且密码是加密的。</li><li><code>redirect_uri</code>：回调地址，由后端接口接收回调返回的<code>token</code>和<code>refresh_token</code>等信息</li><li><code>code</code>：授权码，服务器回调地址中返回的参数。</li><li><code>state</code>：随机字符串，用来验证信息，防止 CSRF 攻击（可选但推荐）。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// [授权码模式]  2、通过授权码获取token,有了授权码这里就可以运行后直接获取token了</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                <span class="hljs-string">&quot;?grant_type=authorization_code&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_secret=123123&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;redirect_uri=http://127.0.0.1:8080/callback&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;code=nTzOq3&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;state=admin&quot;</span>;<br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>        <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>        System.out.println(response.getStatusLine().getStatusCode());<br>        <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(result);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="使用refresh-token换取新token">使用<code>refresh_token</code>换取新<code>token</code></h6><blockquote><p>在OAuth2.0中，用<code>refresh_token</code>获取<code>token</code>的默认请求地址是<code>/oauth/token</code></p><p>所需的参数：</p><ol><li><code>grant_type</code>：<code>refresh_token</code> -&gt; 认证类型：刷新<code>token</code>。</li><li><code>refresh_token</code>：通过时效长的<code>refresh_token</code>换取<code>token</code>。</li><li><code>scope</code>：[可选项]，默认会以上次token的作用域一致。认证服务器会设置资源服务器中的所有范围，每个资源服务器会设置自己的范围。例如：资源服务器的范围为<code>scope1</code>，若这里的参数是<code>scope2</code>则无法访问资源1中的数据。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByRefresh_token</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                <span class="hljs-string">&quot;?grant_type=refresh_token&quot;</span> + <span class="hljs-string">&quot;&amp;refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIl0sImF0aSI6Ijk2ZjgyYzFlLTczZWQtNDRkOC04M2RkLWQ0NmJhOTQ2OGU5NiIsImV4cCI6MTcyOTY3MTM4OSwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiMzM1MjBhMGEtNTQzYy00MGI2LTgyMzItMTU0NDI1NGU5YWEzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.3wr1xfyKYpe9XN3z48Qz5Ya22Upn4SzW1VM9q5PYAac&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;scope=scope1&quot;</span>;<br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(<span class="hljs-string">&quot;client1:123123&quot;</span>.getBytes(StandardCharsets.UTF_8));<br>        httpGet.setHeader(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-string">&quot;Basic &quot;</span>+s);<br>        <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>        System.out.println(response.getStatusLine().getStatusCode());<br>        <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(result);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>授权的<code>scope</code>不对应资源服务器中的<code>scope</code>请求所返回的错误信息：</p><p>以下是授权范围为<code>scope1</code>，却要访问<code>scope2</code>的情况</p><blockquote><p>08:41:30.962 [main] INFO com.gargoylesoftware.htmlunit.WebClient - statusCode=[403] contentType=[application/json]<br>08:41:30.964 [main] INFO com.gargoylesoftware.htmlunit.WebClient - {“error”:“insufficient_scope”,“error_description”:“Insufficient scope for this resource”,“scope”:“scope1”}<br>08:41:30.964 [main] DEBUG com.gargoylesoftware.htmlunit.WebWindowImpl - setEnclosedPage: com.gargoylesoftware.htmlunit.UnexpectedPage@6326d182<br>08:41:30.964 [main] DEBUG com.gargoylesoftware.htmlunit.WebWindowImpl - destroyChildren</p></blockquote><h5 id="简单模式-implicit-2">简单模式 - [implicit]</h5><blockquote><p>简单模式下，若接收请求的方法不包含GET请求，则会弹出登录框，成功登录后，若开启了自动授权，则可以直接获取到<code>token</code>，简单模式下没有<code>refresh_token</code>，到期后需重新请求。但是返回的回调地址只能由前端处理，只因地址参数是#开头的Fragment参数，token也在回调地址的参数中。</p><p>所需的参数：</p><ol><li><code>grant_type</code>：<code>implicit</code> -&gt; 认证类型：简单模式【固定搭配】。</li><li><code>client_id</code>：<code>client1</code>，客户端id，这是在认证服务器配置好的。只接受配置中存在的客户端。</li><li><code>response_type</code>：<code>token</code>固定搭配。</li><li><code>state</code>：随机字符串，用来验证信息，防止 CSRF 攻击（可选但推荐）。</li><li><code>redirect_uri</code>：这是返回给前端的回调地址。</li></ol></blockquote><p>前端页面示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 此页面的地址是http://127.0.0.1:8080/index2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>点击Test后，弹出表单登录，登录成功会返回到此页面，然后控制台会输出如下内容：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Access Token:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJf<br>    bmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2Nv<br>    cGUxIiwic2NvcGUyIl0sImV4cCI6MTcyOTgy<br>    MzI4NCwiYXV0aG9yaXRpZXMiOlsiYWRtaW4i<br>    XSwianRpIjoiNzJmOWYxNjItZjlhZS00Nzg5<br>    LWI4ZmItYzA2Nzg2YzM5MTM1IiwiY2xpZW50<br>    X2lkIjoiY2xpZW50MSJ9.<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    fmNgfkfp9_7xuRLqbDx_Fr5FDKRQ90-YPduWUj7qzPM<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Token Type: bearer<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Expires In: 300<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    State: admin<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login-btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;login-btn&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 跳转到授权页面</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">`http://localhost:3001/oauth/authorize?client_id=client1&amp;redirect_uri=http://127.0.0.1:8080/index2&amp;grant_type=implicit&amp;response_type=token&amp;state=admin`</span>;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 检查 URL Fragment 中是否包含 access_token</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> hash = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 去掉开头的 #</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(hash); <span class="hljs-comment">// 创建 URLSearchParams 对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> accessToken = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;access_token&#x27;</span>); <span class="hljs-comment">// 获取 access_token</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> tokenType = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;token_type&#x27;</span>); <span class="hljs-comment">// 获取 token_type</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> expiresIn = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;expires_in&#x27;</span>); <span class="hljs-comment">// 获取 expires_in</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> state = params.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;state&#x27;</span>); <span class="hljs-comment">// 获取 state</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (accessToken) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Access Token:&#x27;</span>, accessToken);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Token Type:&#x27;</span>, tokenType);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Expires In:&#x27;</span>, expiresIn);</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;State:&#x27;</span>, state);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 在这里你可以将 access_token 存储在本地存储或会话存储中</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;access_token&#x27;</span>, accessToken);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="密码模式-password-2">密码模式 - [password]</h5><blockquote><p>密码模式下，不会弹出登录表单，若开启了自动授权，则可以直接获取到<code>token</code>，到期后需重新请求。</p><p>所需的参数：</p><ol><li><code>grant_type</code>：<code>password</code> -&gt; 认证类型：密码模式【固定搭配】。</li><li><code>client_id</code>：<code>client1</code>，客户端id，这是在认证服务器配置好的。只接受配置中存在的客户端。</li><li><code>client_secret</code>：<code>123123</code>固定搭配，与认证服务器中配置的客户端密码一致。</li><li><code>username</code>：用户名。</li><li><code>password</code>：用户密码。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByPassword</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                <span class="hljs-string">&quot;?grant_type=password&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_secret=123123&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;username=admin&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;password=admin&quot;</span>;<br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>        <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>        System.out.println(response.getStatusLine().getStatusCode());<br>        <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(result);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="客户端模式-client-credentials-2">客户端模式 - [client_credentials]</h5><blockquote><p>主要用于服务器与服务器的通信，不涉及前端。请求后可以直接获得<code>token</code></p><p>所需的参数：</p><ol><li><code>grant_type</code>：<code>client_credentials</code> -&gt; 认证类型：客户端模式【固定搭配】。</li><li><code>client_id</code>：<code>client1</code>，客户端id，这是在认证服务器配置好的。只接受配置中存在的客户端。</li><li><code>client_secret</code>：<code>123123</code>固定搭配，与认证服务器中配置的客户端密码一致。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                <span class="hljs-string">&quot;?grant_type=client_credentials&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                <span class="hljs-string">&quot;&amp;client_secret=123123&quot;</span>;<br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>        <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>        System.out.println(response.getStatusLine().getStatusCode());<br>        <span class="hljs-keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            System.out.println(result);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;===========&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        System.out.println();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">返回数据示例：</span><br><span class="hljs-comment">&#123;&quot;access_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInNjb3BlIjpbInNjb3BlMSIsInNjb3BlMiJdLCJleHAiOjE3Mjk4Mjc2NTgsImp0aSI6IjRjOGUwODdiLTZiOWQtNGY4Mi1iNTdiLWQxMDQ3Njk4MDQ5MiIsImNsaWVudF9pZCI6ImNsaWVudDEifQ.LS1zjDPuygQBu59y1SRaYvhYL-kNV5-TTrI0_x16QdY&quot;,&quot;token_type&quot;:&quot;bearer&quot;,&quot;expires_in&quot;:299,&quot;scope&quot;:&quot;scope1 scope2&quot;,&quot;jti&quot;:&quot;4c8e087b-6b9d-4f82-b57b-d10476980492&quot;&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">数据属性解释：</span><br><span class="hljs-comment">access_token：即所需的token令牌</span><br><span class="hljs-comment">token_type: bearer &gt;&gt; token类型，即token的存储格式为：(&quot;Authorization&quot;,&quot;bearer access_token的值&quot;);</span><br><span class="hljs-comment">expires_in：有效时间 300秒，这时间可以在认证服务器配置</span><br><span class="hljs-comment">scope：授权范围</span><br><span class="hljs-comment">jti: jwt的唯一id值</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs js">package lee;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">gargoylesoftware</span>.<span class="hljs-property">htmlunit</span>.<span class="hljs-property">HttpMethod</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">HttpResponse</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">client</span>.<span class="hljs-property">HttpClient</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">client</span>.<span class="hljs-property">config</span>.<span class="hljs-property">RequestConfig</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">client</span>.<span class="hljs-property">entity</span>.<span class="hljs-property">UrlEncodedFormEntity</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">client</span>.<span class="hljs-property">methods</span>.<span class="hljs-property">CloseableHttpResponse</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">client</span>.<span class="hljs-property">methods</span>.<span class="hljs-property">HttpGet</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">client</span>.<span class="hljs-property">methods</span>.<span class="hljs-property">HttpPost</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">impl</span>.<span class="hljs-property">client</span>.<span class="hljs-property">CloseableHttpClient</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">impl</span>.<span class="hljs-property">client</span>.<span class="hljs-property">DefaultHttpClient</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">impl</span>.<span class="hljs-property">client</span>.<span class="hljs-property">HttpClients</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">message</span>.<span class="hljs-property">BasicNameValuePair</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">params</span>.<span class="hljs-property">BasicHttpParams</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">params</span>.<span class="hljs-property">HttpParams</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">apache</span>.<span class="hljs-property">http</span>.<span class="hljs-property">util</span>.<span class="hljs-property">EntityUtils</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">junit</span>.<span class="hljs-property">jupiter</span>.<span class="hljs-property">api</span>.<span class="hljs-property">Test</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">IOException</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">net</span>.<span class="hljs-property">URI</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">net</span>.<span class="hljs-property">URISyntaxException</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">nio</span>.<span class="hljs-property">charset</span>.<span class="hljs-property">StandardCharsets</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Base64</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">TT</span> &#123;<br><br>    <span class="hljs-comment">// 认证服务器地址</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> authorization_server = <span class="hljs-string">&quot;http://127.0.0.1:3001/&quot;</span>;<br><span class="hljs-comment">// 资源服务器地址</span><br>    public <span class="hljs-keyword">static</span> <span class="hljs-title class_">String</span> resource_server = <span class="hljs-string">&quot;http://127.0.0.1:4001/&quot;</span>;<br><br><br>    <span class="hljs-comment">// [授权码模式]  1、获取授权码  http://localhost:3001/oauth/authorize?response_type=code&amp;client_id=client1&amp;redirect_uri=http://127.0.0.1:8080/callback&amp;scope=scope1&amp;state=admin</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCodeByAuthorization_code</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-title class_">CloseableHttpClient</span> httpClient = <span class="hljs-title class_">HttpClients</span>.<span class="hljs-title function_">createDefault</span>()) &#123;<br>            <span class="hljs-comment">// 创建 GET 请求</span><br>            <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;http://localhost:3001/oauth/authorize&quot;</span> +<br>                    <span class="hljs-string">&quot;?response_type=code&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;redirect_uri=http://127.0.0.1:8080/callback&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;scope=scope1&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;state=admin&quot;</span>;<br>            <span class="hljs-title class_">HttpGet</span> httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br><br>            <span class="hljs-comment">// 发送 GET 请求并检查重定向</span><br>            <span class="hljs-keyword">try</span> (<span class="hljs-title class_">CloseableHttpResponse</span> response = httpClient.<span class="hljs-title function_">execute</span>(httpGet)) &#123;<br>                int statusCode = response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>();<br>                <span class="hljs-keyword">if</span> (statusCode == <span class="hljs-number">302</span>) &#123;<br>                    <span class="hljs-title class_">String</span> redirectUrl = response.<span class="hljs-title function_">getFirstHeader</span>(<span class="hljs-string">&quot;Location&quot;</span>).<span class="hljs-title function_">getValue</span>();<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Redirected to: &quot;</span> + redirectUrl);<br><br>                    <span class="hljs-comment">// 手动提取授权码（示例）</span><br>                    <span class="hljs-variable constant_">URI</span> uri = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URI</span>(redirectUrl);<br>                    <span class="hljs-title class_">String</span> query = uri.<span class="hljs-title function_">getQuery</span>(); <span class="hljs-comment">// 示例: code=abc123&amp;state=admin</span><br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Query: &quot;</span> + query);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Failed with HTTP error code: &quot;</span> + statusCode);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">URISyntaxException</span> e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// [授权码模式]  2、通过授权码获取token</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByCode</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">String</span>[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;client_id&quot;</span>, <span class="hljs-string">&quot;client1&quot;</span>,<br>                <span class="hljs-string">&quot;client_secret&quot;</span>, <span class="hljs-string">&quot;123123&quot;</span>,<br>                <span class="hljs-string">&quot;&amp;redirect_uri=http://127.0.0.1:8080/index&quot;</span> +<br>                <span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;LSji7Z&quot;</span>,<br>                <span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>,<br>                <span class="hljs-string">&quot;grant_type&quot;</span>, <span class="hljs-string">&quot;authorization_code&quot;</span><br>        &#125;;<br>        <span class="hljs-comment">//HttpUtil.send(HttpMethod.POST, authorization_server + &quot;oauth/authorize&quot;, null, null, params);</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-title class_">CloseableHttpClient</span> httpClient = <span class="hljs-title class_">HttpClients</span>.<span class="hljs-title function_">createDefault</span>())&#123;<br>            <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                    <span class="hljs-string">&quot;?grant_type=authorization_code&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;client_secret=123123&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;redirect_uri=http://127.0.0.1:8080/callback&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;code=nTzOq3&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;state=admin&quot;</span>;<br>            <span class="hljs-title class_">HttpPost</span> httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><span class="hljs-comment">//            httpGet.setURI(new URI(authorization_server + &quot;oauth/token&quot;));</span><br><span class="hljs-comment">//            HttpParams httpParams = httpClient.getParams();</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;client_id&quot;, &quot;client1&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;client_secret&quot;, &quot;123123&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;code&quot;, &quot;Lcb0mj&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;grant_type&quot;, &quot;authorization_code&quot;);</span><br><span class="hljs-comment">//            httpGet.setParams(httpParams);</span><br>            <span class="hljs-title class_">HttpResponse</span> response = httpClient.<span class="hljs-title function_">execute</span>(httpGet);<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>());<br>            <span class="hljs-keyword">if</span> (response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title class_">String</span> result = <span class="hljs-title class_">EntityUtils</span>.<span class="hljs-title function_">toString</span>(response.<span class="hljs-title function_">getEntity</span>(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(result);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;===========&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// [更新token]</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByRefresh_token</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">String</span>[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;grant_type&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>,<br>                <span class="hljs-string">&quot;refresh_token&quot;</span>, <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIl0sImF0aSI6Ijk2ZjgyYzFlLTczZWQtNDRkOC04M2RkLWQ0NmJhOTQ2OGU5NiIsImV4cCI6MTcyOTY3MTM4OSwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiMzM1MjBhMGEtNTQzYy00MGI2LTgyMzItMTU0NDI1NGU5YWEzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.3wr1xfyKYpe9XN3z48Qz5Ya22Upn4SzW1VM9q5PYAac&quot;</span>,<br>                <span class="hljs-string">&quot;scope&quot;</span>, <span class="hljs-string">&quot;scope1&quot;</span><br>        &#125;;<br>        <span class="hljs-comment">//HttpUtil.send(HttpMethod.POST, authorization_server + &quot;oauth/token&quot;, null, null, params);</span><br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-title class_">CloseableHttpClient</span> httpClient = <span class="hljs-title class_">HttpClients</span>.<span class="hljs-title function_">createDefault</span>())&#123;<br>            <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                    <span class="hljs-string">&quot;?grant_type=refresh_token&quot;</span> +<br><span class="hljs-comment">//                    &quot;&amp;client_id=client1&quot; +</span><br><span class="hljs-comment">//                    &quot;&amp;client_secret=123123&quot; +</span><br>                    <span class="hljs-string">&quot;&amp;refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIl0sImF0aSI6Ijk2ZjgyYzFlLTczZWQtNDRkOC04M2RkLWQ0NmJhOTQ2OGU5NiIsImV4cCI6MTcyOTY3MTM4OSwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiMzM1MjBhMGEtNTQzYy00MGI2LTgyMzItMTU0NDI1NGU5YWEzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.3wr1xfyKYpe9XN3z48Qz5Ya22Upn4SzW1VM9q5PYAac&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;scope=scope1&quot;</span>;<br>            <span class="hljs-title class_">HttpPost</span> httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br>            <span class="hljs-title class_">String</span> s = <span class="hljs-title class_">Base64</span>.<span class="hljs-title function_">getEncoder</span>().<span class="hljs-title function_">encodeToString</span>(<span class="hljs-string">&quot;client1:123123&quot;</span>.<span class="hljs-title function_">getBytes</span>(<span class="hljs-title class_">StandardCharsets</span>.<span class="hljs-property">UTF_8</span>));<br>            httpGet.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-string">&quot;Basic &quot;</span>+s);<br><span class="hljs-comment">//            httpGet.setURI(new URI(authorization_server + &quot;oauth/token&quot;));</span><br><span class="hljs-comment">//            HttpParams httpParams = httpClient.getParams();</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;client_id&quot;, &quot;client1&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;client_secret&quot;, &quot;123123&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;code&quot;, &quot;Lcb0mj&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;grant_type&quot;, &quot;authorization_code&quot;);</span><br><span class="hljs-comment">//            httpGet.setParams(httpParams);</span><br>            <span class="hljs-title class_">HttpResponse</span> response = httpClient.<span class="hljs-title function_">execute</span>(httpGet);<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>());<br>            <span class="hljs-keyword">if</span> (response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title class_">String</span> result = <span class="hljs-title class_">EntityUtils</span>.<span class="hljs-title function_">toString</span>(response.<span class="hljs-title function_">getEntity</span>(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(result);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;===========&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            &quot;access_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTU4MjcwMzYxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYjA5MDFlZDYtOTNjMC00MjhjLTg2MzEtMTBiZWY4ZmJkZTYzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.kogkaxd1x-XkfqIR8avqSL5y6caa0Kk_DFWjepjVO70&quot;,</span><br><span class="hljs-comment">            &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="hljs-comment">            &quot;refresh_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImF0aSI6ImIwOTAxZWQ2LTkzYzAtNDI4Yy04NjMxLTEwYmVmOGZiZGU2MyIsImV4cCI6MTU4MjcwNDgxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiOThmYTc3NDQtNTU4ZS00MjI0LThmYjEtZThiNGY3ZjNlNGE5IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.Ex8rX6eMfXr7_pmC6sftIfIvFExyjx4_lzRYZqWHeII&quot;,</span><br><span class="hljs-comment">            &quot;expires_in&quot;:299,</span><br><span class="hljs-comment">            &quot;scope&quot;:&quot;scope1 scope2&quot;,</span><br><span class="hljs-comment">            &quot;jti&quot;:&quot;b0901ed6-93c0-428c-8631-10bef8fbde63&quot;</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br><br>    <span class="hljs-comment">// [密码模式] 获取jwt token,把用户信息加密成token,服务端不存储token、 通过密码方式获取令牌  code: Lcb0mj state: admin</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByPassword</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">String</span>[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;client_id&quot;</span>, <span class="hljs-string">&quot;client1&quot;</span>,<br>                <span class="hljs-string">&quot;client_secret&quot;</span>, <span class="hljs-string">&quot;123123&quot;</span>,<br>                <span class="hljs-string">&quot;grant_type&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>,<br>                <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>,<br>                <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span><br>        &#125;;<br>        <span class="hljs-title class_">HttpUtil</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">HttpMethod</span>.<span class="hljs-property">POST</span>, authorization_server + <span class="hljs-string">&quot;oauth/token&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, params);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            &quot;access_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTU4MjcwMzYxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYjA5MDFlZDYtOTNjMC00MjhjLTg2MzEtMTBiZWY4ZmJkZTYzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.kogkaxd1x-XkfqIR8avqSL5y6caa0Kk_DFWjepjVO70&quot;,</span><br><span class="hljs-comment">            &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="hljs-comment">            &quot;refresh_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImF0aSI6ImIwOTAxZWQ2LTkzYzAtNDI4Yy04NjMxLTEwYmVmOGZiZGU2MyIsImV4cCI6MTU4MjcwNDgxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiOThmYTc3NDQtNTU4ZS00MjI0LThmYjEtZThiNGY3ZjNlNGE5IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.Ex8rX6eMfXr7_pmC6sftIfIvFExyjx4_lzRYZqWHeII&quot;,</span><br><span class="hljs-comment">            &quot;expires_in&quot;:299,</span><br><span class="hljs-comment">            &quot;scope&quot;:&quot;scope1 scope2&quot;,</span><br><span class="hljs-comment">            &quot;jti&quot;:&quot;b0901ed6-93c0-428c-8631-10bef8fbde63&quot;</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br><br>    <span class="hljs-comment">// [简单模式]</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByImplicit</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">String</span>[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;client_id&quot;</span>, <span class="hljs-string">&quot;client1&quot;</span>,<br>                <span class="hljs-string">&quot;client_secret&quot;</span>, <span class="hljs-string">&quot;123123&quot;</span>,<br>                <span class="hljs-string">&quot;redirect_uri&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:8080/index2&quot;</span>,<br>                <span class="hljs-string">&quot;grant_type&quot;</span>, <span class="hljs-string">&quot;implicit&quot;</span>,<br>                <span class="hljs-string">&quot;response_type&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>,<br>                <span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span><br>        &#125;;<br>        <span class="hljs-title class_">HttpUtil</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">HttpMethod</span>.<span class="hljs-property">POST</span>, authorization_server + <span class="hljs-string">&quot;oauth/authorize&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, params);<br>        <span class="hljs-comment">// http://localhost:3001/oauth/authorize?client_id=client1&amp;redirect_uri=http://127.0.0.1:8080/index2&amp;grant_type=implicit&amp;response_type=token&amp;state=admin</span><br><br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-title class_">CloseableHttpClient</span> httpClient = <span class="hljs-title class_">HttpClients</span>.<span class="hljs-title function_">createDefault</span>())&#123;<br>            <span class="hljs-title class_">String</span> url = <span class="hljs-string">&quot;http://localhost:3001/oauth/token&quot;</span> +<br>                    <span class="hljs-string">&quot;?grant_type=implicit&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;client_id=client1&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;client_secret=123123&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;response_type=token&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;state=admin&quot;</span> +<br>                    <span class="hljs-string">&quot;&amp;redirect_uri=http://127.0.0.1:8080/index2&quot;</span>;<br>            <span class="hljs-title class_">HttpPost</span> httpGet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><span class="hljs-comment">//            httpGet.setURI(new URI(authorization_server + &quot;oauth/token&quot;));</span><br><span class="hljs-comment">//            HttpParams httpParams = httpClient.getParams();</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;client_id&quot;, &quot;client1&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;client_secret&quot;, &quot;123123&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;code&quot;, &quot;Lcb0mj&quot;);</span><br><span class="hljs-comment">//            httpParams.setParameter(&quot;grant_type&quot;, &quot;authorization_code&quot;);</span><br><span class="hljs-comment">//            httpGet.setParams(httpParams);</span><br>            <span class="hljs-title class_">HttpResponse</span> response = httpClient.<span class="hljs-title function_">execute</span>(httpGet);<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>());<br>            <span class="hljs-keyword">if</span> (response.<span class="hljs-title function_">getStatusLine</span>().<span class="hljs-title function_">getStatusCode</span>() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-title class_">String</span> result = <span class="hljs-title class_">EntityUtils</span>.<span class="hljs-title function_">toString</span>(response.<span class="hljs-title function_">getEntity</span>(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(result);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;===========&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e)&#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br>        &#125;<br>        <span class="hljs-comment">//  http://127.0.0.1:8080/index2#access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIl0sImV4cCI6MTcyOTY3MzU1MiwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiNmRkNmFlM2QtMmNlMi00YzJhLTliNTMtMzI5NzhiOGQxNTQ0IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.YIn13yRxIrWMFiPuiO6lBAUDsG0BSAeAvqjSn_b6pj4&amp;token_type=bearer&amp;state=admin&amp;expires_in=299&amp;scope=scope1&amp;jti=6dd6ae3d-2ce2-4c2a-9b53-32978b8d1544</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            &quot;access_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTU4MjcwMzYxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYjA5MDFlZDYtOTNjMC00MjhjLTg2MzEtMTBiZWY4ZmJkZTYzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.kogkaxd1x-XkfqIR8avqSL5y6caa0Kk_DFWjepjVO70&quot;,</span><br><span class="hljs-comment">            &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="hljs-comment">            &quot;refresh_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImF0aSI6ImIwOTAxZWQ2LTkzYzAtNDI4Yy04NjMxLTEwYmVmOGZiZGU2MyIsImV4cCI6MTU4MjcwNDgxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiOThmYTc3NDQtNTU4ZS00MjI0LThmYjEtZThiNGY3ZjNlNGE5IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.Ex8rX6eMfXr7_pmC6sftIfIvFExyjx4_lzRYZqWHeII&quot;,</span><br><span class="hljs-comment">            &quot;expires_in&quot;:299,</span><br><span class="hljs-comment">            &quot;scope&quot;:&quot;scope1 scope2&quot;,</span><br><span class="hljs-comment">            &quot;jti&quot;:&quot;b0901ed6-93c0-428c-8631-10bef8fbde63&quot;</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br><br>    <span class="hljs-comment">// [客户端模式] 这个不属于OAuth2用户认证范围</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTokenByClient</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-title class_">String</span>[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;client_id&quot;</span>, <span class="hljs-string">&quot;client1&quot;</span>,<br>                <span class="hljs-string">&quot;client_secret&quot;</span>, <span class="hljs-string">&quot;123123&quot;</span>,<br>                <span class="hljs-string">&quot;grant_type&quot;</span>, <span class="hljs-string">&quot;client_credentials&quot;</span><br>        &#125;;<br>        <span class="hljs-title class_">HttpUtil</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">HttpMethod</span>.<span class="hljs-property">POST</span>, authorization_server + <span class="hljs-string">&quot;oauth/token&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, params);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            &quot;access_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTU4MjcwMzYxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYjA5MDFlZDYtOTNjMC00MjhjLTg2MzEtMTBiZWY4ZmJkZTYzIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.kogkaxd1x-XkfqIR8avqSL5y6caa0Kk_DFWjepjVO70&quot;,</span><br><span class="hljs-comment">            &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="hljs-comment">            &quot;refresh_token&quot;:&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImF0aSI6ImIwOTAxZWQ2LTkzYzAtNDI4Yy04NjMxLTEwYmVmOGZiZGU2MyIsImV4cCI6MTU4MjcwNDgxMywiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiOThmYTc3NDQtNTU4ZS00MjI0LThmYjEtZThiNGY3ZjNlNGE5IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.Ex8rX6eMfXr7_pmC6sftIfIvFExyjx4_lzRYZqWHeII&quot;,</span><br><span class="hljs-comment">            &quot;expires_in&quot;:299,</span><br><span class="hljs-comment">            &quot;scope&quot;:&quot;scope1 scope2&quot;,</span><br><span class="hljs-comment">            &quot;jti&quot;:&quot;b0901ed6-93c0-428c-8631-10bef8fbde63&quot;</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br><br>    <span class="hljs-comment">//  验证jwt token</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkToken</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br><span class="hljs-comment">//        String[] params = new String[]&#123;</span><br><span class="hljs-comment">//                &quot;token&quot;, &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTU4MjcwODk0MCwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYjMyYjJjNmMtODE5NS00NTRkLTkwMDktOTljOGZlNDBjNDAxIiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.B4MJx52y1o2E9k5cG1MxlQjDRUvkEOBk0SvLg_hNg9M&quot;,</span><br><span class="hljs-comment">//        &#125;;</span><br><br>        <span class="hljs-title class_">String</span>[] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<br>                <span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTcyOTQ5MjczMSwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiZThhNTU5YTAtZjYyNS00ZWVjLWJhZTUtOGQ5NWQ4MjAxY2M5IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.vyh3SnfnAiZQKO23BPej8lebkFw-CLELOL-SHPb-Qo0&quot;</span>,<br>        &#125;;<br>        <span class="hljs-title class_">HttpUtil</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">HttpMethod</span>.<span class="hljs-property">POST</span>, authorization_server + <span class="hljs-string">&quot;oauth/check_token&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, params);<br>        <span class="hljs-comment">//&#123;&quot;aud&quot;:[&quot;resource1&quot;],&quot;user_name&quot;:&quot;admin&quot;,&quot;scope&quot;:[&quot;scope1&quot;,&quot;scope2&quot;],&quot;active&quot;:true,&quot;exp&quot;:1582703613,&quot;authorities&quot;:[&quot;admin&quot;],&quot;jti&quot;:&quot;b0901ed6-93c0-428c-8631-10bef8fbde63&quot;,&quot;client_id&quot;:&quot;client1&quot;&#125;</span><br>    &#125;<br><br>    <span class="hljs-comment">//  使用jwt token访问resource</span><br>    @<span class="hljs-title class_">Test</span><br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">getResourceByToken</span>() throws <span class="hljs-title class_">IOException</span> &#123;<br>        <span class="hljs-comment">//Map&lt;String, String&gt; head = RootUtil.buildMap(&quot;Authorization&quot;, &quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTU4MjcxMjk0MSwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYzBiMTYzOGUtOThjNS00NTU2LTk0ZmMtYTgyNTE3NDhhYzM5IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.l_j9s5XYz3NfrvI-Hky19V-P9vRz9U4Q1Ltkep5Up9Q&quot;);</span><br><br>        <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; head = <span class="hljs-title class_">RootUtil</span>.<span class="hljs-title function_">buildMap</span>(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzb3VyY2UxIl0sInVzZXJfbmFtZSI6ImFkbWluIiwic2NvcGUiOlsic2NvcGUxIiwic2NvcGUyIl0sImV4cCI6MTcyOTczODM3OCwiYXV0aG9yaXRpZXMiOlsiYWRtaW4iXSwianRpIjoiYTlkOTZkOTEtMjNiNC00Y2ZhLWE2YzctZGY5YWZiZTU0OTg0IiwiY2xpZW50X2lkIjoiY2xpZW50MSJ9.QZDoar_8oLe-F1eepbwTrjtemSPZdB89fSJxXysbiLQ&quot;</span>);<br><br>        <span class="hljs-title class_">HttpUtil</span>.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">HttpMethod</span>.<span class="hljs-property">POST</span>,resource_server + <span class="hljs-string">&quot;/me&quot;</span>,head,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>授权与验证</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jwt</tag>
      
      <tag>OAuth2.0</tag>
      
      <tag>SpringSecurity</tag>
      
      <tag>SSO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Security笔记</title>
    <link href="/2024/10/18/SpringSecurity%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/10/18/SpringSecurity%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Security">Spring-Security</h2><h3 id="一、配置类方法">一、配置类方法</h3><h4 id="1、Maven依赖">1、Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  springboot整合security的依赖[必选]  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  jwt令牌依赖[非必选]  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、配置类">2、配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.config;<br><br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-comment">// 此处需自定义类实现此接口后才能注入</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserDetailsService userDetailsService;<br><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 安全策略 &gt;&gt; 跨域资源访问和跨站请求伪造 &gt;&gt; 禁用 [可选]</span><br>        http.cors().and().csrf().disable();<br><br>        <span class="hljs-comment">// 自定义无权限访问的403页面</span><br>        http.exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/403&quot;</span>);<br>        <br>        <span class="hljs-comment">// 无需认证即可访问的路径</span><br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll()<br>                .anyRequest().authenticated();<br><br>        http.formLogin() <span class="hljs-comment">// 开启表单登录</span><br>            .loginPage(<span class="hljs-string">&quot;/login&quot;</span>) <span class="hljs-comment">// 自定义的登录页路径</span><br>            .loginProcessingUrl(<span class="hljs-string">&quot;/user/login&quot;</span>) <span class="hljs-comment">// 前端表单的提交路径[action]，且提交方式必须为[POST]</span><br>            .defaultSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>)<span class="hljs-comment">// 成功后默认跳转的路径：例如首页</span><br>            .failureUrl(<span class="hljs-string">&quot;/logout&quot;</span>)<span class="hljs-comment">// 失败后跳转的路径：例如返回登录页</span><br>            .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-comment">// 用户名参数，若参数名非username，则需要配置此项</span><br>            .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>) <span class="hljs-comment">// 密码参数，若参数名非password，则需要配置此项</span><br>            .successHandler() <span class="hljs-comment">// 成功的后续处理方法 &gt;&gt; 需要自定义方法并实现接口AuthenticationSuccessHandler() 例如生成jwt令牌等</span><br>            .failureHandler(); <span class="hljs-comment">//  成功的后续处理方法 &gt;&gt; 需要自定义方法并实现接口 例如返回错误信息</span><br>http.logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>). <span class="hljs-comment">//自定义退出登录</span><br>                logoutSuccessUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//这里要设置自定义认证  &gt;&gt;&gt;  自定义认证策略</span><br>        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置加密类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> SecurityConfig</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.config</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、自定义认证类">3、自定义认证类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.service;<br><br><span class="hljs-keyword">import</span> com.example.domain.User;<br><span class="hljs-keyword">import</span> com.example.mapper.UserMapper;<br><span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义认证类 &gt;&gt; 可通过查询数据库来认证登录用户</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">userDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;<br><br>    <span class="hljs-comment">// 构造器注入的Mapper类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">// 登录的用户名需要与这里的相同 &gt;&gt; 这里为了测试，简化了操作</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;<br>        <span class="hljs-comment">// 用户角色不能为空</span><br>        List&lt;GrantedAuthority&gt; grantedAuthorities = AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(username);<br>        user.setPassword(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>().encode(<span class="hljs-string">&quot;123456&quot;</span>));<span class="hljs-comment">// 加密密码</span><br><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), grantedAuthorities);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4、用户实体类">4、用户实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.domain;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-meta">@TableId</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <br>    <br>    <span class="hljs-keyword">private</span> String role;  <span class="hljs-comment">// 单角色</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; roles; <span class="hljs-comment">// 多角色版</span><br>    <br>    <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取用户角色</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> User</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.domain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回用户的所有角色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <br>        <span class="hljs-comment">// 单角色版</span><br>        <span class="hljs-comment">//return AuthorityUtils.commaSeparatedStringToAuthorityList(this.role);</span><br>        <br>        <span class="hljs-comment">// 多角色版</span><br>        <span class="hljs-keyword">return</span> roles.stream()<br>                .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)<br>                .collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断账户是否到期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> User</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.domain</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断账户是否未锁定</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> User</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.domain</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断凭证是否到期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> User</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.domain</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否可用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/7</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> User</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@packageName</span> com.example.domain</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、自定义登录后续处理器">5、自定义登录后续处理器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.service;<br><br><span class="hljs-keyword">import</span> com.example.utils.JwtTokenUtil;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomAuthenticationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span>, AuthenticationFailureHandler &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenUtil jwtTokenUtil;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">                                        Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 这里可以添加登录成功后的处理逻辑</span><br>        <span class="hljs-comment">// 例如返回 JWT token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> authentication.getName(); <span class="hljs-comment">// 获取用户名</span><br><br>        <span class="hljs-comment">// 生成 JWT</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtTokenUtil.generateToken(username); <br><br>        <span class="hljs-comment">// 设置返回的内容类型为 JSON</span><br>        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        response.setStatus(HttpServletResponse.SC_OK);<br>        <br>        <span class="hljs-comment">// 返回 JWT token</span><br>        response.getWriter().write(<span class="hljs-string">&quot;&#123;\&quot;token\&quot;: \&quot;&quot;</span> + token + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>        response.getWriter().flush();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> 登录失败后的处理逻辑  &gt;&gt;  例如统计失败次数等等</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6、配置文件">6、配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>  <br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据库连接池</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 数据库驱动名称</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-comment"># 密码</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-comment"># 地址</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/demo?characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span><br><br><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># mybatis-plus配置</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-comment"># 类别名指定包</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.example.entity</span><br><br>  <span class="hljs-comment"># 全局配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-comment"># 数据库配置</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment"># 逻辑未删除的值</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment"># 逻辑删除的值</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 逻辑删除指定属性字段</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span><br><br><br><br><span class="hljs-attr">jwt:</span> <span class="hljs-comment"># jwt配置</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">key</span>   <span class="hljs-comment"># 加密密文</span><br>  <span class="hljs-attr">expiration:</span> <span class="hljs-number">3600000</span>  <span class="hljs-comment"># 1 hour in milliseconds</span><br></code></pre></td></tr></table></figure><h4 id="7、jwt工具类">7、jwt工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.utils;<br><br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenUtil</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> expiration;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">extractUsername</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getSubject);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">extractExpiration</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractClaim(token, Claims::getExpiration);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">extractClaim</span><span class="hljs-params">(String token, Function&lt;Claims, T&gt; claimsResolver)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> extractAllClaims(token);<br>        <span class="hljs-keyword">return</span> claimsResolver.apply(claims);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Claims <span class="hljs-title function_">extractAllClaims</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Boolean <span class="hljs-title function_">isTokenExpired</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">return</span> extractExpiration(token).before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String userDetails)</span> &#123;<br>        Map&lt;String, Object&gt; claims = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">return</span> createToken(claims, userDetails);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(Map&lt;String, Object&gt; claims, String subject)</span> &#123;<br>        <span class="hljs-keyword">return</span> Jwts.builder()<br>                .setClaims(claims)<br>                .setSubject(subject)<br>                .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + expiration))<br>                .signWith(SignatureAlgorithm.HS256, secret)<br>                .compact();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">validateToken</span><span class="hljs-params">(String token, UserDetails userDetails)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> extractUsername(token);<br>        <span class="hljs-keyword">return</span> (username.equals(userDetails.getUsername()) &amp;&amp; !isTokenExpired(token));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、注解方法">二、注解方法</h3><p>要使用注解，需先开启注解使用，可在启动类或配置类上使用以下注解开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span><br></code></pre></td></tr></table></figure><p>完整启动类示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><br><span class="hljs-meta">@MapperScan(&quot;com.example.mapper&quot;)</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1、-Secured">1、<code>@Secured</code></h3><p>被此注解修饰下的方法，访问者必须有注解中所指示的角色，否则不允许访问。</p><p>角色前要加<code>ROLE_</code></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@Secured(&#123;&quot;ROLE_ADMIN&quot;,&quot;ROLE_USER&quot;&#125;)</span> <span class="hljs-comment">// 这里说明只允许角色ADMIN和USER访问</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、-PreAuthorize">2、@PreAuthorize</h3><p>此注解修饰下的方法，会在进入方法前验证身份</p><p>需要先在开启注解的参数里添加：<code>prePostEnabled = true</code></p><p>启动类完整示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><br><span class="hljs-meta">@MapperScan(&quot;com.example.mapper&quot;)</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法上完整示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;ADMIN&#x27;, &#x27;USER&#x27;)&quot;)</span> <span class="hljs-comment">// 这里说明只允许权限ADMIN和USER访问</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、-PostAuthorize">3、@PostAuthorize</h3><p>此注解修饰下的方法，会在方法执行后验证身份 &gt;&gt;&gt; 一般用于验证返回值</p><blockquote><p>需要先在开启注解的参数里添加：<code>prePostEnabled = true</code></p></blockquote><p>完整示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;ADMIN&#x27;, &#x27;USER&#x27;)&quot;)</span> <span class="hljs-comment">// 这里说明只允许权限ADMIN和USER访问</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、-PreFilter">4、@PreFilter</h3><p>此注解修饰下的方法，会过滤传入到方法的数据</p><p>完整示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;ADMIN&#x27;, &#x27;USER&#x27;)&quot;)</span> <span class="hljs-comment">// 这里说明只允许权限ADMIN和USER访问</span><br><span class="hljs-meta">@PreFilter(&quot;filterObject.contains(&#x27;admin&#x27;)&quot;)</span> <span class="hljs-comment">//传入值中有admin就执行，否则不执行</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、-PostFilter">5、@PostFilter</h3><p>此注解修饰下的方法，会过滤返回的数据</p><p>完整示例：filterObject标识任意对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@PostAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;, &#x27;user&#x27;)&quot;)</span><br><span class="hljs-meta">@PostFilter(&quot;filterObject.contains(&#x27;admin&#x27;)&quot;)</span> <span class="hljs-comment">//返回值中有admin就返回，否则返回空值</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);<br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//list.add(&quot;admin&quot;);</span><br>    list.add(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>授权与验证</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MD5加密替代方案</title>
    <link href="/2024/10/16/MD5%E5%8A%A0%E5%AF%86%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/"/>
    <url>/2024/10/16/MD5%E5%8A%A0%E5%AF%86%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>由于<code>MD5</code>加密存在撞库的漏洞（尽管那概率很小），所以现在并不适合用来加密用户的密码。</p><p>目前的用处一般在<code>文件完整性检查</code>和<code>数据去重</code>上。</p></blockquote><h3 id="替代方案">替代方案</h3><p><code>Bcrypt</code>加密，这也是一种单向加密算法。也是<code>SpringSecurity</code>中的加密算法之一。</p><h3 id="使用方法">使用方法</h3><h4 id="依赖">依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  用于密码加密  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mindrot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jbcrypt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="工具类">工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.mindrot.jbcrypt.BCrypt;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BCrypt密码加密工具</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/10/16</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@className</span> PasswordUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 这是替代MD5加密的完美选择</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PasswordUtil</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/16</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> PasswordUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回被BCrypt加密后的密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hashPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">return</span> BCrypt.hashpw(password, BCrypt.gensalt());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 密码校验</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/10/16</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@className</span> PasswordUtil</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 待校验的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> hashed 数据库中存储的密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回校验结果，成功为true，否则为false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkPassword</span><span class="hljs-params">(String password, String hashed)</span> &#123;<br>        <span class="hljs-keyword">return</span> BCrypt.checkpw(password, hashed);<br>    &#125;<br><br>    <span class="hljs-comment">// 示例用法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mySecretPassword&quot;</span>;<br>        <br>        <span class="hljs-comment">// 哈希密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">hashedPassword</span> <span class="hljs-operator">=</span> hashPassword(password);<br>        System.out.println(<span class="hljs-string">&quot;Hashed Password: &quot;</span> + hashedPassword);<br>        <br>        <span class="hljs-comment">// 验证密码</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> checkPassword(password, hashedPassword);<br>        System.out.println(<span class="hljs-string">&quot;Password matches: &quot;</span> + isMatch);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MD5</tag>
      
      <tag>Spring</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker完整配置示例</title>
    <link href="/2024/10/15/Docker%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/"/>
    <url>/2024/10/15/Docker%E5%AE%8C%E6%95%B4%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux系统平台配置"><code>Linux</code>系统平台配置</h3><h5 id="在-Linux-上"><a href="https://docs.docker.com/reference/cli/dockerd/#on-linux">在 Linux 上</a></h5><p>配置文件在 Linux 上的默认位置是 。使用标志指定 非默认位置。<code>/etc/docker/daemon.json``--config-file</code></p><p>以下是 Linux 上允许的配置选项的完整示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;allow-nondistributable-artifacts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;api-cors-header&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;authorization-plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bridge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;builder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;gc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultKeepStorage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10GB&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;policy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;keepStorage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10GB&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;unused-for=2200h&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;keepStorage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;50GB&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;unused-for=3300h&quot;</span><span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;keepStorage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100GB&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cgroup-parent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;containerd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/run/containerd/containerd.sock&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;containerd-namespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;containerd-plugins-namespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker-plugins&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data-root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-address-pools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;base&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;172.30.0.0/16&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">24</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;base&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;172.31.0.0/16&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">24</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-cgroupns-mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;private&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-gateway&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-gateway-v6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-network-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;runc&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-shm-size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64M&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-ulimits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;nofile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Hard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">64000</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nofile&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Soft&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">64000</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns-search&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exec-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exec-root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;experimental&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cdi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;containerd-snapshotter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;fixed-cidr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;fixed-cidr-v6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;host-gateway-ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;proxies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;http-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://proxy.example.com:80&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;https-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://proxy.example.com:443&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;no-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*.test.example.com,.example.org&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;icc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;init&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;init-path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/libexec/docker-init&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ip-forward&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ip-masq&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;iptables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ip6tables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ipv6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;live-restore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;json-file&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cache-disabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cache-max-file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cache-max-size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20m&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cache-compress&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;os,customer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;somelabel&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max-file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;max-size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10m&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;max-concurrent-downloads&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;max-concurrent-uploads&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;max-download-attempts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mtu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;no-new-privileges&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;node-generic-resources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;NVIDIA-GPU=UUID1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;NVIDIA-GPU=UUID2&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;oom-score-adjust&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pidfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;raw-logs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 此处设置镜像地址</span><br>  <span class="hljs-attr">&quot;runtimes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;cc-runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/bin/cc-runtime&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;custom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/local/bin/my-runc-replacement&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;runtimeArgs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;--debug&quot;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;seccomp-profile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;selinux-enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;shutdown-timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;storage-driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;storage-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;swarm-default-advertise-addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tls&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlscacert&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlscert&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlskey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlsverify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;userland-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;userland-proxy-path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/usr/libexec/docker-proxy&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;userns-remap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Windows系统平台配置"><code>Windows</code>系统平台配置</h3><h5 id="在-Windows-上"><a href="https://docs.docker.com/reference/cli/dockerd/#on-windows">在 Windows 上</a></h5><p>配置文件在 Windows 上的默认位置是 。使用标志 以指定非默认位置。<code>%programdata%\docker\config\daemon.json``--config-file</code></p><p>以下是 Windows 上允许的配置选项的完整示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;allow-nondistributable-artifacts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;authorization-plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bridge&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;containerd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\\\\.\\pipe\\containerd-containerd&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;containerd-namespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;containerd-plugins-namespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;docker-plugins&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;data-root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-network-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-runtime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;default-ulimits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dns-search&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exec-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;experimental&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;fixed-cidr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;host-gateway-ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;labels&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;log-level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;max-concurrent-downloads&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;max-concurrent-uploads&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;max-download-attempts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mtu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pidfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;raw-logs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 此处设置镜像地址</span><br>  <span class="hljs-attr">&quot;shutdown-timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;storage-driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;storage-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;swarm-default-advertise-addr&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlscacert&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlscert&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlskey&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tlsverify&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><p><code>Docker</code>国内镜像地址，网络搜集，若失效自行寻找。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.nju.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-string">&quot;https://noohub.ru&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-string">&quot;https://huecker.io&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://dockerhub.timeweb.cloud&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://0c105db5188026850f80c001def654a0.mirror.swr.myhuaweicloud.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://5tqw56kt.mirror.aliyuncs.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.1panel.live&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;http://mirrors.ustc.edu.cn/&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;http://mirror.azure.cn/&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://hub.rat.dev/&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.ckyl.me/&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.chenby.cn&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.hpcloud.cloud&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span><br></code></pre></td></tr></table></figure><p>原文地址：<a href="https://docs.docker.com/reference/cli/dockerd/#default-network-options">dockerd |Docker 文档</a></p>]]></content>
    
    
    <categories>
      
      <category>配置文件示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DataTable &gt; PDF导出中文乱码问题</title>
    <link href="/2024/10/09/DataTable/"/>
    <url>/2024/10/09/DataTable/</url>
    
    <content type="html"><![CDATA[<p>原因是默认字体不支持中文，需要更换字体。</p><p>详情官网：<a href="https://pdfmake.github.io/docs/0.1/fonts/custom-fonts-client-side/vfs/">https://pdfmake.github.io/docs/0.1/fonts/custom-fonts-client-side/vfs/</a></p><p>官网的大致意思是，下载pdfmake后，自行生成可用的字体js文件</p><p>以下是详细操作：</p><p><strong>重要前提：电脑上需要已安装nodejs</strong></p><p>Nodejs官网：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a> 下载安装即可</p><h2 id="一、首先获取免费商用字体">一、首先获取免费商用字体</h2><p>推荐去字体天下获取：<a href="https://www.fonts.net.cn/">https://www.fonts.net.cn/</a></p><p>创建demo文件夹，进去再创建font文件夹，将下载的字体放到这里</p><p>具体参考如下文件目录结构</p><p>起始文件目录 &gt;&gt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">|-- demo  # 项目文件夹名<br>    |-- font                          # 字体文件夹<br>    |   |-- xxx.ttf                   # 下载的字体文件<br></code></pre></td></tr></table></figure><p>然后单击demo文件夹直接托到vscode中打开</p><h2 id="二、安装pdfmake">二、安装<code>pdfmake</code></h2><h3 id="安装命令">安装命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install pdfmake<br></code></pre></td></tr></table></figure><p>成功示例：</p><blockquote><p>PS D:\peter\桌面\vue项目&gt; npm install pdfmake</p><p>added 42 packages in 11s</p><p>17 packages are looking for funding<br>run <code>npm fund</code> for details</p></blockquote><p>安装后的项目文件目录 &gt;&gt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">|-- demo                              # 项目根目录<br>    |-- font                          # 字体文件夹<br>    |   |-- xxx.ttf                   # 下载的字体文件<br>    |-- node_modules                  # 安装后生成的文件夹<br>    |-- <span class="hljs-keyword">package</span>-lock.json             # 安装后生成的文件<br>    |-- <span class="hljs-keyword">package</span>.json                  # 安装后生成的文件<br></code></pre></td></tr></table></figure><h3 id="进入目标文件夹">进入目标文件夹</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd node_modules/pdfmake/<br></code></pre></td></tr></table></figure><p>成功示例：</p><blockquote><p>PS D:\peter\桌面\vue项目&gt; cd node_modules/pdfmake/<br>PS D:\peter\桌面\vue项目\node_modules\pdfmake&gt;</p></blockquote><h3 id="生成目标js文件">生成目标js文件</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node build-vfs.js &quot;../../font/&quot;<br></code></pre></td></tr></table></figure><p>成功示例：</p><blockquote><p>PS D:\peter\桌面\vue项目\node_modules\pdfmake&gt; node build-vfs.js “…/…/font/”<br>Source path: …/…/font/</p><p>FILE: xxx.ttf</p><p>Builded 1 files to ./build/vfs_fonts.js.<br>PS D:\peter\桌面\vue项目\node_modules\pdfmake&gt;</p></blockquote><p>最终文件目录 &gt;&gt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">|-- demo  # 项目根目录<br>    |-- font                          # 字体文件夹<br>    |   |-- xxx.ttf                   # 下载的字体文件<br>    |-- node_modules                  # 安装后生成的文件夹<br>    |   |-- pdfmake                   # 安装的pdfmake<br>    |   |   |-- build           # 生成的内容文件夹<br>    |   |   |   |-- vfs_fonts.js      # 这是生成的我们所需的最终文件<br>    |   |-- 其他文件...<br>    |-- <span class="hljs-keyword">package</span>-lock.json             # 安装后生成的文件<br>    |-- <span class="hljs-keyword">package</span>.json                  # 安装后生成的文件<br></code></pre></td></tr></table></figure><p>然后进入目标文件夹内找到 <code>vfs_fonts.js</code>即可。</p><h2 id="三、将生成的此文件引入html">三、将生成的此文件引入html</h2><p>【重要】打开生成的<code>vfs_fonts.js</code>也能看到名称，替换的名称要与此文件内的名称保持一致</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.pdfMake = <span class="hljs-keyword">this</span>.pdfMake || &#123;&#125;; <span class="hljs-keyword">this</span>.pdfMake.vfs = &#123;<br>  <span class="hljs-string">&quot;xxx.ttf&quot;</span>: <span class="hljs-string">&quot;AAEAAAANAIAAAwBQRFNJRwAAAAEAGFQYAAAACEdQT1MOHRLOABg2...后面省略</span><br></code></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 请根据自己存放的路径引入 &gt;&gt;&gt; 此处为示例 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pdfmake.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vfs_fonts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 字体设置的脚本一定要在引入的字体后 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> fonts = &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 自定义字体名称</span></span><br><span class="language-javascript">        <span class="hljs-title class_">Roboto</span>: &#123;  <span class="hljs-comment">// 这里名称任意，不过要和下面配置的对应</span></span><br><span class="language-javascript">            <span class="hljs-attr">normal</span>: <span class="hljs-string">&#x27;xxx.ttf&#x27;</span>,     <span class="hljs-comment">// 主要将这里的替换为你下载的字体文件名</span></span><br><span class="language-javascript">            <span class="hljs-attr">bold</span>: <span class="hljs-string">&#x27;xxx.ttf&#x27;</span>,       <span class="hljs-comment">// 主要将这里的替换为你下载的字体文件名</span></span><br><span class="language-javascript">            <span class="hljs-attr">italics</span>: <span class="hljs-string">&#x27;xxx.ttf&#x27;</span>,    <span class="hljs-comment">// 主要将这里的替换为你下载的字体文件名</span></span><br><span class="language-javascript">            <span class="hljs-attr">bolditalics</span>: <span class="hljs-string">&#x27;xxx.ttf&#x27;</span> <span class="hljs-comment">// 主要将这里的替换为你下载的字体文件名</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    pdfMake.<span class="hljs-property">fonts</span> = fonts;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#table&#x27;</span>).<span class="hljs-title class_">DataTable</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">buttons</span>: [</span><br><span class="language-javascript">                <span class="hljs-string">&#x27;excel&#x27;</span>,  </span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">extend</span>: <span class="hljs-string">&#x27;pdfHtml5&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;PDF 文件的标题&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;PDF 文件名&#x27;</span>, </span><br><span class="language-javascript">                    <span class="hljs-attr">messageTop</span>: <span class="hljs-string">&#x27;PDF 顶部显示的信息&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">customize</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">doc</span>) &#123;</span><br><span class="language-javascript">                        doc.<span class="hljs-property">defaultStyle</span> = &#123;</span><br><span class="language-javascript">                            <span class="hljs-attr">font</span>: <span class="hljs-string">&#x27;Roboto&#x27;</span>  <span class="hljs-comment">// 对应自定义的字体名称</span></span><br><span class="language-javascript">                        &#125;;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            ],</span><br><span class="language-javascript">            <span class="hljs-comment">// 其他配置...</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动项目，点击pdf导出即可看到效果。</p><h2 id="四、补充">四、补充</h2><p>由于生成是针对文件夹内的所有字体生成的，因此可以下载多个字体，配置的时候选择配置即可。</p>]]></content>
    
    
    <categories>
      
      <category>表单插件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataTable</tag>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ProGuard 代码混淆</title>
    <link href="/2024/09/29/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    <url>/2024/09/29/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
    
    <content type="html"><![CDATA[<h3 id="一、流程">一、流程</h3><h4 id="1、引入插件">1、引入插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- ProGuard混淆插件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.wvengen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>proguard-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 混淆时刻，这里是打包的时候混淆--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 使用插件的什么功能，当然是混淆--&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 这里idea爆红警告也无所谓，只要能成功打包就行 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>proguard<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 是否混淆--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">obfuscate</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">obfuscate</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--                    &lt;proguardInclude&gt;$&#123;basedir&#125;/proguard.cfg&lt;/proguardInclude&gt;--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">options</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- JDK目标版本11--&gt;</span><br>                    <span class="hljs-comment">&lt;!--                        &lt;option&gt;-target 11&lt;/option&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--JDK8--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-target 1.8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不做收缩（删除注释、未被引用代码）--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontshrink<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不做优化（变更代码实现逻辑）--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontoptimize<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不路过非公用类文件及成员--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontskipnonpubliclibraryclasses<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontskipnonpubliclibraryclassmembers<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--不用大小写混合类名机制--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontusemixedcaseclassnames<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><br>                    <span class="hljs-comment">&lt;!-- 优化时允许访问并修改有修饰符的类和类的成员 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-allowaccessmodification<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 确定统一的混淆类的成员名称来增加混淆--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-useuniqueclassmembernames<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不混淆所有包名--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keeppackagenames<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><br>                    <span class="hljs-comment">&lt;!-- 需要保持的属性：异常，注解等--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不混淆所有的set/get方法--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepclassmembers public class * &#123;void set*(***);*** get*();&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不混淆bean注解的方法--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keepclassmembers public class * &#123;<br>                        @org.springframework.context.annotation.Bean *;<br>                        &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><br>                    <span class="hljs-comment">&lt;!-- 不混淆包下的所有类名，且类中的方法也不混淆--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.czy.echat.EchatApplication &#123;<br>                        public static void main(java.lang.String[]);<br>                        &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.czy.echat.model.**&#123;*;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不混淆mapper类--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.czy.echat.dao.**&#123;*;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 不混淆其他类似不能识别的类--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep class com.czy.echat.demo.**&#123;*;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-keep @org.aspectj.lang.annotation.Aspect class *&#123;*;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--忽略warn消息--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-ignorewarnings<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--忽略note消息--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-dontnote<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">options</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">libs</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--jdk11配置--&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;lib&gt;$&#123;java.home&#125;/jmods&lt;/lib&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--jdk8配置--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="hljs-tag">&lt;/<span class="hljs-name">lib</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">libs</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">injar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">injar</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--class 混淆后输出的jar包--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outjar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">outjar</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 输出目录--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.guardsquare<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>proguard-base<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.czy.echat.EchatApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、修改启动类">2、修改启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czy.echat;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationBeanNameGenerator;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EchatApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplicationBuilder</span>(EchatApplication.class)<br>                .beanNameGenerator(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UniqueBeanNameGenerator</span>())<br>                .run(args);<br>        <span class="hljs-comment">//SpringApplication.run(EchatApplication.class, args);</span><br>    &#125;<br><br>    <span class="hljs-comment">// 自定义bean名称生成</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UniqueBeanNameGenerator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnnotationBeanNameGenerator</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 如果自定义了beanName，就取自定义的，不然取默认的</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> definition</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">buildDefaultBeanName</span><span class="hljs-params">(BeanDefinition definition)</span> &#123;<br>            <span class="hljs-keyword">return</span> definition.getBeanClassName();<span class="hljs-comment">// 类名全路径</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>需要将路径改为自己项目的</p><p>刷新Maven依赖，成功引入插件后，即可打包测试。</p><h3 id="二、注意事项">二、注意事项</h3><p>1、代码混淆插件必须在<code>Maven</code>打包插件之前！</p><p>2、代理切点类的切点类路径不要混淆！</p><h3 id="三、参考资料">三、参考资料</h3><p><a href="https://www.cnblogs.com/strongmore/p/18026443#autoid-2-3-0">https://www.cnblogs.com/strongmore/p/18026443#autoid-2-3-0</a></p>]]></content>
    
    
    <categories>
      
      <category>java技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ProGuard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis 发布与订阅</title>
    <link href="/2024/09/26/Redis%E8%AE%A2%E9%98%85%E4%B8%8E%E8%BD%AC%E5%8F%91/"/>
    <url>/2024/09/26/Redis%E8%AE%A2%E9%98%85%E4%B8%8E%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p><code>Redis</code>的发布与订阅是实时产生的，不会保存消息记录，若当前用户订阅了A组，当B组来消息后，再切换到B组，也不会收到B组之前的消息。</p><h3 id="配置依赖">配置依赖</h3><p><code>pom.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- Redis 启动依赖 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>    <br>&lt;!-- Redis 专属连接池 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>    &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>    <br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>    &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>    <br>&lt;!-- websocket 依赖包含 web依赖 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># Redis配置</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># 指定数据库（Redis一共有16个数据库0-15，这里指定用0号数据库）</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 主机地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-comment"># Redis 运行端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-comment"># Redis 密码 可不设置</span><br>    <span class="hljs-attr">password:</span><br>    <span class="hljs-comment"># jedis与lettuce是两种不同的Redis客户端实现，这俩都提供了操作Redis数据库的API，</span><br>    <span class="hljs-comment"># 但在spring整合包中都被Spring集成封装了统一的调用方法,两者具体差别请自行百度搜索。</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-comment"># 连接池</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-comment"># 最大空闲连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">30</span><br>        <span class="hljs-comment"># 最大连接等待时间</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">100ms</span><br>        <span class="hljs-comment"># 最小空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>        <span class="hljs-comment"># 最大活动连接</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><h3 id="配置类">配置类</h3><p><code>RedisConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.listener.ChannelTopic;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisMessageListenerContainer <span class="hljs-title function_">redisContainer</span><span class="hljs-params">(</span><br><span class="hljs-params">            RedisConnectionFactory connectionFactory,</span><br><span class="hljs-params">            MessageListenerAdapter listenerAdapter)</span> &#123;<br>        <span class="hljs-type">RedisMessageListenerContainer</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisMessageListenerContainer</span>();<br>        container.setConnectionFactory(connectionFactory);<br>        container.addMessageListener(listenerAdapter, topic());<br>        <span class="hljs-keyword">return</span> container;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageListenerAdapter <span class="hljs-title function_">listenerAdapter</span><span class="hljs-params">(RedisMessageSubscriber subscriber)</span> &#123;<br>        <span class="hljs-type">MessageListenerAdapter</span> <span class="hljs-variable">messageListenerAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerAdapter</span>(subscriber, <span class="hljs-string">&quot;onMessage&quot;</span>);<br>        messageListenerAdapter.setSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br>        <span class="hljs-keyword">return</span> messageListenerAdapter;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span> &#123;<br>        RedisTemplate&lt;String,Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(connectionFactory);<br>        Jackson2JsonRedisSerializer&lt;Object&gt; ojjrs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);<br>        ojjrs.setObjectMapper(om);<br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">srs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-comment">// 设置key和HashKey的序列化</span><br>        <span class="hljs-comment">// 这里参数内等同于RedisSerializer.string()都是指向了StringRedisSerializer里的静态常量UTF_8</span><br>        template.setKeySerializer(srs);<br>        template.setHashKeySerializer(srs);<br>        <span class="hljs-comment">//设置Value和HashValue的序列化</span><br>        template.setValueSerializer(ojjrs);<br>        template.setHashValueSerializer(ojjrs);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ChannelTopic <span class="hljs-title function_">topic</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChannelTopic</span>(<span class="hljs-string">&quot;/topic/group/1&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实体类">实体类</h3><p><code>ChatMessage.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 消息类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 这里必须实现序列化，因为redis存储时需要将此类序列化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">// 群组id</span><br>    <span class="hljs-keyword">private</span> String groupId;<br>    <span class="hljs-comment">// 用户id</span><br>    <span class="hljs-keyword">private</span> String userId;<br>    <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-comment">// 消息内容</span><br>    <span class="hljs-keyword">private</span> String content;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="消息订阅类">消息订阅类</h3><p><code>RedisMessageSubscriber.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Redis消息订阅类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2024/9/26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 接收发布的所有信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisMessageSubscriber</span>&#123;<br><br>    <span class="hljs-comment">// SimpMessagingTemplate 是 Spring Framework 中用于支持 WebSocket 消息传递的一个重要类。它提供了高层次的抽象，简化了消息的发送和接收过程。</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SimpMessagingTemplate messagingTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获得订阅的消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> peter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span> 2024/9/26</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chatMessage 聊天信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span> Redis指定订阅的频道消息都会发到这里来进行处理</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(ChatMessage chatMessage)</span> &#123;<br>        <span class="hljs-comment">// 通过websocket将消息发布出去</span><br>        messagingTemplate.convertAndSend(<span class="hljs-string">&quot;/topic/group/&quot;</span>+chatMessage.getGroupId(),chatMessage);<br>        <span class="hljs-comment">// 处理接收到的群聊消息</span><br>        System.out.println(<span class="hljs-string">&quot;收到的消息: &quot;</span> +chatMessage);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="视图控制类">视图控制类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;<br><span class="hljs-keyword">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@MessageMapping(&quot;/chat.sendMessage&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(ChatMessage chatMessage)</span> &#123;<br>        <span class="hljs-comment">// 群组消息发布到特定的群组话题</span><br>        redisTemplate.convertAndSend(<span class="hljs-string">&quot;/topic/group/&quot;</span> + chatMessage.getGroupId(), chatMessage);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="前端页面">前端页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Redis订阅与转发<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;001&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;chat&quot;</span>&gt;</span><br>        群组<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;chat&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;groupId&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入要发送的群组id&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>        信息<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeGroup(1)&quot;</span>&gt;</span>切换频道1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeGroup(2)&quot;</span>&gt;</span>切换频道2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;changeGroup(3)&quot;</span>&gt;</span>切换频道3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/sockjs.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/stomp.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SockJS</span>(<span class="hljs-string">&#x27;/chat-websocket&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> stompClient = <span class="hljs-title class_">Stomp</span>.<span class="hljs-title function_">over</span>(socket);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> groupId = <span class="hljs-number">1</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;form&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止默认提交行为</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 将表单数据序列化为对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> formData = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">groupId</span>: $(<span class="hljs-string">&#x27;input[name=&quot;groupId&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">            <span class="hljs-attr">userId</span>: $(<span class="hljs-string">&#x27;input[name=&quot;userId&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">            <span class="hljs-attr">username</span>: $(<span class="hljs-string">&#x27;input[name=&quot;username&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">            <span class="hljs-attr">content</span>: $(<span class="hljs-string">&#x27;textarea[name=&quot;content&quot;]&#x27;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-title function_">sendMessage</span>(formData.<span class="hljs-property">userId</span>,formData.<span class="hljs-property">username</span>,formData.<span class="hljs-property">content</span>,formData.<span class="hljs-property">groupId</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> currentSubscription;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    stompClient.<span class="hljs-title function_">connect</span>(&#123;&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">frame</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 订阅不同的群组</span></span><br><span class="language-javascript">        currentSubscription = stompClient.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;/topic/group/&#x27;</span> + groupId, <span class="hljs-keyword">function</span> (<span class="hljs-params">messageOutput</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 处理收到的消息</span></span><br><span class="language-javascript">            <span class="hljs-comment">//console.log(messageOutput.body);</span></span><br><span class="language-javascript">            <span class="hljs-comment">//showMessage(JSON.parse(messageOutput.body));</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sendMessage</span>(<span class="hljs-params">userId,username,messageContent, groupId</span>) &#123;</span><br><span class="language-javascript">        stompClient.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;/app/chat.sendMessage&quot;</span>, &#123;&#125;, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">userId</span>: userId,</span><br><span class="language-javascript">            <span class="hljs-attr">username</span>: username,</span><br><span class="language-javascript">            <span class="hljs-attr">content</span>: messageContent,</span><br><span class="language-javascript">            <span class="hljs-attr">groupId</span>: groupId</span><br><span class="language-javascript">        &#125;));</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribeToGroup</span>(<span class="hljs-params">groupId</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 如果已经订阅了其他频道，先取消之前的订阅</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (currentSubscription) &#123;</span><br><span class="language-javascript">            currentSubscription.<span class="hljs-title function_">unsubscribe</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 订阅新的频道</span></span><br><span class="language-javascript">        currentSubscription = stompClient.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&#x27;/topic/group/&#x27;</span> + groupId, <span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(&#x27;Received message for group &#x27; + groupId + &#x27;: &#x27; + message.body);</span></span><br><span class="language-javascript">            <span class="hljs-comment">//displayMessage(JSON.parse(message.body));</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 切换群组时订阅新的群组</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeGroup</span>(<span class="hljs-params">newGroupId</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">subscribeToGroup</span>(newGroupId);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建本地知识库</title>
    <link href="/2024/06/29/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    <url>/2024/06/29/%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="本地知识库搭建">本地知识库搭建</h2><h3 id="准备">准备</h3><p><code>FastGPT</code> 官方文档 ：<a href="https://doc.fastgpt.in/docs/development/docker/">https://doc.fastgpt.in/docs/development/docker/</a></p><p>系统环境：Windows系统 + <code>Docker Desktop</code></p><p>主要参考官方文档中  --&gt;  使用 Docker Compose 快速部署 FastGPT</p><h3 id="开始">开始</h3><p>首先创建文件目录，以<code>fastgpt</code>文件夹名为例。然后进入该目录，在文件目录输入<code>cmd</code>，进入终端。</p><p>然后命令行输入命令下载配置文件和向量库，这里以<code>pgvector</code> 版本为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -O https://raw.githubusercontent.com/labring/FastGPT/main/projects/app/data/config.json<br><br>curl -o docker-compose.yml https://raw.githubusercontent.com/labring/FastGPT/main/files/docker/docker-compose-pgvector.yml<br></code></pre></td></tr></table></figure><p>注：请根据需要自行选择所需向量库版本，官方文档有详细说明，这里不再赘述。</p><h3 id="启动容器">启动容器</h3><p>官方文档中，列出了以命令行的方式启动，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br>docker-compose up -d<br><span class="hljs-meta prompt_"># </span><span class="language-bash">等待10s，OneAPI第一次总是要重启几次才能连上Mysql</span><br>sleep 10<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启一次oneapi(由于OneAPI的默认Key有点问题，不重启的话会提示找不到渠道，临时手动重启一次解决，等待作者修复)</span><br>docker restart oneapi<br></code></pre></td></tr></table></figure><p>这里的启动容器会根据配置文件下载拉取对应的镜像。等下载完成，docker中就已经有容器了，即便这边启动失败，也不用怕。我遇到是<code>MySQL</code>端口冲突，我就把自己电脑上的<code>MySQL</code>给停止了，当然你也可以不拉取配置文件中的<code>MySQL</code>，用你自己已经安装的，去配置文件修改就好。</p><p>启动后，先去浏览器打开<code>OneAPI</code>,为本机地址的3001端口；</p><p>默认用户名密码为</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">用户名<span class="hljs-built_in">：root</span><br>密码：<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>登录后添加渠道和令牌</p><p>添加渠道为<code>OpenAI</code>时，模型选用<code>gpt-3.5-turbo</code>的同时，也一定要选上默认的训练模型，<code>text-embedding-ada-002</code>，否则在<code>FastGPT</code>中训练知识库将报错没有相关渠道!</p><p>之后回到配置文件，配置<code>OneApi</code>的访问地址和<code>key</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下面的地址是 Sealos 提供的，务必写上 v1， 两个项目都在 sealos 部署时候，https://xxxx.cloud.sealos.io 可以改用内网地址</span><br>OPENAI_BASE_URL=https://xxxx.cloud.sealos.io/v1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">下面的 key 是由 One API 提供的令牌</span><br>CHAT_API_KEY=sk-xxxxxx<br></code></pre></td></tr></table></figure><p>重启应用</p><p><code>FastGPT</code>初始账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">用户名：root<br>密码：1234<br></code></pre></td></tr></table></figure><p>打开访问3000端口！</p><p>登录FastGPT</p><p>配置向量模型M3E   <a href="https://doc.fastai.site/docs/development/custom-models/m3e/">https://doc.fastai.site/docs/development/custom-models/m3e/</a></p><p>key值必须为：sk-aaabbbcccdddeeefffggghhhiiijjjkkk</p>]]></content>
    
    
    <categories>
      
      <category>知识库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FastGPT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>try-with-resources使用详解</title>
    <link href="/2024/06/12/Try-with-resource%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/06/12/Try-with-resource%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p><code>try-with-resources</code> 是 Java 7 引入的一种语法糖，用于简化资源管理，确保在使用资源后自动关闭它们。它是 <code>try</code> 语句的增强形式，可以在资源使用完毕后自动调用它们的 <code>close()</code> 方法，从而避免资源泄漏。</p><blockquote><p><strong>但这有个前提：就是资源类必须直接或间接实现了 <code>java.lang.AutoCloseable</code> ，详细信息请参阅资源定义板块。</strong></p></blockquote><h3 id="基本语法">基本语法</h3><h5 id="单个资源写法">单个资源写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">ResourceType</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceType</span>()) &#123;<br>    <span class="hljs-comment">// 使用资源</span><br>&#125; <span class="hljs-keyword">catch</span> (ExceptionType e) &#123;<br>    <span class="hljs-comment">// 处理异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="多个资源写法">多个资源写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">ResourceType</span> <span class="hljs-variable">resource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceType</span>(); <br>     <span class="hljs-type">ResourceType</span> <span class="hljs-variable">resource2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceType</span>()) &#123;<br>    <span class="hljs-comment">// 使用资源</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="资源定义">资源定义</h3><p>任何实现了 <code>java.lang.AutoCloseable</code> 接口的类都可以作为 <code>try-with-resources</code> 语句的资源。<code>AutoCloseable</code> 接口只有一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AutoCloseable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一个常用的接口是 <code>java.io.Closeable</code>，它是 <code>AutoCloseable</code> 的子接口，专门用于 I/O 相关的资源，如 <code>InputStream</code> 和 <code>Reader</code>。</p><p>例如：<code>Socket</code>就实现了<code>Closeable</code>的<code>close()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">synchronized</span>(closeLock) &#123;<br>        <span class="hljs-keyword">if</span> (isClosed())<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (created)<br>            impl.close();<br>        closed = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，用户也可以自定义类来实现<code>AutoCloseable</code>接口，实现<code>close()</code>方法后，即可在<code>try-with-resources</code>种使用。</p><hr><p><strong><code>Closeable</code> 和 <code>AutoCloseable</code></strong></p><ul><li><code>AutoCloseable</code> 是一个通用接口，可以被任何需要在使用后关闭的资源实现。</li><li><code>Closeable</code> 继承自 <code>AutoCloseable</code>，并专门为 I/O 相关的资源设计。它的 <code>close()</code> 方法只能抛出 <code>IOException</code>，而 <code>AutoCloseable</code> 的 <code>close()</code> 方法可以抛出任何异常。</li></ul><p><code>AutoCloseable</code> 的设计更通用，而 <code>Closeable</code> 则专门用于处理 I/O 异常。</p><p>常见的实现了 <code>Closeable</code> 接口的 I/O 资源类</p><table><thead><tr><th style="text-align:center">输入流和输出流</th><th style="text-align:center">读取和写入</th><th style="text-align:center">其他 I/O 类</th></tr></thead><tbody><tr><td style="text-align:center"><code>java.io.InputStream</code></td><td style="text-align:center"><code>java.io.Reader</code></td><td style="text-align:center"><code>java.io.RandomAccessFile</code></td></tr><tr><td style="text-align:center"><code>java.io.OutputStream</code></td><td style="text-align:center"><code>java.io.Writer</code></td><td style="text-align:center"><code>java.nio.channels.FileChannel</code></td></tr><tr><td style="text-align:center"><code>java.io.FileInputStream</code></td><td style="text-align:center"><code>java.io.FileReader</code></td><td style="text-align:center"><code>java.util.zip.ZipFile</code></td></tr><tr><td style="text-align:center"><code>java.io.FileOutputStream</code></td><td style="text-align:center"><code>java.io.FileWriter</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>java.io.BufferedInputStream</code></td><td style="text-align:center"><code>java.io.BufferedReader</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>java.io.BufferedOutputStream</code></td><td style="text-align:center"><code>java.io.BufferedWriter</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>java.io.DataInputStream</code></td><td style="text-align:center"><code>java.io.PrintWriter</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>java.io.DataOutputStream</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><blockquote><p><strong>注：更多实现类信息请参考最后的补充信息板块</strong></p></blockquote><h3 id="工作原理">工作原理</h3><h4 id="资源声明和初始化">资源声明和初始化</h4><p>在 <code>try</code> 语句中声明的资源会被自动初始化，并且该初始化的资源是被自动关闭的。多个资源可以用分号分隔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">ResourceType</span> <span class="hljs-variable">resource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceType</span>(); <br>     <span class="hljs-type">ResourceType</span> <span class="hljs-variable">resource2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceType</span>()) &#123;<br>    <span class="hljs-comment">// 使用资源</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="资源关闭顺序">资源关闭顺序</h4><p>多个资源按照它们声明的顺序关闭，即后声明的先关闭。例如，以上代码中的 <code>resource2</code> 会先于 <code>resource1</code> 被关闭。</p><h4 id="自动关闭的实现">自动关闭的实现</h4><p>在 <code>try</code> 语句块执行完毕后（无论是否抛出异常），<code>try-with-resources</code> 语句会自动调用资源的 <code>close()</code> 方法。这个过程是通过编译器生成的字节码实现的，并不需要程序员显式编写关闭资源的代码。</p><p>例如，以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">MyResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyResource</span>()) &#123;<br>    <span class="hljs-comment">// 使用资源</span><br>&#125;<br></code></pre></td></tr></table></figure><p>会被编译成类似于以下的字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MyResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    resource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyResource</span>();<br>    <span class="hljs-comment">// 使用资源</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-comment">// 处理异常</span><br>    <span class="hljs-keyword">throw</span> e;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resource.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 处理关闭资源时的异常</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常处理">异常处理</h3><p><code>try-with-resources</code> 对异常处理也进行了改进。当 <code>try</code> 块中的代码和 <code>close</code> 方法都抛出异常时，<code>close</code> 方法抛出的异常将被抑制，真正的异常是 <code>try</code> 块中的异常。被抑制的异常可以通过 <code>Throwable.getSuppressed()</code> 方法获取。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">MyResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyResource</span>()) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Exception in try block&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-comment">// e 是 &quot;Exception in try block&quot;</span><br>    Throwable[] suppressed = e.getSuppressed();<br>    <span class="hljs-comment">// suppressed[0] 是 close() 方法抛出的异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结">总结</h3><p><code>try-with-resources</code> 提供了一种简洁、安全的资源管理方式，主要优点包括：</p><ul><li><strong>简化资源管理</strong>：自动关闭资源，避免显式的 <code>finally</code> 代码块。</li><li><strong>减少代码冗余</strong>：不需要显式编写 <code>close()</code> 方法的调用。</li><li><strong>改进异常处理</strong>：更好地管理多个异常，避免遗漏资源关闭导致的资源泄漏。</li></ul><p>这种语法糖极大地提高了代码的可读性和可靠性，是 Java 7 以来一个重要的语法改进。</p><h3 id="补充">补充</h3><p>所有已知 <code>Closeable</code> 实现类</p><blockquote><p>AbstractInterruptibleChannel， AbstractSelectableChannel， AbstractSelector， AsynchronousFileChannel， AsynchronousServerSocketChannel， AsynchronousSocketChannel， AudioInputStream， BufferedInputStream， BufferedOutputStream， BufferedReader， BufferedWriter， ByteArrayInputStream， ByteArrayOutputStream， CharArrayReader， CharArrayWriter， CheckedInputStream， CheckedOutputStream， CipherInputStream， CipherOutputStream， DatagramChannel， DatagramSocket， DataInputStream， DataOutputStream， DeflaterInputStream， DeflaterOutputStream， DigestInputStream， DigestOutputStream， FileCacheImageInputStream， FileCacheImageOutputStream， FileChannel， FileImageInputStream， FileImageOutputStream， FileInputStream， FileOutputStream， FileReader， FileSystem， FileWriter， FilterInputStream， FilterOutputStream， FilterReader， FilterWriter， Formatter， ForwardingJavaFileManager， GZIPInputStream， GZIPOutputStream， ImageInputStreamImpl， ImageOutputStreamImpl， InflaterInputStream， InflaterOutputStream， InputStream， InputStream， InputStream， InputStreamReader， JarFile， JarInputStream， JarOutputStream， LineNumberInputStream， LineNumberReader， LogStream， MemoryCacheImageInputStream， MemoryCacheImageOutputStream， MLet， MulticastSocket， ObjectInputStream， ObjectOutputStream， OutputStream， OutputStream， OutputStream， OutputStreamWriter， Pipe.SinkChannel， Pipe.SourceChannel， PipedInputStream， PipedOutputStream， PipedReader，PrintStream， PrintWriter， PrivateMLet， ProgressMonitorInputStream， PushbackInputStream， PushbackReader， RandomAccessFile， Reader， RMIConnectionImpl， RMIConnectionImpl_Stub， RMIConnector， RMIIIOPServerImpl， RMIJRMPServerImpl， RMIServerImpl， Scanner， SelectableChannel， Selector， SequenceInputStream， ServerSocketChannel， Socket， SocketChannel， SSLServerSocket， SSLSocket， StringBufferInputStream， StringReader， StringWriter， URLClassLoader， Writer， ZipFile， ZipInputStream， ZipOutputStream</p></blockquote><p>所有已知 <code>AutoCloseable</code> 实现类</p><blockquote><p>AbstractInterruptibleChannel， AbstractSelectableChannel， AbstractSelector， AsynchronousFileChannel， AsynchronousServerSocketChannel， AsynchronousSocketChannel， AudioInputStream， BufferedInputStream， BufferedOutputStream， BufferedReader， BufferedWriter， ByteArrayInputStream， ByteArrayOutputStream， CharArrayReader， CharArrayWriter， CheckedInputStream， CheckedOutputStream， CipherInputStream， CipherOutputStream， DatagramChannel， DatagramSocket， DataInputStream， DataOutputStream， DeflaterInputStream， DeflaterOutputStream， DigestInputStream， DigestOutputStream， FileCacheImageInputStream， FileCacheImageOutputStream， FileChannel， FileImageInputStream， FileImageOutputStream， FileInputStream， FileLock， FileOutputStream， FileReader， FileSystem， FileWriter， FilterInputStream， FilterOutputStream， FilterReader， FilterWriter， Formatter， ForwardingJavaFileManager， GZIPInputStream， GZIPOutputStream， ImageInputStreamImpl， ImageOutputStreamImpl， InflaterInputStream， InflaterOutputStream， InputStream， InputStream， InputStream， InputStreamReader， JarFile， JarInputStream， JarOutputStream， LineNumberInputStream， LineNumberReader， LogStream， MemoryCacheImageInputStream， MemoryCacheImageOutputStream， MLet， MulticastSocket， ObjectInputStream， ObjectOutputStream， OutputStream， OutputStream， OutputStream， OutputStreamWriter， Pipe.SinkChannel， Pipe.SourceChannel， PipedInputStream， PipedOutputStream， PipedReader、 PipedWriter， PrintStream， PrintWriter， PrivateMLet， ProgressMonitorInputStream， PushbackInputStream， PushbackReader， RandomAccessFile， Reader， RMIConnectionImpl， RMIConnectionImpl_Stub， RMIConnector， RMIIIOPServerImpl， RMIJRMPServerImpl， RMIServerImpl， Scanner， SelectableChannel， Selector， ServerSocket， ServerSocketChannel， Socket， SocketChannel， SSLServerSocket， SSLSocket， StringBufferInputStream， StringReader， StringWriter， URLClassLoader， Writer， XMLDecoder， XMLEncoder， ZipFile， ZipInputStream， ZipOutputStream</p></blockquote><p>（注：补充信息来源自 <code>Jdk1.8 API</code> 文档）</p>]]></content>
    
    
    <categories>
      
      <category>java技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反射笔记</title>
    <link href="/2024/06/08/%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/06/08/%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h2 id="反射">反射</h2><h3 id="修饰符返回值">修饰符返回值</h3><p>虚拟机规范表4.1、4.4、4.5和4.7中的访问修饰符标志常量</p><table><thead><tr><th style="text-align:center">修饰符类型</th><th style="text-align:center">修饰符名称</th><th style="text-align:center">标志值（十进制）</th><th style="text-align:center">标志值（十六进制）</th></tr></thead><tbody><tr><td style="text-align:center">PUBLIC</td><td style="text-align:center">公共</td><td style="text-align:center">1</td><td style="text-align:center"><code>0x00000001</code></td></tr><tr><td style="text-align:center">PRIVATE</td><td style="text-align:center">私有</td><td style="text-align:center">2</td><td style="text-align:center"><code>0x00000002</code></td></tr><tr><td style="text-align:center">PROTECTED</td><td style="text-align:center">保护</td><td style="text-align:center">4</td><td style="text-align:center"><code>0x00000004</code></td></tr><tr><td style="text-align:center">STATIC</td><td style="text-align:center">静态</td><td style="text-align:center">8</td><td style="text-align:center"><code>0x00000008</code></td></tr><tr><td style="text-align:center">FINAL</td><td style="text-align:center">不可变</td><td style="text-align:center">16</td><td style="text-align:center"><code>0x00000010</code></td></tr><tr><td style="text-align:center">SYNCHRONIZED</td><td style="text-align:center">同步</td><td style="text-align:center">32</td><td style="text-align:center"><code>0x00000020</code></td></tr><tr><td style="text-align:center">VOLATILE</td><td style="text-align:center">可变</td><td style="text-align:center">64</td><td style="text-align:center"><code>0x00000040</code></td></tr><tr><td style="text-align:center">TRANSIENT</td><td style="text-align:center">非序列化</td><td style="text-align:center">128</td><td style="text-align:center"><code>0x00000080</code></td></tr><tr><td style="text-align:center">NATIVE</td><td style="text-align:center">本地</td><td style="text-align:center">256</td><td style="text-align:center"><code>0x00000100</code></td></tr><tr><td style="text-align:center">INTERFACE</td><td style="text-align:center">接口</td><td style="text-align:center">512</td><td style="text-align:center"><code>0x00000200</code></td></tr><tr><td style="text-align:center">ABSTRACT</td><td style="text-align:center">抽象</td><td style="text-align:center">1024</td><td style="text-align:center"><code>0x00000400</code></td></tr><tr><td style="text-align:center">STRICT</td><td style="text-align:center">严格浮点运算</td><td style="text-align:center">2048</td><td style="text-align:center"><code>0x00000800</code></td></tr></tbody></table><hr><p>源码出处：<code>package java.lang.reflect.Modifier</code>;</p><p>虚拟机规范表4.1、4.4、4.5和4.7中的访问修饰符标志常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Access modifier flag constants from tables 4.1, 4.4, 4.5, and 4.7 of</span><br><span class="hljs-comment"> * &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> public&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PUBLIC</span>           <span class="hljs-operator">=</span> <span class="hljs-number">0x00000001</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> private&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PRIVATE</span>          <span class="hljs-operator">=</span> <span class="hljs-number">0x00000002</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> protected&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PROTECTED</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0x00000004</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> static&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">STATIC</span>           <span class="hljs-operator">=</span> <span class="hljs-number">0x00000008</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> final&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FINAL</span>            <span class="hljs-operator">=</span> <span class="hljs-number">0x00000010</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> synchronized&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SYNCHRONIZED</span>     <span class="hljs-operator">=</span> <span class="hljs-number">0x00000020</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> volatile&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VOLATILE</span>         <span class="hljs-operator">=</span> <span class="hljs-number">0x00000040</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> transient&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TRANSIENT</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0x00000080</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> native&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NATIVE</span>           <span class="hljs-operator">=</span> <span class="hljs-number">0x00000100</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> interface&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INTERFACE</span>        <span class="hljs-operator">=</span> <span class="hljs-number">0x00000200</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> abstract&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ABSTRACT</span>         <span class="hljs-operator">=</span> <span class="hljs-number">0x00000400</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The &#123;<span class="hljs-doctag">@code</span> int&#125; value representing the &#123;<span class="hljs-doctag">@code</span> strictfp&#125;</span><br><span class="hljs-comment"> * modifier.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">STRICT</span>           <span class="hljs-operator">=</span> <span class="hljs-number">0x00000800</span>;<br></code></pre></td></tr></table></figure><h3 id="推荐写法">推荐写法</h3><p>注意：当有多个不同种类的修饰符时，实际返回值为多个修饰符的值相加的和</p><p>比如方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//简单示例方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-comment">//获取方法修饰符（打印的主要代码）</span><br>System.out.println(method.getModifiers());<br></code></pre></td></tr></table></figure><p>这个方法的修饰符返回值就是 33，即 public + synchronized  :   1 + 32 = 33</p><p>直接获取修饰符返回值不直观，我们更推荐这样获取修饰符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//推荐获取方法修饰符的写法</span><br>System.out.println(Modifier.toString(method.getModifiers()));<br><br><span class="hljs-comment">//控制台输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span><br></code></pre></td></tr></table></figure><p>方法源码出处：<code>package java.lang.reflect.Modifier</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(<span class="hljs-type">int</span> mod)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-type">int</span> len;<br><br>    <span class="hljs-keyword">if</span> ((mod &amp; PUBLIC) != <span class="hljs-number">0</span>)        sb.append(<span class="hljs-string">&quot;public &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; PROTECTED) != <span class="hljs-number">0</span>)     sb.append(<span class="hljs-string">&quot;protected &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; PRIVATE) != <span class="hljs-number">0</span>)       sb.append(<span class="hljs-string">&quot;private &quot;</span>);<br><br>    <span class="hljs-comment">/* Canonical order */</span><br>    <span class="hljs-keyword">if</span> ((mod &amp; ABSTRACT) != <span class="hljs-number">0</span>)      sb.append(<span class="hljs-string">&quot;abstract &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; STATIC) != <span class="hljs-number">0</span>)        sb.append(<span class="hljs-string">&quot;static &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; FINAL) != <span class="hljs-number">0</span>)         sb.append(<span class="hljs-string">&quot;final &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; TRANSIENT) != <span class="hljs-number">0</span>)     sb.append(<span class="hljs-string">&quot;transient &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; VOLATILE) != <span class="hljs-number">0</span>)      sb.append(<span class="hljs-string">&quot;volatile &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; SYNCHRONIZED) != <span class="hljs-number">0</span>)  sb.append(<span class="hljs-string">&quot;synchronized &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; NATIVE) != <span class="hljs-number">0</span>)        sb.append(<span class="hljs-string">&quot;native &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; STRICT) != <span class="hljs-number">0</span>)        sb.append(<span class="hljs-string">&quot;strictfp &quot;</span>);<br>    <span class="hljs-keyword">if</span> ((mod &amp; INTERFACE) != <span class="hljs-number">0</span>)     sb.append(<span class="hljs-string">&quot;interface &quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ((len = sb.length()) &gt; <span class="hljs-number">0</span>)    <span class="hljs-comment">/* trim trailing space */</span><br>        <span class="hljs-keyword">return</span> sb.toString().substring(<span class="hljs-number">0</span>, len-<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="补充：源码中定义的其他常量信息">补充：源码中定义的其他常量信息</h3><blockquote><p>未（尚未）在公共<code>API</code>中公开的位，因为它们对字段和方法有不同的含义，并且没有区分这类中两者的方法，或者因为它们不是<code>Java</code>编程语言关键字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Bits not (yet) exposed in the public API either because they</span><br><span class="hljs-comment">// have different meanings for fields and methods and there is no</span><br><span class="hljs-comment">// way to distinguish between the two in this class, or because</span><br><span class="hljs-comment">// they are not Java programming language keywords</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BRIDGE</span>    <span class="hljs-operator">=</span> <span class="hljs-number">0x00000040</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">VARARGS</span>   <span class="hljs-operator">=</span> <span class="hljs-number">0x00000080</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SYNTHETIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x00001000</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ANNOTATION</span>  <span class="hljs-operator">=</span> <span class="hljs-number">0x00002000</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ENUM</span>      <span class="hljs-operator">=</span> <span class="hljs-number">0x00004000</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MANDATED</span>  <span class="hljs-operator">=</span> <span class="hljs-number">0x00008000</span>;<br></code></pre></td></tr></table></figure><p><code>VARARGS</code></p><blockquote><p>在Java中，<code>varargs</code>是一种修饰符，它允许方法接受数量可变的参数。这是通过在参数列表中最后一个参数类型后面加上省略号（<code>...</code>）实现的。</p><p><code>VARARGS</code>修饰符在<code>Java</code>中并不存在，这可能是你误解了<code>varargs</code>的概念。在<code>Java</code>中，<code>varargs</code>修饰符是通过在方法参数列表中的最后一个参数类型后面加上<code>...</code>来实现的。</p><p>以下是一个使用<code>varargs</code>的<code>Java</code>方法的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarargsExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printVarargs</span><span class="hljs-params">(String... varargs)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String str : varargs) &#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        printVarargs(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，<code>printVarargs</code>方法接受一个可变参数，即一个字符串数组。在<code>main</code>方法中，我们调用<code>printVarargs</code>方法并传递了三个字符串作为参数。</p><p>注意：<code>varargs</code>只能应用于最后一个参数，而且方法中只能有一个<code>varargs</code>参数。</p></blockquote><p><code>SYNTHETIC</code></p><blockquote><p><code>SYNTHETIC</code>是<code>Java</code>字节码中的一个修饰符，它表示该字段或方法并非由用户代码显式声明，而是由编译器自动生成的。例如，内部类的引用到外部类的实例会被标记为<code>SYNTHETIC</code>字段。</p><p>如果你在查看<code>Java</code>类文件时看到带有<code>SYNTHETIC</code>标记的字段或方法，通常意味着它是由编译器自动生成的，并不需要用户手动编写。</p><p>解决方法：</p><ol><li>如果你在分析或者调试代码时遇到了带有<code>SYNTHETIC</code>标记的成员，可以理解这些成员是由编译器添加的，通常不需要用户干预。</li><li>如果你正在使用反射<code>API</code>来访问这些成员，并且想要确保只访问用户定义的字段和方法，可以通过检查成员的<code>isSynthetic()</code>方法来过滤这些自动生成的成员。</li><li>如果你是<code>Java</code>字节码的修改者或生成者，确保不要错误地生成了<code>SYNTHETIC</code>标记，除非你有特殊的需求需要让这部分代码对编译器可见。</li></ol></blockquote><p><code>MANDATED</code></p><blockquote><p><code>MANDATED</code> 是<code>Java</code>中用于指示<code>JVM</code>如何使用特定的<code>Java</code>类或接口的修饰符。这个修饰符通常与<code>JNI（Java Native Interface）</code>相关的代码或者<code>Java</code>平台的内部类和接口有关。它是一个由<code>JVM</code>内部使用的标志，并不是开发者直接可控制或使用的。</p><p>如果你在代码中看到了 <code>MANDATED</code> 关键字，很可能是因为你正在查看的是<code>Java</code>的内部类或接口，或者是由<code>JNI</code>代码生成的类。</p><p>如果你遇到了包含 <code>MANDATED</code> 关键字的错误，通常这意味着你正在尝试访问或操作一个不应该直接被用户代码访问或操作的<code>Java</code>类。解决这类问题通常需要你避免直接操作这些内部类或接口。</p><p>如果你是在阅读<code>Java</code>的源码或者<code>JVM</code>的实现时遇到了 <code>MANDATED</code> 关键字，你可以理解为这个类或接口是被<code>JVM</code>的某些特定部分或是<code>JNI</code>调用的，而不是普通的用户代码。</p><p>如果你需要进一步的帮助来理解如何处理特定的 <code>MANDATED</code> 修饰符的问题，你需要提供更多的上下文信息，例如，你正在运行的具体代码、错误信息的完整内容，或者你正在使用的<code>Java</code>版本和<code>JVM</code>实现。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程笔记</title>
    <link href="/2024/06/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/06/07/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Java多线程">Java多线程</h2><h4 id="多线程实现方式">多线程实现方式</h4><h5 id="一：继承Thread类">一：继承<code>Thread</code>类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Example1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-comment">//设置线程名称</span><br>        test.setName(<span class="hljs-string">&quot;窗口1：&quot;</span>);<br>        test1.setName(<span class="hljs-string">&quot;窗口2：&quot;</span>);<br>        <span class="hljs-comment">//开启线程</span><br>        test.start();<br>        test1.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-comment">//共享资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//同步代码块</span><br>            <span class="hljs-keyword">synchronized</span> (SellPort1.class)&#123;<br>                <span class="hljs-keyword">if</span> (ticket == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//票数减一</span><br>                    ticket--;<br>                    <span class="hljs-comment">//打印当前线程名称和剩余票数</span><br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出一张票！剩余票数&quot;</span>+ticket);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//线程休眠1秒</span><br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="二：实现Runnable接口">二：实现<code>Runnable</code>接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Example1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(test);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(test);<br>        <span class="hljs-comment">//设置线程名称</span><br>        t1.setName(<span class="hljs-string">&quot;窗口1：&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2：&quot;</span>);<br>        <span class="hljs-comment">//开启线程</span><br>        t1.start();<br>        t2.start();<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">//共享资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//同步代码块</span><br>            <span class="hljs-keyword">synchronized</span> (SellPort1.class)&#123;<br>                <span class="hljs-keyword">if</span> (ticket == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//票数减一</span><br>                    ticket--;<br>                    <span class="hljs-comment">//打印当前线程名称和剩余票数</span><br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出一张票！剩余票数&quot;</span>+ticket);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//线程休眠1秒</span><br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="三：实现Callable接口">三：实现<code>Callable</code>接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Example1;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//创建Test对象</span><br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-comment">//创建FutureTask对象，它可以管理多线程运行的结果值</span><br>        FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(t,);<br>        FutureTask&lt;Integer&gt; futureTask2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(t);<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask,<span class="hljs-string">&quot;线程1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask2,<span class="hljs-string">&quot;线程2&quot;</span>);<br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        t2.start();<br>            <br>        <span class="hljs-comment">//获取线程结果值</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> futureTask.get();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> futureTask.get();<br>        <span class="hljs-comment">//打印输出</span><br>        System.out.println(o);<br>        System.out.println(o2);<br>    <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br><br>    <span class="hljs-comment">//共享资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//同步代码块</span><br>            <span class="hljs-keyword">synchronized</span> (Test.class)&#123;<br>                <span class="hljs-keyword">if</span> (ticket == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//票数减一</span><br>                    ticket--;<br>                    <span class="hljs-comment">//打印当前线程名称和剩余票数</span><br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出一张票！剩余票数&quot;</span>+ticket);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//线程休眠1秒</span><br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果是线程1，返回1，否则返回2 </span><br>        <span class="hljs-keyword">if</span>(Thread.currentThread().getName() == <span class="hljs-string">&quot;线程1&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        &#125;   <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="成员方法">成员方法</h4><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">public final String getName()</td><td style="text-align:center">返回此线程的名称</td></tr><tr><td style="text-align:center">public final synchronized void setName(String name)</td><td style="text-align:center">设置线程名称</td></tr><tr><td style="text-align:center">public static native Thread currentThread();</td><td style="text-align:center">获取当前线程对象</td></tr><tr><td style="text-align:center">public static native void sleep(long millis)</td><td style="text-align:center">让线程休眠指定时间</td></tr><tr><td style="text-align:center">public final void setPriority(int newPriority)</td><td style="text-align:center">设置线程优先级（默认5，数值越大越优先）</td></tr><tr><td style="text-align:center">public final int getPriority()</td><td style="text-align:center">获取线程优先级（默认5，数值越大越优先）</td></tr><tr><td style="text-align:center">public final void setDaemon(boolean on)</td><td style="text-align:center">设置线程守护</td></tr><tr><td style="text-align:center">public static native void yield();</td><td style="text-align:center">出让线程</td></tr><tr><td style="text-align:center">public final void join()</td><td style="text-align:center">插入线程</td></tr></tbody></table><h4 id="线程生命周期">线程生命周期</h4><p>创建  -&gt;   就绪  -&gt;  运行  -&gt; （阻塞  -&gt;  等待）  -&gt;  结束</p><h4 id="同步关键字-synchronized">同步关键字  <code>synchronized</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> 可修饰方法 -&gt;  同步方法<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;&#125;<br><br><span class="hljs-comment">//修饰代码块，方法内为锁对象，锁对象可以任意创建，但必须唯一</span><br><span class="hljs-keyword">synchronized</span> (Test.class)&#123;<br>    <span class="hljs-keyword">if</span> (ticket == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//票数减一</span><br>        ticket--;<br>        <span class="hljs-comment">//打印当前线程名称和剩余票数</span><br>        System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出一张票！剩余票数&quot;</span>+ticket);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//线程休眠1秒</span><br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//小技巧，同步方法步骤</span><br><span class="hljs-number">1</span>、循环<br><span class="hljs-number">2</span>、同步代码块<br><span class="hljs-number">3</span>、判断共享数据是否到末尾，如果到了末尾就<span class="hljs-keyword">break</span>或者怎么怎么样<br><span class="hljs-number">4</span>、判断共享数据是否到末尾，如果没到末尾怎么怎么样<br><br></code></pre></td></tr></table></figure><h4 id="Lock锁，手动加解锁"><code>Lock</code>锁，手动加解锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ThreadLock;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            lock.lock();<br><br>            <span class="hljs-keyword">if</span> (counter == <span class="hljs-number">100</span>)&#123;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                此处跳出，会带着锁跳出while循环，这样其他线程就一直在等待，导致程序无法停止。</span><br><span class="hljs-comment">                解决方法一：在跳出前加一行解锁代码或者在while循环外加一行解锁代码</span><br><span class="hljs-comment">                解决方法二【推荐】：用try-catch-finally处理要锁定的代码，把释放锁放在finally代码段中</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                counter++;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;正在售卖第&quot;</span>+counter+<span class="hljs-string">&quot;张票！！！&quot;</span>);<br>            &#125;<br>            lock.unlock();<br>        &#125;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="需要避免的情况-【死锁】">需要避免的情况 --&gt; 【死锁】</h4><p>死锁通常是因为嵌套锁产生的，尽量避免嵌套。</p><h4 id="等待唤醒【生产者和消费者】">等待唤醒【生产者和消费者】</h4><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">public final void wait()</td><td style="text-align:center">线程等待，直到被其他线程唤醒</td></tr><tr><td style="text-align:center">public final native void notify();</td><td style="text-align:center">随机唤醒单个线程</td></tr><tr><td style="text-align:center">public final native void notifyAll();</td><td style="text-align:center">唤醒（同一 JVM 中或同一个对象上）等待的所有线程</td></tr></tbody></table><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> wait;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Cook</span> <span class="hljs-variable">cook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cook</span>();<br>        <span class="hljs-type">Eat</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Eat</span>();<br>        cook.setName(<span class="hljs-string">&quot;厨师&quot;</span>);<br>        eat.setName(<span class="hljs-string">&quot;顾客&quot;</span>);<br>        cook.start();<br>        eat.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>桌面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> wait;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Desk</span> &#123;<br><br>    <span class="hljs-comment">//桌上是否有面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">foodStatus</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//顾客总共要吃的碗数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-comment">//锁对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>厨师类（生产者）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> wait;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock) &#123;<br>                <span class="hljs-keyword">if</span> (Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (Desk.foodStatus == <span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        System.out.println(<span class="hljs-string">&quot;厨师做了一碗面条。&quot;</span>);<br>                        Desk.foodStatus = <span class="hljs-number">1</span>;<br>                        <span class="hljs-comment">//做完唤醒顾客</span><br>                        Desk.lock.notifyAll();<br><br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>顾客（消费者）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> wait;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Desk.lock) &#123;<br>                <span class="hljs-keyword">if</span> (Desk.count == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br><br>                    <span class="hljs-keyword">if</span> (Desk.foodStatus == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            Desk.lock.wait();<br>                        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        Desk.count--;<br>                        System.out.println(<span class="hljs-string">&quot;顾客吃了一碗面条。还能再吃&quot;</span>+Desk.count+<span class="hljs-string">&quot;碗&quot;</span>);<br>                        Desk.foodStatus = <span class="hljs-number">0</span>;<br>                        <span class="hljs-comment">//吃完唤醒厨师</span><br>                        Desk.lock.notify();<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="阻塞队列">阻塞队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Block;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 阻塞队列</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayBlockingQueue&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Cook</span> <span class="hljs-variable">cook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cook</span>(queue);<br>        <span class="hljs-type">Eat</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Eat</span>(queue);<br><br>        cook.start();<br>        eat.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Block;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cook</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-comment">//阻塞队列</span><br>    ArrayBlockingQueue&lt;String&gt; queue;<br><br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cook</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.queue = queue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//阻塞队列内有锁</span><br>                queue.put(<span class="hljs-string">&quot;面条&quot;</span>);<br>                <span class="hljs-comment">//在锁外就会打印混乱</span><br>                System.out.println(<span class="hljs-string">&quot;厨师做了一碗面条&quot;</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Block;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><br>    <span class="hljs-comment">//阻塞队列</span><br>    ArrayBlockingQueue&lt;String&gt; queue;<br><br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Eat</span><span class="hljs-params">(ArrayBlockingQueue&lt;String&gt; queue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.queue = queue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//阻塞队列内有锁</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> queue.take();<br>                <span class="hljs-comment">//在锁外就会打印混乱</span><br>                System.out.println(<span class="hljs-string">&quot;顾客吃了一碗&quot;</span>+food);<br>                System.out.println(<span class="hljs-string">&quot;剩余&quot;</span>+queue.size());<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="线程池">线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyThreadPool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程池对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-comment">//获取线程池对象(无上限)</span><br>        <span class="hljs-comment">//ExecutorService threadPool = Executors.newCachedThreadPool();</span><br>        <span class="hljs-comment">//获取线程池对象(有上限)</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-comment">//MyThread thread = new MyThread();</span><br><br>        <span class="hljs-comment">//将对象提交给线程池</span><br>        threadPool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        threadPool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        threadPool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        threadPool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        threadPool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br><br>        <span class="hljs-comment">//关闭线程池</span><br>        threadPool.shutdown();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;:&quot;</span>+count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyThreadPool;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义线程池</span><br><span class="hljs-comment"> * 核心线程满时，再提交任务就会排队</span><br><span class="hljs-comment"> * 核心线程满，队列满时，再提交就会创建临时线程</span><br><span class="hljs-comment"> * 核心线程满，队列满，临时线程满时，就会触发拒绝策略</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 拒绝策略：</span><br><span class="hljs-comment"> * AbortPolicy() 默认策略，超出的任务会被丢弃并抛出异常</span><br><span class="hljs-comment"> * CallerRunsPolicy() 丢弃任务，但是不抛出异常</span><br><span class="hljs-comment"> * DiscardOldestPolicy() 抛弃队列中等待最久的任务，然后把当前任务加到队列中</span><br><span class="hljs-comment"> * DiscardPolicy() 调用任务的run()方法绕过线程池直接执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPool</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                <span class="hljs-number">3</span>,<span class="hljs-comment">//核心线程数量</span><br>                <span class="hljs-number">6</span>,<span class="hljs-comment">//最大线程数量</span><br>                <span class="hljs-number">60</span>,<span class="hljs-comment">//最大空闲时间</span><br>                TimeUnit.SECONDS,<span class="hljs-comment">//时间单位</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">3</span>),<span class="hljs-comment">//任务队列</span><br>                Executors.defaultThreadFactory(),<span class="hljs-comment">//创建线程工厂</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="hljs-comment">//任务拒绝策略</span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyThreadPool;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取可用的处理器数量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Processor</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Runtime.getRuntime().availableProcessors());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程池计算</p><p>CPU密集型计算  – &gt;   最大并行数 + 1</p><p>I/O密集型计算  --&gt;  最大并行数* 期望CPU利用率*【（CPU计算时间+CPU等待时间）/CPU计算时间】</p><h4 id="补充">补充</h4>]]></content>
    
    
    <categories>
      
      <category>Java技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库报错</title>
    <link href="/2024/05/31/MySQL%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF/"/>
    <url>/2024/05/31/MySQL%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据库报错：">MySQL数据库报错：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Expression #<span class="hljs-number">3</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">SELECT</span> list <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> clause <span class="hljs-keyword">and</span> <span class="hljs-keyword">contains</span> nonaggregated <span class="hljs-keyword">column</span> <span class="hljs-string">&#x27;hrdatabase.d.id&#x27;</span> which <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> functionally dependent <span class="hljs-keyword">on</span> columns <span class="hljs-keyword">in</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> clause; this <span class="hljs-keyword">is</span> incompatible <span class="hljs-keyword">with</span> sql_mode<span class="hljs-operator">=</span>only_full_group_by<br></code></pre></td></tr></table></figure><h2 id="解决方法1：【只生效一次，重启后就又恢复了】">解决方法1：【只生效一次，重启后就又恢复了】</h2><p>在数据库命令行运行此命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span>@<span class="hljs-variable">@global</span>.sql_mode<span class="hljs-operator">=</span><span class="hljs-string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="解决方法2：【永久生效】">解决方法2：【永久生效】</h2><p>修改数据库配置文件my.ini：</p><p>Windows系统下位置：C:\ProgramData\MySQL\MySQL Server 5.7</p><p>打开文件，把<code>sql-mod</code>中开头的  <strong>ONLY_FULL_GROUP_BY</strong> 去掉后保存即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># The <span class="hljs-keyword">current</span> server <span class="hljs-keyword">SQL</span> mode, which can be <span class="hljs-keyword">set</span> dynamically.<br># Modes affect the <span class="hljs-keyword">SQL</span> syntax MySQL supports <span class="hljs-keyword">and</span> the data validation checks it performs. This <br># makes it easier <span class="hljs-keyword">to</span> use MySQL <span class="hljs-keyword">in</span> different environments <span class="hljs-keyword">and</span> <span class="hljs-keyword">to</span> use MySQL together <span class="hljs-keyword">with</span> other <br># database servers.<br><span class="hljs-keyword">sql</span><span class="hljs-operator">-</span>mode<span class="hljs-operator">=</span>&quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;<br></code></pre></td></tr></table></figure><p>重启MySQL服务器，就生效了。</p><p>日志记录控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.superlovelace.standard;<br><br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.logging.FileHandler;<br><span class="hljs-keyword">import</span> java.util.logging.Level;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><span class="hljs-keyword">import</span> java.util.logging.SimpleFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingRecord</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> Logger.getLogger(LoggingRecord.class.getName());<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileHandler</span> <span class="hljs-variable">fileHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>(<span class="hljs-string">&quot;log.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>            fileHandler.setFormatter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFormatter</span>());<br>            logger.addHandler(fileHandler);<br><br>            <span class="hljs-comment">// 将 System.out 重定向到日志记录器</span><br>            System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingPrintStream</span>(logger, Level.INFO));<br>            <span class="hljs-comment">// 以下是你的代码块</span><br>            System.out.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> divide(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>);<br>            System.out.println(<span class="hljs-string">&quot;Result: &quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> dividend, <span class="hljs-type">int</span> divisor)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> dividend / divisor;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            logger.log(Level.SEVERE, <span class="hljs-string">&quot;Exception occurred: &quot;</span> + e.getMessage(), e);<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingPrintStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.io.PrintStream &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Level level;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoggingPrintStream</span><span class="hljs-params">(Logger logger, Level level)</span> &#123;<br>        <span class="hljs-built_in">super</span>(System.out);<br>        <span class="hljs-built_in">this</span>.logger = logger;<br>        <span class="hljs-built_in">this</span>.level = level;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String x)</span> &#123;<br>        logger.log(level, x);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git克隆和提交代码</title>
    <link href="/2024/05/10/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/05/10/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1>Git克隆和提交代码</h1><p>Progit中文版书籍：<a href="https://www.progit.cn/">https://www.progit.cn/</a></p><h2 id="准备">准备</h2><ul><li>windows系统先下载git，官方下载页：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>创建本地项目文件夹存储库并进入</li></ul><h2 id="配置">配置</h2><p>右键打开git bash，执行仓库初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment">#然后回车</span><br></code></pre></td></tr></table></figure><p>此时会在项目存储库生成<code>.git</code>文件夹及其内容</p><h3 id="设置个人信息">设置个人信息</h3><p>设置用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span>  <br></code></pre></td></tr></table></figure><p>查看用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br></code></pre></td></tr></table></figure><p>设置邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure><p>查看邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.email<br></code></pre></td></tr></table></figure><p>查看配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list <span class="hljs-comment">#可查看当前用户信息以及其他的一些信息</span><br></code></pre></td></tr></table></figure><h3 id="生成SSH密钥">生成SSH密钥</h3><p>指定文件名生成密钥（方便查看公钥以后要用的地方），否则文件名将用默认名称</p><p>指定密钥文件名为<code>gitee_id_rsa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br></code></pre></td></tr></table></figure><p>指定密钥文件名为<code>github_id_rsa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Github SSH Key&#x27;</span> -f ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure><hr><p>常用参数注释：</p><p>-t 加/解密算法类型（rsa、ed25519等）</p><p>-b 秘钥长度,rsa默认秘钥长度的为 2048</p><p>-C 注释，一般是填写用户名</p><p>-f 指定生成的秘钥文件名，如果不提供此参数则使用默认文件名，如rsa私钥默认文件名 ~/.ssh/id_rsa ，公钥默认文件名 ~/.ssh/id_rsa.pub</p><hr><p>首次生成SSH密钥会有三次询问，根据需要设置，想免密推送就不设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br>//生成一对RSA密钥<br>Generating public/private rsa key pair.<br>//密钥文件存储位置，直接回车使用默认路径<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/Users/user/.ssh/gitee_id_rsa):<br>//设置密码，若直接回车则不设置密码<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>//确认密码，和上步操作相同<br>Enter same passphrase again:<br>//文件存储位置<br>Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa<br>Your public key has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa.pub<br><br>The key fingerprint is:<br>SHA256:wXKzkWFbVONiEtSWPXjcjVy0oONsMYbBU59h7mlMwes Gitee SSH Key<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+---[RSA 3072]----+</span><br><span class="hljs-string">|       .*++B+B =o|</span><br><span class="hljs-string">|       o OB.XoO o|</span><br><span class="hljs-string">|      . Xo+B.*.. |</span><br><span class="hljs-string">|       o B+.B..  |</span><br><span class="hljs-string">|        S  +.=   |</span><br><span class="hljs-string">|          . .E   |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">+----[SHA256]-----+</span><br><span class="hljs-string"></span><br><span class="hljs-string">user@DESKTOP MINGW64 ~/Desktop</span><br></code></pre></td></tr></table></figure><h3 id="创建config文件">创建<code>config</code>文件</h3><p>进入生成的密钥文件夹，创建文件，文件名为<code>config</code>，没有后缀。然后添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_rsa<br><span class="hljs-comment"># github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure><p>注：<code>Host </code>和<code>HostName</code> 填写 git 服务器的域名，<code>IdentityFile</code> 指定私钥的路径</p><p>配置公钥到<code>Gitee</code>或<code>Github</code>：</p><ul><li>Gitee SSH配置地址在：个人资料的安全设置–&gt;SSH公钥</li><li>Github SSH配置地址在：用户头像–&gt;右侧边栏–&gt;Settings–&gt;Access–&gt;SSH and GPG keys</li></ul><p>查看生成的SSH公钥：</p><p>方式一：用记事本打开公钥文件，全选复制。</p><p>方式二：用<code>gitbash</code>查看</p><p>查看<code>.ssh</code>文件夹内的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh/<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">ls</span> ~/.ssh/<br>config        gitee_id_rsa.pub  github_id_rsa.pub  gitee_id_rsa  github_id_rsa<br></code></pre></td></tr></table></figure><ul><li>公钥文件为：<code>gitee_id_rsa.pub</code> 和<code>github_id_rsa.pub</code>，</li><li>私钥文件为：<code>gitee_id_rsa</code> 和<code>github_id_rsa</code></li></ul><p>查看公钥内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDchWfkihfqZgdV6/431en8mUN2dk5FtAJ0TkCYQJXq07nn51c9+3qNjbvxxygFDSOFIyG7nb34H2vAk8RL/drODtBPSxNhtxt/IuKSNNHF7hYt+nh8VqbNTMi9fJVEN6+bS7k7gLTY1IVDd4sUjEKw0mYzPgdHCAyubSARUYzATx2SOn9+6UAo1Iq2Ftt0OVMmoWueIe5E9nQWd8IANbrnvs9VbPYVP5fyPQez+/YT4HxGib5+hYXVEsFh/qN3JxbY3uK34mX3jJtz++ULcQPtS8w0AQWR94po6EH1TJvUWMlTOT8liGd9aebuFrZjjVibvQ6kVcApTtEDJXzeb00fqh3waNc8+vTTwpyzHXy8ictcLCbnAFHzgOJpS0tMgkof0U4p3pHrY4umQ5IHkq5aS2WDch6IHVy3mwRdzK91BAzIcNHMnVKAC528WT4KZ3ZdFjC6XxCoiwf6d8MBCxhMnMbm4i284RoQa9LYEuZtzWCcheYpTN7/knfDksrLiEE= Gitee SSH Key<br></code></pre></td></tr></table></figure><h3 id="测试">测试</h3><p>配置完成后回到<code>git bash</code>，测试配置的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@gitee.com<br>ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>成功后，显示如下内容：</p><p>测试<code>gitee</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@gitee.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>测试<code>github</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@github.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="克隆项目到本地">克隆项目到本地</h2><p>先进入之前创建的项目文件夹</p><h3 id="链接到远程库">链接到远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://git.oschina.net/xxxxxx/xxxxxx.git<br></code></pre></td></tr></table></figure><h3 id="克隆项目">克隆项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:AprilDawn/AprilDawn.gitee.io.git<br></code></pre></td></tr></table></figure><p>这样项目就下载到项目仓库了，现在就可以打开项目写代码了。</p><h2 id="项目提交">项目提交</h2><p>当完成代码后，进入克隆的项目里。</p><h3 id="添加文件">添加文件</h3><p>添加项目中新增或改动的文件到缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add . <br></code></pre></td></tr></table></figure><p>注：点表示添加目录下所有文件到缓存库,如果只添加某个文件,只需把 . 换成你要添加的文件名即可;</p><h3 id="添加注释">添加注释</h3><p>用以说明此次提交更改了哪些信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;新增什么功能，修复了什么BUG等等&quot;</span><br></code></pre></td></tr></table></figure><h3 id="推送提交到远程仓库">推送提交到远程仓库</h3><p>这是默认推送到master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>推送到指定分支</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 分支名<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs less">朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git add .<br><span class="hljs-attribute">warning</span>: LF will be replaced by CRLF in js/scroll-numbers.js.<br>The file will have its original line endings in your working directory<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git commit -m <span class="hljs-string">&quot;新增首页数字滚动效果&quot;</span><br>[master a4a9167] 新增首页数字滚动效果<br> <span class="hljs-number">2</span> files changed, <span class="hljs-number">85</span> <span class="hljs-built_in">insertions</span>(+), <span class="hljs-number">4</span> <span class="hljs-built_in">deletions</span>(-)<br> create mode <span class="hljs-number">100644</span> js/scroll-numbers.js<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git remote add origin <span class="hljs-attribute">https</span>:<span class="hljs-comment">//gitee.com/AprilDawn/Light-Year-Admin-Using-Iframe-v5.git</span><br><span class="hljs-attribute">error</span>: remote origin already exists.<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git pull origin master<br>From gitee.<span class="hljs-attribute">com</span>:AprilDawn/Light-Year-Admin-Using-Iframe-v5<br> * branch            master     -&gt; FETCH_HEAD<br>Already up to date.<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git push<br>Enumerating <span class="hljs-attribute">objects</span>: <span class="hljs-number">8</span>, done.<br>Counting <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">8</span>/<span class="hljs-number">8</span>), done.<br>Delta compression using up to <span class="hljs-number">8</span> threads<br>Compressing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), done.<br>Writing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), <span class="hljs-number">1.54</span> KiB | <span class="hljs-number">789.00</span> KiB/s, done.<br>Total <span class="hljs-number">5</span> (delta <span class="hljs-number">3</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span><br><span class="hljs-attribute">remote</span>: Powered by GITEE.COM [GNK-<span class="hljs-number">6.4</span>]<br>To gitee.<span class="hljs-attribute">com</span>:AprilDawn/Light-Year-Admin-Using-Iframe-v5.git<br>   <span class="hljs-number">92</span>bce9a..a4a9167  master -&gt; master<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config user.name<br>Axovi<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config --global user.name <span class="hljs-string">&quot;AprilDawn&quot;</span><br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config user.name<br>AprilDawn<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config user.email<br><span class="hljs-number">77489931</span>+Axovi<span class="hljs-variable">@users</span>.noreply.github.com<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config --global user.email <span class="hljs-string">&quot;zmqpersonal@163.com&quot;</span><br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config user.email<br>zmqpersonal<span class="hljs-variable">@163</span>.com<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git rebase -i HEAD~<span class="hljs-number">2</span><br>Stopped at a4a9167...  新增首页数字滚动效果<br>You can amend the commit now, with<br><br>  git commit --amend<br><br>Once you are satisfied with your changes, run<br><br>  git rebase --continue<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master|REBASE <span class="hljs-number">2</span>/<span class="hljs-number">2</span>)<br>$ git commit --amend --author=<span class="hljs-string">&quot;AprilDawn zmqpersonal@163.com&quot;</span><br><span class="hljs-attribute">fatal</span>: --author <span class="hljs-string">&#x27;AprilDawn zmqpersonal@163.com&#x27;</span> is <span class="hljs-keyword">not</span> <span class="hljs-string">&#x27;Name &lt;email&gt;&#x27;</span> <span class="hljs-keyword">and</span> matches no existing author<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master|REBASE <span class="hljs-number">2</span>/<span class="hljs-number">2</span>)<br>$ git commit --amend --author=<span class="hljs-string">&quot;AprilDawn &lt;zmqpersonal@163.com&gt;&quot;</span><br>[detached HEAD <span class="hljs-number">1439011</span>] 新增首页数字滚动效果<br> <span class="hljs-attribute">Date</span>: Mon Oct <span class="hljs-number">23</span> <span class="hljs-number">00</span>:<span class="hljs-number">16</span>:<span class="hljs-number">39</span> <span class="hljs-number">2023</span> +<span class="hljs-number">0800</span><br> <span class="hljs-number">2</span> files changed, <span class="hljs-number">85</span> <span class="hljs-built_in">insertions</span>(+), <span class="hljs-number">4</span> <span class="hljs-built_in">deletions</span>(-)<br> create mode <span class="hljs-number">100644</span> js/scroll-numbers.js<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master|REBASE <span class="hljs-number">2</span>/<span class="hljs-number">2</span>)<br>$ git rebase --continue<br>Successfully rebased <span class="hljs-keyword">and</span> updated refs/heads/master.<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git push --force<br>Enumerating <span class="hljs-attribute">objects</span>: <span class="hljs-number">8</span>, done.<br>Counting <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">8</span>/<span class="hljs-number">8</span>), done.<br>Delta compression using up to <span class="hljs-number">8</span> threads<br>Compressing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), done.<br>Writing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), <span class="hljs-number">1.53</span> KiB | <span class="hljs-number">784.00</span> KiB/s, done.<br>Total <span class="hljs-number">5</span> (delta <span class="hljs-number">3</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span><br><span class="hljs-attribute">remote</span>: Powered by GITEE.COM [GNK-<span class="hljs-number">6.4</span>]<br>To gitee.<span class="hljs-attribute">com</span>:AprilDawn/Light-Year-Admin-Using-Iframe-v5.git<br> + a4a9167...<span class="hljs-number">1439011</span> master -&gt; master (forced <span class="hljs-attribute">update</span>)<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config user.name<br>AprilDawn<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config --global user.name <span class="hljs-string">&quot;四月黎明&quot;</span><br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git config user.name<br>四月黎明<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git rebase -i HEAD~<span class="hljs-number">1</span><br>Stopped at <span class="hljs-number">1439011</span>...  新增首页数字滚动效果<br>You can amend the commit now, with<br><br>  git commit --amend<br><br>Once you are satisfied with your changes, run<br><br>  git rebase --continue<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master|REBASE <span class="hljs-number">1</span>/<span class="hljs-number">1</span>)<br>$ git commit --amend --author=<span class="hljs-string">&quot;AprilDawn^Czmqpersonal@163.com&gt;&quot;</span><br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master|REBASE <span class="hljs-number">1</span>/<span class="hljs-number">1</span>)<br>$ git commit --amend --author=<span class="hljs-string">&quot;四月黎明 &lt;zmqpersonal@163.com&gt;&quot;</span>                  [detached HEAD <span class="hljs-number">2</span>e06b8e] 新增首页数字滚动效果<br> <span class="hljs-attribute">Date</span>: Mon Oct <span class="hljs-number">23</span> <span class="hljs-number">00</span>:<span class="hljs-number">16</span>:<span class="hljs-number">39</span> <span class="hljs-number">2023</span> +<span class="hljs-number">0800</span><br> <span class="hljs-number">2</span> files changed, <span class="hljs-number">85</span> <span class="hljs-built_in">insertions</span>(+), <span class="hljs-number">4</span> <span class="hljs-built_in">deletions</span>(-)<br> create mode <span class="hljs-number">100644</span> js/scroll-numbers.js<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master|REBASE <span class="hljs-number">1</span>/<span class="hljs-number">1</span>)<br>$ git rebase --continue<br>Successfully rebased <span class="hljs-keyword">and</span> updated refs/heads/master.<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$ git push --force<br>Enumerating <span class="hljs-attribute">objects</span>: <span class="hljs-number">8</span>, done.<br>Counting <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">8</span>/<span class="hljs-number">8</span>), done.<br>Delta compression using up to <span class="hljs-number">8</span> threads<br>Compressing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), done.<br>Writing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">5</span>/<span class="hljs-number">5</span>), <span class="hljs-number">1.54</span> KiB | <span class="hljs-number">786.00</span> KiB/s, done.<br>Total <span class="hljs-number">5</span> (delta <span class="hljs-number">3</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span><br><span class="hljs-attribute">remote</span>: Powered by GITEE.COM [GNK-<span class="hljs-number">6.4</span>]<br>To gitee.<span class="hljs-attribute">com</span>:AprilDawn/Light-Year-Admin-Using-Iframe-v5.git<br> + <span class="hljs-number">1439011</span>...<span class="hljs-number">2</span>e06b8e master -&gt; master (forced <span class="hljs-attribute">update</span>)<br><br>朱美全<span class="hljs-variable">@DESKTOP-NHHHFLU</span> MINGW64 /e/gitproject/Light-Year-Admin-Using-Iframe-v5 (master)<br>$<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>版本控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志存储到MongoDB</title>
    <link href="/2024/04/06/%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8/"/>
    <url>/2024/04/06/%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1>日志存储</h1><h2 id="存储到MongoDB">存储到<code>MongoDB</code></h2><h3 id="依赖项">依赖项</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring AOP 动态代理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring整合MongoDB --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Spring-Boot配置文件"><code>Spring Boot</code>配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># spring配置</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-comment"># MongoDB数据库主机地址</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-comment"># 端口号</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">27017</span><br>      <span class="hljs-comment"># 所用数据库</span><br>      <span class="hljs-attr">database:</span> <span class="hljs-string">mydb</span><br>      <span class="hljs-comment"># username: root</span><br>      <span class="hljs-comment"># password: 123456</span><br>      <span class="hljs-comment"># auto-index-creation: true</span><br></code></pre></td></tr></table></figure><h3 id="实体类-MyLogs">实体类 <code>MyLogs</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aprildawn.questionaire_survey.utils;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.data.annotation.Id;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日志记录实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(collection = &quot;mylogs&quot;)</span><span class="hljs-comment">//设置MongoDB集合名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogInMongoDB</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主键id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所在包</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String packages;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String classname;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 方法名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String method;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志级别</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String level;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 请求时间</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String date;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户ip地址</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String ip;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户所用浏览器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String browser;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户终端系统</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String system;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户端请求端口：用户发起请求的客户端所使用的端口号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String remoteport;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务器响应端口：浏览器发送请求时连接到的服务器端口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String serverport;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 服务器本地端口：当前处理请求的服务器上的本地端口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String localport;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日志动态代理类-MyLogsConfig">日志动态代理类: <code>MyLogsConfig</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aprildawn.questionaire_survey.utils;<br><br><span class="hljs-keyword">import</span> eu.bitwalker.useragentutils.UserAgent;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Around;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.core.query.BasicQuery;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日志持久化到MongoDB</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogsConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br><br><br>    <span class="hljs-comment">//切点的注解  是指那些方法需要被执行&quot;AOP&quot;</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 公共切点方法 - 可以减少重复代码量</span><br><span class="hljs-comment">     * 用于指定要需要日志记录的类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.aprildawn.questionaire_survey.controller.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logPoinCut</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-comment">//定义一个切入点</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * [AOP 环绕通知]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinpoint 连接点</span><br><span class="hljs-comment">     * JoinPoint是连接点的意思我们要获取到的如类名，方法名，请求参数等都是从连接点中取出来的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Around(value=&quot;logPoinCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">afterLog</span><span class="hljs-params">(ProceedingJoinPoint joinpoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><br>        System.out.println(<span class="hljs-string">&quot;====================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;[AOP 环绕通知] 日志记录开始&quot;</span>);<br>        <span class="hljs-comment">//实例化日志实体对象</span><br>        <span class="hljs-type">MyLogs</span> <span class="hljs-variable">myLogs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLogs</span>();<br><br>        <span class="hljs-comment">//所在包位置</span><br>        myLogs.setPackages(joinpoint.getTarget().getClass().getPackageName());<br>        <span class="hljs-comment">//所在类名</span><br>        myLogs.setClassname(joinpoint.getTarget().getClass().getSimpleName());<br>        <span class="hljs-comment">//方法名</span><br>        myLogs.setMethod(joinpoint.getSignature().getName());<br>        <span class="hljs-comment">//方法传入参数名</span><br>        Object[] args = joinpoint.getArgs();<br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> Arrays.asList(args);<br>        <span class="hljs-comment">//System.out.println(list.get(0).toString() != null); true</span><br>        <span class="hljs-comment">//System.out.println(list.get(0).toString() != &quot;&#123;&#125;&quot;); false</span><br>        <span class="hljs-keyword">if</span> (list.get(<span class="hljs-number">0</span>).toString()!= <span class="hljs-literal">null</span>&amp;&amp;list.get(<span class="hljs-number">0</span>).toString()!=<span class="hljs-string">&quot;&#123;&#125;&quot;</span>)&#123;<br>            myLogs.setReqparam(list.toString());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            myLogs.setReqparam(<span class="hljs-string">&quot;NULL&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//实例化日志对象</span><br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span>  LoggerFactory.getLogger(joinpoint.getTarget().getClass());<br>        <span class="hljs-comment">//设置日志级别</span><br>        myLogs.setLevel(getLogLevel(logger));<br>        <span class="hljs-comment">//实例并初始化简单日期格式</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//设置日期</span><br>        myLogs.setDate(sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        <span class="hljs-comment">//获取用户代理信息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userAgent</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br>        <span class="hljs-comment">//通过用户代理对象解析解析用户代理信息</span><br>        <span class="hljs-type">UserAgent</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> UserAgent.parseUserAgentString(userAgent);<br>        <span class="hljs-comment">//获取用户访问所用浏览器</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">BrowserName</span> <span class="hljs-operator">=</span> agent.getBrowser().getName();<br>        <span class="hljs-comment">//获取用户访问设备系统</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">SystemName</span> <span class="hljs-operator">=</span> agent.getOperatingSystem().getName();<br>        System.out.println(<span class="hljs-string">&quot;客户端系统信息：\n浏览器：&quot;</span>+BrowserName+<span class="hljs-string">&quot;\n操作系统：&quot;</span>+SystemName);<br><br>        <span class="hljs-comment">//获取用户ip地址</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> request.getRemoteAddr();<br>        <span class="hljs-comment">//发起请求的客户端所使用的端口号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> request.getRemotePort();<br>        <span class="hljs-comment">//浏览器发送请求时连接到的服务器端口</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port1</span> <span class="hljs-operator">=</span> request.getServerPort();<br>        <span class="hljs-comment">//当前处理请求的服务器上的本地端口</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port2</span> <span class="hljs-operator">=</span> request.getLocalPort();<br><br>        myLogs.setIp(ip);<br>        myLogs.setBrowser(BrowserName);<br>        myLogs.setSystem(SystemName);<br>        myLogs.setRemoteport(String.valueOf(port));<br>        myLogs.setServerport(String.valueOf(port1));<br>        myLogs.setLocalport(String.valueOf(port2));<br><br><br>        <span class="hljs-comment">//持久化到MongoDB</span><br>        <span class="hljs-type">MyLogs</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> mongoTemplate.save(myLogs);<br><br>        System.out.println(<span class="hljs-string">&quot;[AOP 环绕通知] 日志记录完成！&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;====================================================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;返回值：&quot;</span>+ a);<br>        <span class="hljs-comment">//查询</span><br>        <span class="hljs-type">BasicQuery</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicQuery</span>(<span class="hljs-string">&quot;&#123; level :  &#x27;INFO&#x27; &#125;&quot;</span>);<span class="hljs-comment">//指定属性查询</span><br>        <span class="hljs-type">BasicQuery</span> <span class="hljs-variable">query1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicQuery</span>(<span class="hljs-string">&quot;&#123; date :  &#x27;INFO&#x27; &#125;&quot;</span>);<span class="hljs-comment">//指定时间范围查询</span><br>        List&lt;MyLogs&gt; result = mongoTemplate.find(query, MyLogs.class);<br>        System.out.println(<span class="hljs-string">&quot;MongoDB查询测试：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (MyLogs logs : result) &#123;<br>            System.out.println(logs.toString());<br>        &#125;<br><br>        <span class="hljs-comment">//修改</span><br>        <span class="hljs-comment">//BasicUpdate update = new BasicUpdate(&quot;&#123;id&#125;&quot;);</span><br><br>        <span class="hljs-comment">//删除</span><br>        System.out.println(<span class="hljs-string">&quot;====================================================&quot;</span>);<br><br>        <span class="hljs-comment">// 返回目标方法的返回值给外界调用者</span><br>        <span class="hljs-keyword">return</span> joinpoint.proceed(args);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取日志级别</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> logger 日志对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLogLevel</span><span class="hljs-params">(Logger logger)</span>&#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;TRACE&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (logger.isInfoEnabled()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;INFO&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;WARN&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (logger.isErrorEnabled()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NULL&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就配置好了，去使用吧！</p>]]></content>
    
    
    <categories>
      
      <category>日志存储</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冬夜畅想</title>
    <link href="/2024/01/31/SnowNight/"/>
    <url>/2024/01/31/SnowNight/</url>
    
    <content type="html"><![CDATA[<p>雪夜，<br>该有多少点燃的蜡烛，在倾听着天空飘洒的言语；<br>该有多少诗人升腾着灵感的火焰，澎湃着艺术的激情，吟唱着”千树万树梨花开“的壮美；<br>该有多少跃跃欲试的画家无力画出雪洁白的精神；<br>该有多少涌动的琴声用音符描绘着春的到来，再巧的手指又怎能弹出落雪美妙的音韵。<br>该有多少美妙的迎春花藤伸出梦境之外，每一处结开的苞蕾都酝酿着春的经历；<br>该有多少爱雪的人，想象落雪的情景喜悦如雨,，潮湿的心灵，长出新绿的叶片；<br>该有多少情人，借每一片雪花，飘飞着对爱情和人生的祝福。<br>——《落雪》</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven快速安装与配置指南</title>
    <link href="/2024/01/12/MavenInstall/"/>
    <url>/2024/01/12/MavenInstall/</url>
    
    <content type="html"><![CDATA[<p align="center">  <a href="https://maven.apache.org/"><img src="https://maven.apache.org/images/maven-logo-black-on-white.png" alt="Maven" width="300" /></a>  <br>  <br>  <a href="https://maven.apache.org/index.html">官网</a>  | <a href="https://maven.apache.org/docs/history.html">下载</a>  | <a href="https://mvnrepository.com/">仓库</a>  <br></p><h1>Maven快速安装与配置指南</h1><p>在官网留意如下信息：</p><table><thead><tr><th>发布时间(Release Date)</th><th>版本(Version)</th><th>必须JDK版本(Required Java Version)</th></tr></thead><tbody><tr><td><strong>2019 - 11 - 25</strong></td><td><strong>3.6.3</strong></td><td>Java 7</td></tr></tbody></table><p>确定所选<code>Maven</code>版本符合已安装的<code>Java</code>版本！</p><h2 id="安装">安装</h2><ul><li>[x] 首先确定已安装<a href="https://www.oracle.com/cn/java/technologies/downloads/">Java</a></li><li>[x] 确定Java最低版本符合Maven要求</li><li>[x] 确定已配置<code>JAVA_HOME</code>环境变量</li><li>[ ] 下载到自定义文件夹右键解压即可（绿色免安装）</li><li>[ ] <a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">在系统变量内配置<code>MAVEN_HOME</code>和<code>Path</code></a></li></ul><h3 id="环境变量">环境变量</h3><p>在系统变量内配置<code>MAVEN_HOME</code>和<code>Path</code></p><p>示例：</p><table><thead><tr><th>变量</th><th>值</th></tr></thead><tbody><tr><td><strong>MAVEN_HOME</strong></td><td><strong>D:\web\apache-maven-3.6.3</strong></td></tr><tr><td><strong>Path</strong></td><td><strong>%MAVEN_HOME%\bin</strong></td></tr></tbody></table><h2 id="测试">测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">mvn -v <br><span class="hljs-comment"># 输出版本信息即可，如果错误，请仔细检查环境变量即可！</span><br><span class="hljs-comment"># 友好提示，如果此处错误，绝大部分原因都是java_home变量的事，请仔细检查！！</span><br></code></pre></td></tr></table></figure><h2 id="配置">配置</h2><h3 id="Maven文件结构">Maven文件结构</h3><ul><li>文件夹 bin：含有Maven的运行脚本</li><li>文件夹 boot：含有类加载器框架</li><li>文件夹 conf：含有<code>settings.xml</code>配置文件</li><li>文件夹 lib：含有Maven运行时所需要的Java类库</li><li>LICENSE：Maven版权信息</li><li>NOTICE：第三方软件等简要介绍</li><li>README.txt：简述</li></ul><h3 id="修改Maven默认配置">修改Maven默认配置</h3><p>我们需要需改<code>maven/conf/settings.xml</code>配置文件，来修改maven的一些默认配置。我们主要休要修改的有三个配置：</p><p>1、依赖本地缓存位置（本地仓库位置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment"> | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment"> |</span><br><span class="hljs-comment"> | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- conf/settings.xml 55行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、配置国内阿里镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、以jdk17版本为例配置项目构建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-17<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、idea配置本地maven</p><blockquote><p>注意：idea工具默认自带maven配置软件，但是因为没有修改配置，建议替换成本地配置好的Maven！</p></blockquote><ol><li><p>打开idea配置文件，构建工具配置</p><p><strong>设置目录</strong>: <kbd>file</kbd> -&gt; <kbd>settings</kbd> -&gt; <kbd>build</kbd> -&gt; <kbd>build tool</kbd>-&gt; <kbd>maven</kbd></p></li><li><p>选中本地Maven</p><p>在<code>Maven home path</code>中选择自己的Maven路径（Maven根目录）</p></li><li><p>测试是否配置成功</p><p>选中本地Maven后，<code>Local repository</code>会自动变成自己配置的本地Maven仓库目录</p><p><strong>注意</strong>：如果本地仓库地址不变化，只有一个原因，就是<code>maven/conf/settings.xml</code>配置文件编写错误！仔细检查即可！</p></li></ol><h2 id="常见问题解答">常见问题解答</h2><h4 id="问题一：IDEA-依赖导入失败">问题一：IDEA 依赖导入失败</h4><h5 id="1-网络或Maven官方仓库宕机问题">1. 网络或Maven官方仓库宕机问题</h5><p>解决方案：检查网络连接和Maven官方仓库能否正常访问。</p><h5 id="2-依赖项信息错误问题">2.依赖项信息错误问题</h5><p>解决方案：检查所写依赖是否正确，在Maven仓库中是否存在</p><h5 id="3-本地Maven仓库被污染或损坏问题">3.本地Maven仓库被污染或损坏问题</h5><p>解决方案：去本地Maven仓库清除对应依赖的本地文件，重新刷新<code>pom.xml</code>文件下载即可！</p>]]></content>
    
    
    <categories>
      
      <category>安装指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scanner无法输入问题</title>
    <link href="/2023/11/27/EclipseCannotInput/"/>
    <url>/2023/11/27/EclipseCannotInput/</url>
    
    <content type="html"><![CDATA[<h1>Scanner无法输入问题</h1><h2 id="问题复现：">问题复现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tests</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br>System.out.println(<span class="hljs-string">&quot;请输入数字：&quot;</span>);<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//标志位</span><br><span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(flag++&lt;<span class="hljs-number">3</span>)&#123; <span class="hljs-comment">//有效次数为3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>a = scanner.nextInt();<span class="hljs-comment">//获取输入内容</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">//捕获异常，忽略本次，执行下一次输入</span><br>                flag--;<span class="hljs-comment">//回滚标志位，保证有效输入次数</span><br>                System.out.println(<span class="hljs-string">&quot;非法输入，请重新输入！&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//修复错误，执行下一次循环</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;输入内容为: &quot;</span>+a);<br>&#125;<br>scanner.close();<span class="hljs-comment">//关闭扫描器</span><br>        System.out.println(<span class="hljs-string">&quot;程序结束！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入非数字时，控制台输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">请输入数字：<br>a<br>非法输入，请重新输入！ <br>非法输入，请重新输入！ <br>非法输入，请重新输入！ <br>...<br></code></pre></td></tr></table></figure><p>问题：为什么捕获异常后，下次循环就不让重新输入内容，而仍是获取上次的数据呢？</p><p>回答：主要是因为scanner的机制是：scanner会扫描输入栈缓冲区，每次会先判断缓冲区内有没有输入的数据，如果有就执行next方法弹出并返回栈顶数据。如果没有，则等待用户输入数据。在这里，由于用户输入了字符，但数据返回的格式是整型数据，导致字符无法返回出来，所以缓冲区内就一直没清空，有数据就不会开启输入，每次调用都会返回栈顶元素却因格式不对弹不出来，栈顶元素与返回格式不一致，就会一直出现上次的错误。</p><h2 id="解决方法：">解决方法：</h2><h3 id="方法一：用string类型把数据输入栈缓冲区的栈顶数据取出来。">方法一：用string类型把数据输入栈缓冲区的栈顶数据取出来。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tests</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br>System.out.println(<span class="hljs-string">&quot;请输入数字：&quot;</span>);<br>        <span class="hljs-comment">//实例化Scanner</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//标志位</span><br><span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(flag++&lt;<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//有效次数为3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>a = scanner.nextInt();<span class="hljs-comment">//获取数字</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// 用字符型取出缓冲区栈顶的数据</span><br>b = scanner.next();<br>                flag--;<span class="hljs-comment">//回滚标志位，保证有效输入次数</span><br>System.out.println(<span class="hljs-string">&quot;非法输入，请重新输入！非法数据：&quot;</span>+b);<br>                <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//修复错误，执行下一次循环</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;输入内容为: &quot;</span>+a);<br>&#125;<br>scanner.close();<span class="hljs-comment">//关闭扫描器</span><br>System.out.println(<span class="hljs-string">&quot;程序结束！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入数字：<br><span class="hljs-number">1</span><br>输入内容为: <span class="hljs-number">1</span><br>a<br>非法输入，请重新输入！非法数据: a<br><span class="hljs-number">2</span><br>输入内容为: <span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>输入内容为: <span class="hljs-number">3</span><br>程序结束！<br></code></pre></td></tr></table></figure><h3 id="方法二：重置scanner">方法二：重置scanner</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tests</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br>System.out.println(<span class="hljs-string">&quot;请输入数字：&quot;</span>);<br>        <span class="hljs-comment">//实例化Scanner</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//标志位</span><br><span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(flag++&lt;<span class="hljs-number">3</span>)&#123;<span class="hljs-comment">//有效次数为3</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>a = scanner.nextInt();<span class="hljs-comment">//获取数字</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123; <span class="hljs-comment">//捕获非法输入</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> handle exception</span><br>scanner.reset();<span class="hljs-comment">//重置扫描器</span><br>scanner = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;非法输入，请重新输入！ &quot;</span>);<br>flag--;<span class="hljs-comment">//回滚标志位，保证有效输入次数</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//修复错误，执行下一次循环</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;输入内容为: &quot;</span>+a);<br>&#125;<br>scanner.close();<span class="hljs-comment">//关闭扫描器</span><br>System.out.println(<span class="hljs-string">&quot;程序结束！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">请输入数字：<br><span class="hljs-number">1</span><br>输入内容为: <span class="hljs-number">1</span><br>a<br>非法输入，请重新输入！ <br><span class="hljs-number">1</span><br>输入内容为: <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>输入内容为: <span class="hljs-number">2</span><br>程序结束！<br></code></pre></td></tr></table></figure><h3 id=""></h3>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
      <category>十万个为什么</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么手机开热点时，实时网速值会明显偏大？</title>
    <link href="/2023/11/15/WhyWLANDoubleSpeed/"/>
    <url>/2023/11/15/WhyWLANDoubleSpeed/</url>
    
    <content type="html"><![CDATA[<h1>为什么手机开热点时，实时网速值会明显偏大？</h1><h2 id="案例">案例</h2><p>在用手机开WLAN热点时，我们会发现这样一个现象，使用热点的设备全速下载可以看到手机网速达到了前所未有的高度,那网速通常是手机平时所到达不了的。平时我们用5G信号最快下载能到40M/s，但开了热点后，连接此热点的设备全速下载时，手机的网速却能显示到80M/s，不仅会想：这是我的手机打通任督二脉，突破自身极限了吗，还是说开热点使用流量会造成流量重复消耗呢？今天咱就来解释这个问题。</p><h2 id="简单解释">简单解释</h2><p>当手机开启热点时，就扮演了一个路由器的功能，当外围设备连接此热点，那么其访问互联网的数据就需要通过手机来中转。拆开来说，即外围设备访问互联网所用数据，会在手机上表现为先下载到手机，再将这数据上传给目标外围设备。只不过在这里是直接传过去，并不停留。</p><h2 id="过程剖析">过程剖析</h2><p>当然我们可以用公式来更直观的来了解这一过程。</p><p>其存在如下关系：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机实时网速</mtext></msub><mo>=</mo><msub><mi>V</mi><mtext>手机的实时上传速度</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>手机的实时下载速度</mtext></msub></mrow><annotation encoding="application/x-tex">V_{手机实时网速}  = V_{手机的实时上传速度} + V_{手机的实时下载速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>总接入设备实时网速</mtext></msub><mo>=</mo><msub><mi>V</mi><mtext>总接入设备实时上传</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>总接入设备的实时下载</mtext></msub></mrow><annotation encoding="application/x-tex">V_{总接入设备实时网速}  = V_{总接入设备实时上传} + V_{总接入设备的实时下载}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备实时上传</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时下载</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机的实时上传速度</mtext></msub><mo>=</mo><msub><mi>V</mi><mtext>手机应用的实时综合上传速度</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>总接入设备的实时下载速度</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>总接入设备的实时上传速度</mtext></msub></mrow><annotation encoding="application/x-tex">V_{手机的实时上传速度} = V_{手机应用的实时综合上传速度} + V_{总接入设备的实时下载速度} + V_{总接入设备的实时上传速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机应用的实时综合上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机的实时下载速度</mtext></msub><mo>=</mo><msub><mi>V</mi><mtext>手机应用的实时综合下载速度</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>总接入设备的实时下载速度</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>总接入设备的实时上传速度</mtext></msub></mrow><annotation encoding="application/x-tex">V_{手机的实时下载速度} = V_{手机应用的实时综合下载速度} + V_{总接入设备的实时下载速度} + V_{总接入设备的实时上传速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机应用的实时综合下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机的实时网速</mtext></msub><mo>=</mo><msub><mi>V</mi><mtext>手机应用的实时综合上传速度</mtext></msub><mo>+</mo><msub><mi>V</mi><mtext>手机应用的实时综合下载速度</mtext></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>V</mi><mtext>总接入设备的实时下载速度</mtext></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>V</mi><mtext>总接入设备的实时上传速度</mtext></msub></mrow><annotation encoding="application/x-tex">V_{手机的实时网速}= V_{手机应用的实时综合上传速度} + V_{手机应用的实时综合下载速度} + 2\times V_{总接入设备的实时下载速度} +2\times V_{总接入设备的实时上传速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机应用的实时综合上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机应用的实时综合下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>所以，当手机为空闲状态时，手机应用所占用的网速可忽略不计。</p><p>此时，即手机应用的实时综合速度= 0，那么，则有：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机的实时网速</mtext></msub><mo>=</mo><mn>2</mn><mo>×</mo><msub><mi>V</mi><mtext>总接入设备的实时下载速度</mtext></msub><mo>+</mo><mn>2</mn><mo>×</mo><msub><mi>V</mi><mtext>总接入设备的实时上传速度</mtext></msub></mrow><annotation encoding="application/x-tex">V_{手机的实时网速}=2\times V_{总接入设备的实时下载速度} +2\times V_{总接入设备的实时上传速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机的实时网速</mtext></msub><mo>=</mo><mn>2</mn><mo>×</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mtext>总接入设备的实时下载速度</mtext></msub><mo>+</mo><mo>×</mo><msub><mi>V</mi><mtext>总接入设备的实时上传速度</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V_{手机的实时网速}=2\times( V_{总接入设备的实时下载速度} +\times V_{总接入设备的实时上传速度})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时下载速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">×</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时上传速度</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mtext>手机的实时网速</mtext></msub><mo>=</mo><mn>2</mn><mo>×</mo><msub><mi>V</mi><mtext>总接入设备的实时网速</mtext></msub></mrow><annotation encoding="application/x-tex">V_{手机的实时网速}=2\times V_{总接入设备的实时网速}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">手机的实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">总接入设备的实时网速</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="结论">结论</h2><p>因此得出结论：在手机应用的网速忽略不计的情况下，开热点后，手机的实时网速显示为总接入设备实时网速的两倍。</p><p>所以，这就是手机开热点时，实时网速值会明显偏大的原因。</p><p>当然，这并不意味着我们那每月那仅有的手机流量也会双倍消耗，流量只消耗互联网与手机直接通信产生的数据。热点（手机）与接入设备通信属于是局域网通信了，局域网通信是不消耗流量的。</p><h2 id="补充">补充</h2><p>经过测试，手机使用USB进行网络共享也是如此。</p>]]></content>
    
    
    <categories>
      
      <category>十万个为什么</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WLAN</tag>
      
      <tag>网络共享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL在线安装指南</title>
    <link href="/2023/11/06/InstallMySQL/"/>
    <url>/2023/11/06/InstallMySQL/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1><strong>MySQL在线安装指南（Linux）</strong></h1><p>说明：</p><ul><li>Linux版本为：CentOS 7</li><li>MySQL版本为：mysql-8.0</li><li>终端为：FinalShell</li></ul><h3 id="一、首次安装MySQL">一、首次安装MySQL</h3><h5 id="1-输入以下命令，获取rpm文件">1.输入以下命令，获取rpm文件</h5><p>（ps：下载文件等一会就好）</p><ul><li>输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">wget -i -c https:<span class="hljs-comment">//dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></code></pre></td></tr></table></figure><p>如果显示wget未找到命令，则需要先安装wget：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install wget<br></code></pre></td></tr></table></figure><p>此时，如果进入目录/etc/yum.repos.d（命令：cd /etc/yum.repos.d   之后输入命令：ls ）</p><p>可以看到新增了两个文件:</p><p>mysql-community.repo</p><p>mysql-community-source.repo</p><h5 id="2-安装MySQL需要的RPM文件">2.安装MySQL需要的RPM文件</h5><ul><li>输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install mysql80-community-release-el7-<span class="hljs-number">3.</span>noarch.rpm<br></code></pre></td></tr></table></figure><h5 id="3-安装MySQL">3.安装MySQL</h5><h6 id="（ps：下载文件等一会就好）">（ps：下载文件等一会就好）</h6><ul><li>输入命令：（这里如果出现问题）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum -y install mysql-community-server<br></code></pre></td></tr></table></figure><ul><li><p>这里如果出现问题:Error Unable to find a match : mysql-community-server</p></li><li><p>则输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">yum module disable mysql<br>yum -y install mysql-community-server<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-启动MySQL">4.启动MySQL</h5><h6 id="ps：安装完成后，就可以启动了">(ps：安装完成后，就可以启动了)</h6><ul><li>启动命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">service mysqld start<br></code></pre></td></tr></table></figure><ul><li>检测mysql是否正在启动命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl|grep mysql<br></code></pre></td></tr></table></figure><ul><li>如果出现以下情况，则已经成功启动（首次安装一般很安全，不会有什么错误）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mysqld.service                         loaded active running   MySQL Server<br></code></pre></td></tr></table></figure><h5 id="5-开机自启">5.开机自启</h5><h6 id="ps：若不想每次手动启动，则可以让其开机自启">(ps：若不想每次手动启动，则可以让其开机自启)</h6><ul><li>输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl enable mysqld<br></code></pre></td></tr></table></figure><ul><li>再输入命令：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">systemctl daemon-reload<br></code></pre></td></tr></table></figure><h5 id="6-修改初始密码">6.修改初始密码</h5><h6 id="（ps：MySQL初始密码是自动随机生成的，需要修改后使用）">（ps：MySQL初始密码是自动随机生成的，需要修改后使用）</h6><ol><li>默认密码保存在/var/log/mysqld.log文件中</li><li>我们需要进入MySQL日志文件查看初始密码：</li></ol><ul><li>输入命令，打开日志文件：l9pfsN=&amp;LE7s</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">vi /<span class="hljs-keyword">var</span>/log/mysqld.log<br></code></pre></td></tr></table></figure><ul><li>找到日志中的这么一行，root@localhost：之后的  GEu9UZmZqu+y  就是初始密码（看看自己的是多少）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2021</span>-<span class="hljs-number">02</span>-01T11:<span class="hljs-number">10</span>:<span class="hljs-number">03.</span>616082Z <span class="hljs-number">1</span> [Note] A temporary password is generated <span class="hljs-keyword">for</span> root<span class="hljs-meta">@localhost</span>: GEu9UZmZqu+y<br></code></pre></td></tr></table></figure><p>然后按一下Esc键，再输入:wq退出文件模式</p><ul><li>输入以下命令，进入MySQL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -u root -p<br></code></pre></td></tr></table></figure><p>根据提示输入之前在日志文件内的初始密码（密码默认在屏幕上不显示，但输入有效）后，即可进入MySQL</p><p>原来一开始是没有密码的,在初始化的时候有个密码,只是相当于临时密码:<br>直接执行设置密码即可:</p><ul><li>修改密码命令（例如Asd@126.com）</li><li>MySQL默认的密码策略是要包含数字、字母及特殊字符（区分大小写）；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter user user() identified by &quot;Asd@126.com&quot;;<br></code></pre></td></tr></table></figure><p>如果出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<br></code></pre></td></tr></table></figure><p>这是因为密码太简单了，可以把密码设的复杂一点或者百度降低密码策略等级。</p><p>（ps：我的示例代码是没问题的哦，可以参考）</p><p><strong>注意：Mysql有自己的密码策略，默认密码策略等级是1，即MEDIUM，中等级别。</strong></p><p>除此之外还有0，即LOW，简单级别。2，即STRONG，复杂级别。复杂级别需要提供密码字典文件。</p><p>详细内容可自行百度查询，这里不再赘述…（ps：嗯，只说自己实践过的，这里没试过，就不说了）</p><p>然后需要给改过的密码授权远程访问权限</p><p>（ps：可以用数据库软件远程连接）</p><ul><li>授权命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;Asd@126.com&#x27;;<br>grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;Asd@126.com&#x27;;<br></code></pre></td></tr></table></figure><p><strong>注意：’  '里输入自己设置的mysql密码。</strong></p><ul><li>刷新授权</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">flush privileges;<br></code></pre></td></tr></table></figure><p>然后退出MySQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">exit<br></code></pre></td></tr></table></figure><h5 id="6-开放MySQL端口">6.开放MySQL端口</h5><p><strong>注：阿里的服务器可直接在控制台开放端口，虚拟机的话必须这么弄</strong></p><ul><li>在防火墙开放端口3306</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">firewall-cmd --zone=<span class="hljs-keyword">public</span> --add-port=<span class="hljs-number">3306</span>/tcp --permanent<br></code></pre></td></tr></table></figure><ul><li>刷新防火墙规则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>然后就可以用数据库软件navicat或者SQLyog来远程连接数据库了</p><p>主机名或IP地址输入你虚拟机的IP，然后测试连接，如果没成功可再重开放一次端口后进行尝试。</p><h2 id="二、卸载后重装MySQL">二、卸载后重装MySQL</h2><p>安装方式和首次安装的步骤一样，区别在于有没有卸载干净之前安装的MySQL</p><h3 id="1-卸载MySQL">1.卸载MySQL</h3><ul><li>查看已安装的mysql</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rpm -qa | grep -i mysql<br></code></pre></td></tr></table></figure><ul><li>逐个卸载列出的文件(这里命令示例的是MySQL5.7)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">yum remove mysql-community-server-<span class="hljs-number">5.7</span><span class="hljs-number">.33</span>-<span class="hljs-number">1.</span>el7.x86_64<br></code></pre></td></tr></table></figure><ul><li>最重要的一步，删除lib下的mysql文件和log下的mysql.log日志文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rm -R /<span class="hljs-keyword">var</span>/lib/mysql<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">/<span class="hljs-keyword">var</span>/log/mysql.log<br></code></pre></td></tr></table></figure><h3 id="2-再次安装MySQL">2.再次安装MySQL</h3><p><strong>注：重复首次安装步骤即可</strong></p>]]></content>
    
    
    <categories>
      
      <category>安装指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习笔记二</title>
    <link href="/2023/10/25/MyBatis_2/"/>
    <url>/2023/10/25/MyBatis_2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文是第二篇MyBatis的学习笔记，这次的比较深入理论，记录各个分部的功能和作用。</p></blockquote><span id="more"></span><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis"></p><hr><h2 id="一、XML配置">一、XML配置</h2><h3 id="1-属性（properties）">1.属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 用于连接外部配置文件 --&gt;</span><br><span class="hljs-comment">&lt;!--    外部配置文件路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--同名配置优先使用外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有三种内建的数据源类型（也就是 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-类型别名（typeAliases）">2.类型别名（typeAliases）</h3><p>1.类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p><p>2.也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.zmq.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>实体类比较少的时候，用第一种方式。</p><p>若实体类非常多，则建议用第二种。</p><p>第一种可以DIY别名，第二种不行。如果非要改，要在实体类添加注解</p><h3 id="3-设置（settings）">3.设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>   <br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useColumnLabel&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;useGeneratedKeys&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PARTIAL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WARNING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultExecutorType&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SIMPLE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultFetchSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;localCacheScope&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SESSION&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;OTHER&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-映射器（mappers）">4.映射器（mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p><p>方式一：【推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><p>方式四：扫描包进行绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些配置会告诉 MyBatis 去哪里找映射文件</p><h2 id="二、XML映射文件">二、XML映射文件</h2><h3 id="1-结果映射">1.结果映射</h3><h4 id="1-resultMap"><code>1.resultMap</code></h4><p>结果集映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>   name   <span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">id</span>   name   password<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    结果集映射--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>            select * from mydb.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>特点：</p><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂语句，描述他们的关系就可以</li></ul><h3 id="2-日志工厂">2.日志工厂</h3><h4 id="1-STDOUT-LOGGING标准日志">1.STDOUT_LOGGING标准日志</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标准日志工厂实现--&gt;</span><br>    <span class="hljs-comment">&lt;!--  日志的值：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一次id查询的控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>Opening JDBC Connection<br>Created connection 786041152.<br>Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>==&gt;  Preparing: select * from mydb.user where id = ? <br>==&gt; Parameters: 1(Integer)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: 1, alice, 123456<br>&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;alice&#x27;, password=&#x27;123456&#x27;&#125;<br>Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@2eda0940]<br>Returned connection 786041152 to pool.<br><br>Process finished with exit code 0<br></code></pre></td></tr></table></figure><h4 id="2-LOG4J">2.LOG4J</h4><p>引入Log4j依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加入log4j支持 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Log4j配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-attr">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-attr">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-attr">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-attr">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-attr">log4j.appender.file.File</span>=<span class="hljs-string">./log/zmq.log</span><br><span class="hljs-attr">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-attr">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-attr">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><p>一次id查询的控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.<br>[org.apache.ibatis.logging.LogFactory]-Logging initialized using &#x27;class org.apache.ibatis.logging.log4j.Log4jImpl&#x27; adapter.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-PooledDataSource forcefully closed/removed all connections.<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection 660879561.<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[com.zmq.dao.UserDao.getUserById]-==&gt;  Preparing: select * from mydb.user where id = ? <br>[com.zmq.dao.UserDao.getUserById]-==&gt; Parameters: 1(Integer)<br>[com.zmq.dao.UserDao.getUserById]-&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;alice&#x27;, password=&#x27;123456&#x27;&#125;<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@276438c9]<br>[org.apache.ibatis.datasource.pooled.PooledDataSource]-Returned connection 660879561 to pool.<br></code></pre></td></tr></table></figure><p>简单使用</p><p>1.在要使用的log4j的类中，导入包import org.apache.log4j.Logger;</p><p>2.日志对象，参数为当前类的Class</p><p>3.日志级别</p><h2 id="三、分页">三、分页</h2><p>减少数据处理量</p><h4 id="1-使用limit分页">1.使用limit分页</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">语法：<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> startIndex,pagesize;<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>;#[0,n]<br></code></pre></td></tr></table></figure><p>使用Mybatis实现分页，核心SQL</p><p>1.接口</p><p>2.Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from mydb.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页查询测试</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByLimit</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        HashMap&lt;String,Integer&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Integer&gt;();<br>        map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">1</span>);<br>        map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br>        List&lt;User&gt; userList = userDao.getUserByLimit(map);<br>        <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-RowBounds分页">2.RowBounds分页</h4><p>不再使用SQL 实现分页</p><p>1.接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页二</span><br><span class="hljs-comment">//UserDao.java</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>2.mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Mapper.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>        select * from mydb.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserByRowBounds</span><span class="hljs-params">()</span>&#123;<br><br>       <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>       <span class="hljs-comment">//获取sqlSession对象</span><br>       <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>       List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.zmq.dao.UserDao.getUserByRowBounds&quot;</span>,<span class="hljs-literal">null</span>,rowBounds);<br><br>       <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>           System.out.println(user);<br>       &#125;<br>       <span class="hljs-comment">//关闭sqlSession</span><br>       sqlSession.close();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="3-分页插件">3.分页插件</h4><h5 id="pagehelper">pagehelper</h5><p><a href="https://pagehelper.github.io/docs/howtouse/">官方文档</a></p><p>官方文档写的很详细，这里不再展开</p><h2 id="四、注解">四、注解</h2><h4 id="1-注解在接口实现">1.注解在接口实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@select(&quot;select * from user&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span>;<br><br><span class="hljs-comment">//有多个参数时，必须加@Param注解</span><br><span class="hljs-meta">@Select(&quot;Select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;&quot;)</span><br>User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id，<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;<br><br><span class="hljs-comment">//引用对象不需要写@Param</span><br><span class="hljs-meta">@Insert(&quot;insert into User&#123;id,name,password&#125; values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-comment">//引用对象不需要写@Param</span><br><span class="hljs-meta">@Update(&quot;update User set name=#&#123;name&#125;,pwd=#&#123;passwoord&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">UpdateUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-comment">//删除</span><br><span class="hljs-meta">@Delete(&quot;delete * from user where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delUser</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><h4 id="2-核心配置文件绑定接口">2.核心配置文件绑定接口</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.zmq.dao.UserDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-测试">3.测试</h4><p>本质：反射机制实现</p><p>底层：动态代理</p><p>对于像 BlogMapper 这样的映射器类来说，还有另一种方法来完成语句映射。</p><p>它们映射的语句可以不用 XML 来配置，而可以使用 Java 注解来配置。比如，上面的 XML         示例可以被替换成如下的配置：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> org.mybatis.example;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BlogMapper</span> </span>&#123;<br>  <span class="hljs-meta">@Select</span>(<span class="hljs-string">&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;</span>)<br>  <span class="hljs-function">Blog <span class="hljs-title">selectBlog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​         使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java  注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p><p>​         选择何种方式来配置映射，以及认为是否应该要统一映射语句定义的形式，完全取决于你和你的团队。         换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和 XML         的语句映射方式间自由移植和切换。</p><h4 id="4-CRUD">4.CRUD</h4><p>注：查询是不需要提交事务的！涉及数据库变动的才需要！</p><p>我们可以在工具类的时候实现自动提交事务！</p><p>但是开发测试时，推荐设置为非自动提交，可以防止提交错误的东西进数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//SqlSession 完全包含了面向数据库执行SQL命令的所有方法public static SqlSession getSqlSession()&#123;</span><br><span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><p>此处省略。</p><p>方法如4.1代码所示。</p><p><strong>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</strong></p><h5 id="关于-Param-注解：">关于@Param()注解：</h5><ul><li>基本类型的参数是String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名 ！</li></ul><h5 id="这里说一下-和-的区别：">这里说一下#{}和${}的区别：</h5><ul><li>#{}是预编译处理，${}是字符串替换。</li><li>Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的 set 方法来赋值；</li><li>Mybatis 在处理<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow></mrow><mtext>时，就是把</mtext></mrow><annotation encoding="application/x-tex">{}时，就是把</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord"></span><span class="mord cjk_fallback">时，就是把</span></span></span></span>{}替换成变量的值。</li><li>使用#{}可以有效的防止 SQL 注入，提高系统安全性。</li></ul><p>Mybatis排序时使用order by动态参数时，使用${}，而不是#{}</p><h4 id="5-Lombok">5.Lombok</h4><ul><li>是一个Java库</li><li>也是个插件</li><li>也是个工具</li><li>再也不用写get,set等方法了，只需要在类上加注解就可以</li><li>一个可以偷懒的，解决你手动写get和set方法的第三方插件</li></ul><p>使用步骤：</p><ol><li><p>在IDEA中安装Lombok插件！</p></li><li><p>导入jar包（<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok">去Maven仓库搜索</a>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这是我写笔记的时候的最新版，追求稳定就用使用人数多的 --&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上加注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-comment">//无参构造，get和set，tostring,equals和hashcode方法</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">//所有构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">//构建了有参，无参会隐藏，必须显式无参构造</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Lombok可以使用的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span>  -----&gt;Get和Set方法，可以放在类上（构建所有），也可以放在字段上（指定单个构建）<br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span>   -----&gt;ToString方法<br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>  -----&gt;所有构造方法<br><span class="hljs-meta">@RequiredArgsConstructor</span>  -----&gt;有参构造方法<br><span class="hljs-meta">@NoArgsConstructor</span>  -----&gt;无参构造方法<br><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span>, <span class="hljs-meta">@CustomLog</span><br><span class="hljs-meta">@Data</span>  -----&gt;无参构造，get和set，tostring,equals和hashcode方法<br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@With</span><br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@val</span><br><span class="hljs-meta">@var</span><br>experimental <span class="hljs-meta">@var</span><br><span class="hljs-meta">@UtilityClass</span><br></code></pre></td></tr></table></figure><p><code>注：@RequiredArgsConstructor</code>在类上使用，这个注解可以生成带参或者不带参的构造方法。<br>若带参数，只能是类中所有带有<code>@NonNull</code>注解的和以<code>final</code>修饰的未经初始化的字段，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-comment">//但这里爆红未初始化变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以平常还是直接这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><br><span class="hljs-comment">//无参构造，get和set，tostring,equals和hashcode方法</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-comment">//所有构造方法</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-comment">//构建了有参，无参会隐藏，必须显式无参构造</span><br><span class="hljs-comment">//有参构造如果要重载的话，还是要自己写代码的</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：此工具看工作环境，用不用看自己，适合开发的才是王道。</p></li></ol><h2 id="五、关系映射">五、关系映射</h2><h3 id="1-多对一关系">1.多对一关系</h3><p>多对一：多个学生对应一个老师-----&gt;关联</p><p>一对多：一个老师教一群学生---------&gt;集合</p><hr><p>注意：</p><p>​多表关联一般会用到外键，外键本身是为了实现强一致性，所以如果需要正确性&gt;性能的话，还是建议使用外键，它可以让我们在数据库的层面保证数据的完整性和一致性。</p><p>​当然不用外键，你也可以在业务层进行实现。不过，这样做也同样存在一定的风险，因为这样，就会让业务逻辑会与数据具备一定的耦合性。也就是业务逻辑和数据必须同时修改。而且在工作中，业务层可能会经常发生变化。</p><p>​当然，很多互联网的公司，尤其是超大型的数据应用场景，大量的插入，更新和删除在外键的约束下会降低性能，同时数据库在水平拆分和分库的情况下，数据库端也做不到执行外键约束。另外，在高并发的情况下，外键的存在也会造成额外的开销。因为每次更新数据，都需要检查另外一张表的数据，也容易造成死锁。<br>所以在这种情况下，尤其是大型项目中后期，可以采用业务层来实现，取消外键提高效率。</p><p>​不过在SQL学习之初，包括在系统最初设计的时候，还是建议你采用规范的数据库设计，也就是采用外键来对数据表进行约束。因为这样可以建立一个强一致性，可靠性高的数据库结构，也不需要在业务层来实现过多的检查。<br>​当然在项目后期，业务量增大的情况下，你需要更多考虑到数据库性能问题，可以取消外键的约束，转移到业务层来实现。而且在大型互联网项目中，考虑到分库分表的情况，也会降低外键的使用。</p><p>​不过在SQL学习，以及项目早期，还是建议你使用外键。在项目后期，你可以分析有哪些外键造成了过多的性能消耗。一般遵循2/8原则，会有20%的外键造成80%的资源效率，你可以只把这20%的外键进行开放，采用业务层逻辑来进行实现，当然你需要保证业务层的实现没有错误。不同阶段，考虑的问题不同。当用户和业务量增大的时候，对于大型互联网应用，也会通过减少外键的使用，来减低死锁发生的概率，提高并发处理能力。</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/* 多对一训练数据库准备 */<br>/* 数据库首次执行 */<br>USE mydb<br><br>/* 数据库第二次执行 */<br>/* 创建teacher表 */<br>CREATE TABLE `teacher`(<br>`id` INT(10) NOT NULL,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    PRIMARY KEY (`id`)<br>)ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>/* 数据库第三次执行 */<br>/* 往teacher表插入数据 */<br>INSERT INTO teacher(`id`,`name`) VALUES (1,&#x27;艾莎&#x27;);<br><br>/* 数据库第四次执行 */<br>/* 创建student表 */<br>CREATE TABLE `student`(<br>`id` INT(10) NOT NULL,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    `tid` INT(10) DEFAULT NULL,<br>    PRIMARY KEY (`id`),<br>    KEY `fktid` (`tid`),<br>    CONSTRAINT `fktid` FOREIGN KEY (`tid`) REFERENCES `teacher` (`id`)<br>)ENGINE=INNODB DEFAULT CHARSET=utf8<br><br>/* 数据库第五次执行 */<br>/* 往Student表插入数据 */<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (1,&#x27;张三&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (2,&#x27;李四&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (3,&#x27;王五&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (4,&#x27;赵六&#x27;,1);<br>INSERT INTO student(`id`,`name`,`tid`) VALUES (5,&#x27;孙七&#x27;,1);<br></code></pre></td></tr></table></figure><h4 id="（1）测试环境搭建">（1）测试环境搭建</h4><p>1.导入lombok（可选，自己喜欢就用）</p><p>2.新建实体类 Teacher,Student</p><p>3.建立Mapper 接口</p><p>4.建立Mapper.xml文件</p><p>5.在核心配置文件中绑定注册我们的Mapper接口或文件！【方式很多，随心选】</p><p>6.测试查询是否能成功！</p><h4 id="（2）按照查询嵌套处理">（2）按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.StudentMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        思路：</span><br><span class="hljs-comment">             1.查询所有学生信息</span><br><span class="hljs-comment">             2.根据查询出来的学生的id，寻找对应的老师</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>        select * from student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--  复杂的属性，我们需要单独处理 对象： association 集合：collection --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）按照结果嵌套处理">（3）按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按照结果嵌套处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>        select  s.id sid,s.name sname,t.name tname<br>        from student s,teacher t<br>        where s.tid = t.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-一对多处理">2.一对多处理</h3><p>一个老师拥有多个学生----------&gt;对于老师来说，就是一对多的关系！</p><h4 id="（1）测试环境搭建-2">（1）测试环境搭建</h4><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; student;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tid;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.Teacher;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TeacherMapper</span> &#123;<br><br>    <span class="hljs-comment">//获取指定老师的学生和老师的信息</span><br>    Teacher <span class="hljs-title function_">getTeacher2</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br><br>    Teacher <span class="hljs-title function_">getTeacher3</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tid&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）按照查询嵌套处理-2">（2）按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按结果嵌套查询--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>        select s.id sid,s.name sname,t.name tname,t.id tid<br>        from student s,teacher t<br>        where s.tid = t.id and t.id = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--        javatype指定属性的类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）按照结果嵌套处理-2">（3）按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 按照查询嵌套处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher3&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>        select * from teacher where id = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ofType泛型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select * from student where tid = #&#123;tid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="小结">小结</h4><ol><li>关联 - association 【多对一】</li><li>集合 - collection 【一对多】</li><li>JavaType &amp; oftype<ol><li>javaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型。</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><h2 id="六、动态SQL">六、动态SQL</h2><p>简单讲，动态SQL就是指根据不同的条件生成不同的SQL语句。</p><h3 id="1-搭建环境">1. 搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog`(<br>`id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>    `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>    `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>    `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>    `views` <span class="hljs-type">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>)ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br></code></pre></td></tr></table></figure><h3 id="2-创建一个基础工程">2. 创建一个基础工程</h3><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写实体类对应的Mapper接口和Mapper.xml文件</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.Blog;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BlogMapper</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addBlog</span><span class="hljs-params">(Blog blog)</span>;<br>    <br>    <span class="hljs-comment">//SQL动态查询IF</span><br>    List&lt;Blog&gt; <span class="hljs-title function_">queryBlogIF</span><span class="hljs-params">(Map map)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.BlogMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>        insert into blog(id,title,author,create_time,views)<br>        values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--    动态SQL查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  where 1=1 必定能查出东西，就是参数为空的时候查所有数据 --&gt;</span><br>        select * from blog where 1=1<br>        <span class="hljs-comment">&lt;!--  如果title不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  如果author不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.zmq.dao.BlogMapper;<br><span class="hljs-keyword">import</span> com.zmq.pojo.Blog;<br><span class="hljs-keyword">import</span> com.zmq.utils.IDUtils;<br><span class="hljs-keyword">import</span> com.zmq.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mytest</span> &#123;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>        <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blog</span>();<br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记&quot;</span>);<br>        blog.setAuthor(<span class="hljs-string">&quot;星空&quot;</span>);<br>        blog.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        blog.setViews(<span class="hljs-number">233</span>);<br><br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记2&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记3&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        blog.setId(IDUtils.getId());<br>        blog.setTitle(<span class="hljs-string">&quot;Java学习笔记4&quot;</span>);<br>        mapper.addBlog(blog);<br><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;幻境&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;Mybatis学习笔记&quot;</span>);<br>        <span class="hljs-comment">//这里的map空值也能查出东西，不是空值就会判断进行SQL拼接</span><br>        List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);<br>        <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>            System.out.println(blog);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-元素种类">3.元素种类</h3><h4 id="（1）IF">（1）IF</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    动态SQL查询  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  where 1=1 必定能查出东西，就是参数为空的时候查所有数据 --&gt;</span><br>        select * from blog where 1=1<br>        <span class="hljs-comment">&lt;!--  如果title不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--  如果author不为空，则进行SQL拼接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）Choose-when，otherwise">（2）Choose(when，otherwise)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                and title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（3）trim-where，set">（3）trim(where，set)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--  解决Where查询只有第二个有参数时直接拼接and的错误问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            and title = #&#123;title&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            and author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：<em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</p><h5 id="SQL片段">SQL片段</h5><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p><p>1.使用SQL标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>       and title = #&#123;title&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>       and author = #&#123;author&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.在需要的地方使用include标签引用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>    select * from blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>最好基于单表来定义SQL片段。（适合简单的查询复用）</li><li>不要存在where标签</li></ul><h4 id="（4）Forsech">（4）Forsech</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  </span><br><span class="hljs-comment">    select * from blog where 1=1 and (id =1 or id=2 or id = 3) </span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    我们现在传递一个万能的map，在map中可以存在一个集合！</span><br><span class="hljs-comment"> --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queyBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>        select * from blog<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>                id = #&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-type">BlogMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BlogMapper.class);<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    ArrayList&lt;Integer&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>    ids.add(<span class="hljs-number">1</span>);<br>    ids.add(<span class="hljs-number">2</span>);<br>    ids.add(<span class="hljs-number">3</span>);<br>    map.put(<span class="hljs-string">&quot;ids&quot;</span>,ids);<br><br>    List&lt;Blog&gt; blogList = mapper.queyBlogForeach(map);<br><br>    <span class="hljs-keyword">for</span> (Blog blog : blogList) &#123;<br>        System.out.println(blog);<br>    &#125;<br><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码。</p><p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式去排列组合就好了。</p><p>建议：</p><p>先在MySQL中写出完整的SQL再去对应的去修改成为我们的动态SQL实现通用即可！</p><h2 id="七、缓存（了解）">七、缓存（了解）</h2><h3 id="1-简介">1.简介</h3><blockquote><p>查询：连接数据库，耗资源！</p><p>一次查询的结果，给他暂存在一个可以直接取到的地方！–&gt;内存：缓存</p><p>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了。</p></blockquote><p>(1) 什么是缓存【Cache】?</p><p>存在内存中的临时数据。</p><p>将用户经常查询的数据放在缓存中，用户去查询数据就不用从磁盘上直接查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p><p>(2) 为什么使用缓存?</p><p>减少和数据库的交互次数，减小系统开销，提高系统效率。</p><p>(3) 什么样的数据能使用缓存?</p><p>经常查询并且不经常改变的数据（经常读取而不是写入的）</p><h3 id="2-MyBatis缓存">2.MyBatis缓存</h3><p>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便地定制和配置缓存。缓存可以极大地提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存</p><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存</li></ul><h3 id="3-一级缓存">3.一级缓存</h3><p>一级缓存也叫本地缓存：SqlSession</p><p>与数据库同一次会话期间查询到的数据会放在本地缓存中。</p><p>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserLike</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//获取sqlSession对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>    <span class="hljs-comment">//sqlSession.getMapper(UserDao.class);后ALT+回车生成赋给的对象UserDao</span><br>    <span class="hljs-comment">//这里要拿SQL，从Dao包里拿，面向接口编程，可以直接从UserDao接口里拿</span><br>    <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>    <span class="hljs-comment">//执行方法</span><br>    List&lt;User&gt; userList = userDao.getUserLike(<span class="hljs-string">&quot;张&quot;</span>);<br><br>    <span class="hljs-comment">//增强For循环输出</span><br>    <span class="hljs-keyword">for</span>(User user:userList)&#123;<br>        System.out.println(user);<br>    &#125;<br>    List&lt;User&gt; user = userDao.getUserLike(<span class="hljs-string">&quot;张&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (User user1 : user) &#123;<br>        System.out.println(user1);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭sqlSession</span><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Opening JDBC Connection<br>Created connection <span class="hljs-number">1075738627.</span><br>Setting autocommit to <span class="hljs-literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>==&gt;  Preparing: select * from mydb.user where name like <span class="hljs-string">&quot;%&quot;</span>?<span class="hljs-string">&quot;%&quot;</span> <br>==&gt; Parameters: 张(String)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: <span class="hljs-number">4</span>, 张三, <span class="hljs-number">123456</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;id=<span class="hljs-number">4</span>, name=<span class="hljs-string">&#x27;张三&#x27;</span>, pwd=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Resetting autocommit to <span class="hljs-literal">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@<span class="hljs-number">401e7803</span>]<br>Returned connection <span class="hljs-number">1075738627</span> to pool.<br></code></pre></td></tr></table></figure><p>缓存失效的情况：</p><h3 id="4-二级缓存">4.二级缓存</h3><ol><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制：</li></ol><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存在二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 显式的开启全局缓存  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在当前Mapper.xml中使用二级缓存   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> /&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在当前Mapper.xml中使用二级缓存   --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul><p>默认的清除策略是 LRU。</p><p>flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p><p>size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p><p><strong>提示</strong> 二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。</p><ol start="3"><li>测试</li></ol><p>1.问题：我们需要将实体类序列化！否则就会报错！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Caused by: java.io.NotSerializableException: com.zmq.pojo.Blog<br></code></pre></td></tr></table></figure><p>解决：实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> views;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>或者加上readOnly=“true”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>注：<cache/>中的readOnly默认为false，而可读写的缓存会通过序列化返回缓存对象的拷贝，此时需要实体类（这里是Blog）实现Serializable接口或者配置readOnly=true</p><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中！</li></ul><h3 id="5-缓存原理">5.缓存原理</h3><p>SqlSession请求—&gt;数据库-----&gt;一级缓存------二级缓存</p><p>用户查询先走二级缓存，二级缓存没有再走一级缓存，再没有就去数据库找结果。</p><h3 id="6-自定义缓存-以ehcache为例">6.自定义缓存-----&gt;以ehcache为例</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存,</p><p>要在程序中使用ehcache，先要导包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在Mapper中指定使用ehcache缓存实现！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件 —&gt;   ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;259200&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><p>公司里一般用Redis数据库来做缓存。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis学习笔记一</title>
    <link href="/2023/10/24/MyBatis_1/"/>
    <url>/2023/10/24/MyBatis_1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要记录了Java中的MyBatis框架的学习，初次了解其在项目中的具体位置和功能。</p></blockquote><span id="more"></span><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis"></p><hr><h2 id="官方文档">官方文档</h2><p><a href="https://mybatis.org/mybatis-3/zh/index.html">点击前往</a></p><h2 id="什么是-MyBatis？">什么是 MyBatis？</h2><p>MyBatis 是一款持久层框架，</p><p>它支持自定义 SQL、存储过程以及高级映射。</p><h2 id="安装">安装</h2><p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可。</p><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我学习时的配置:</p><ul><li>MySQL5.7</li><li>Maven3.6.0</li><li>Mybatis3.5.2</li><li>IDEA2019.1</li></ul><p>我学习时的父工程pom.xml文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--  父工程 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 依赖  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        MySQL驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        junit测试单元框架--&gt;</span><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--    资源过滤，防止运行时找不到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子工程pom.xml文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Mybatis-Study<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.zmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    资源过滤，防止运行时找不到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建MyBatis配置文件">创建MyBatis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml --&gt;</span><br><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--            事务管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3307/mydb?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>autoReconnect=true<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    创建接口后注册接口实现文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/zmq/dao/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h2 id="创建工具类">创建工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MybatisUtils.java</span><br><span class="hljs-keyword">package</span> com.zmq.utils;<br><br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取SqlSession对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//SqlSession 完全包含了面向数据库执行SQL命令的所有方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//openSession(true)可以自动提交事务</span><br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建Pojo层实体类">创建Pojo层实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//User.java</span><br><span class="hljs-keyword">package</span> com.zmq.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br>    <span class="hljs-comment">//getset方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPwd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPwd</span><span class="hljs-params">(String pwd)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-comment">//toString方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建接口文件-Dao层">创建接口文件(Dao层)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDao.java</span><br><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-comment">//获取所有用户</span><br>    List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//根据id查询用户</span><br>    User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//新增用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//修改用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">delUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建接口实现配置文件-相当于JavaWeb的impl层">创建接口实现配置文件(相当于JavaWeb的impl层)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- UserMapper.xml --&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace用来绑定DAO接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.zmq.dao.UserDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    这里相当于实现接口的方法    resultType绑定全限定名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        select * from mydb.user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        select * from mydb.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span> &gt;</span><br>        insert into mydb.user(id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.zmq.pojo.User&quot;</span>&gt;</span><br>        update mydb.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from mydb.user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="测试">测试</h2><p>在Dao的文件中，右击要测试的方法，点击goto，创建测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//UserDaoTest.java</span><br><span class="hljs-keyword">package</span> com.zmq.dao;<br><br><span class="hljs-keyword">import</span> com.zmq.pojo.User;<br><span class="hljs-keyword">import</span> com.zmq.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br><br>    <span class="hljs-comment">//测试查询全部User</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">//sqlSession.getMapper(UserDao.class);后ALT+回车生成赋给的对象UserDao</span><br>        <span class="hljs-comment">//这里要拿SQL，从Dao包里拿，面向接口编程，可以直接从UserDao接口里拿</span><br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br>        <span class="hljs-comment">//执行方法</span><br>        List&lt;User&gt; userList = userDao.getUserList();<br><br>        <span class="hljs-comment">//增强For循环输出</span><br>        <span class="hljs-keyword">for</span>(User user:userList)&#123;<br>            System.out.println(user);<br>        &#125;<br><br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试通过id查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user);<br><br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//测试新增用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.addUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;alan&quot;</span>,<span class="hljs-string">&quot;852456&quot;</span>));<br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;添加成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//测试修改用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.updateUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;alex&quot;</span>,<span class="hljs-string">&quot;159852&quot;</span>));<br><br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;修改成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>    <span class="hljs-comment">//测试删除用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delUserById</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//获取sqlSession对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtils.getSqlSession();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserDao.class);<br><br>        userDao.delUserById(<span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-comment">//提交事务-----&gt;&gt;增删改都要提交事务，否则保存不到数据库</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;删除成功！&quot;</span>);<br>        <span class="hljs-comment">//关闭sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git克隆和提交代码</title>
    <link href="/2023/10/23/Gituse/"/>
    <url>/2023/10/23/Gituse/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要总结了git初次使用克隆和提交代码。包括git的安装和配置，项目库的创建、项目的克隆和提交。</p></blockquote><span id="more"></span><h1>Git克隆和提交代码</h1><p>Progit中文版书籍：<a href="https://www.progit.cn/">https://www.progit.cn/</a></p><h2 id="准备">准备</h2><ul><li>windows系统先下载git，官方下载页：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></li><li>创建本地项目文件夹存储库并进入</li></ul><h2 id="配置">配置</h2><p>右键打开git bash，执行仓库初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init <span class="hljs-comment">#然后回车</span><br></code></pre></td></tr></table></figure><p>此时会在项目存储库生成<code>.git</code>文件夹及其内容</p><h3 id="设置个人信息">设置个人信息</h3><p>设置用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;myName&quot;</span>  <br></code></pre></td></tr></table></figure><p>查看用户名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br></code></pre></td></tr></table></figure><p>设置邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span>  <br></code></pre></td></tr></table></figure><p>查看邮箱：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.email<br></code></pre></td></tr></table></figure><p>查看配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --list <span class="hljs-comment">#可查看当前用户信息以及其他的一些信息</span><br></code></pre></td></tr></table></figure><h3 id="生成SSH密钥">生成SSH密钥</h3><p>指定文件名生成密钥（方便查看公钥以后要用的地方），否则文件名将用默认名称</p><p>指定密钥文件名为<code>gitee_id_rsa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br></code></pre></td></tr></table></figure><p>指定密钥文件名为<code>github_id_rsa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Github SSH Key&#x27;</span> -f ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure><hr><p>常用参数注释：</p><p>-t 加/解密算法类型（rsa、ed25519等）</p><p>-b 秘钥长度,rsa默认秘钥长度的为 2048</p><p>-C 注释，一般是填写用户名</p><p>-f 指定生成的秘钥文件名，如果不提供此参数则使用默认文件名，如rsa私钥默认文件名 ~/.ssh/id_rsa ，公钥默认文件名 ~/.ssh/id_rsa.pub</p><hr><p>首次生成SSH密钥会有三次询问，根据需要设置，想免密推送就不设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&#x27;Gitee SSH Key&#x27;</span> -f ~/.ssh/gitee_id_rsa<br>//生成一对RSA密钥<br>Generating public/private rsa key pair.<br>//密钥文件存储位置，直接回车使用默认路径<br>Enter file <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> to save the key (/Users/user/.ssh/gitee_id_rsa):<br>//设置密码，若直接回车则不设置密码<br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase):<br>//确认密码，和上步操作相同<br>Enter same passphrase again:<br>//文件存储位置<br>Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa<br>Your public key has been saved <span class="hljs-keyword">in</span> /c/Users/user/.ssh/gitee_id_rsa.pub<br><br>The key fingerprint is:<br>SHA256:wXKzkWFbVONiEtSWPXjcjVy0oONsMYbBU59h7mlMwes Gitee SSH Key<br>The key<span class="hljs-string">&#x27;s randomart image is:</span><br><span class="hljs-string">+---[RSA 3072]----+</span><br><span class="hljs-string">|       .*++B+B =o|</span><br><span class="hljs-string">|       o OB.XoO o|</span><br><span class="hljs-string">|      . Xo+B.*.. |</span><br><span class="hljs-string">|       o B+.B..  |</span><br><span class="hljs-string">|        S  +.=   |</span><br><span class="hljs-string">|          . .E   |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">|                 |</span><br><span class="hljs-string">+----[SHA256]-----+</span><br><span class="hljs-string"></span><br><span class="hljs-string">user@DESKTOP MINGW64 ~/Desktop</span><br></code></pre></td></tr></table></figure><h3 id="创建config文件">创建<code>config</code>文件</h3><p>进入生成的密钥文件夹，创建文件，文件名为<code>config</code>，没有后缀。然后添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee_id_rsa<br><span class="hljs-comment"># github</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github_id_rsa<br></code></pre></td></tr></table></figure><p>注：<code>Host </code>和<code>HostName</code> 填写 git 服务器的域名，<code>IdentityFile</code> 指定私钥的路径</p><p>配置公钥到<code>Gitee</code>或<code>Github</code>：</p><ul><li>Gitee SSH配置地址在：个人资料的安全设置–&gt;SSH公钥</li><li>Github SSH配置地址在：用户头像–&gt;右侧边栏–&gt;Settings–&gt;Access–&gt;SSH and GPG keys</li></ul><p>查看生成的SSH公钥：</p><p>方式一：用记事本打开公钥文件，全选复制。</p><p>方式二：用<code>gitbash</code>查看</p><p>查看<code>.ssh</code>文件夹内的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> ~/.ssh/<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">ls</span> ~/.ssh/<br>config        gitee_id_rsa.pub  github_id_rsa.pub  gitee_id_rsa  github_id_rsa<br></code></pre></td></tr></table></figure><ul><li>公钥文件为：<code>gitee_id_rsa.pub</code> 和<code>github_id_rsa.pub</code>，</li><li>私钥文件为：<code>gitee_id_rsa</code> 和<code>github_id_rsa</code></li></ul><p>查看公钥内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br></code></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ <span class="hljs-built_in">cat</span> ~/.ssh/gitee_id_rsa.pub<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDchWfkihfqZgdV6/431en8mUN2dk5FtAJ0TkCYQJXq07nn51c9+3qNjbvxxygFDSOFIyG7nb34H2vAk8RL/drODtBPSxNhtxt/IuKSNNHF7hYt+nh8VqbNTMi9fJVEN6+bS7k7gLTY1IVDd4sUjEKw0mYzPgdHCAyubSARUYzATx2SOn9+6UAo1Iq2Ftt0OVMmoWueIe5E9nQWd8IANbrnvs9VbPYVP5fyPQez+/YT4HxGib5+hYXVEsFh/qN3JxbY3uK34mX3jJtz++ULcQPtS8w0AQWR94po6EH1TJvUWMlTOT8liGd9aebuFrZjjVibvQ6kVcApTtEDJXzeb00fqh3waNc8+vTTwpyzHXy8ictcLCbnAFHzgOJpS0tMgkof0U4p3pHrY4umQ5IHkq5aS2WDch6IHVy3mwRdzK91BAzIcNHMnVKAC528WT4KZ3ZdFjC6XxCoiwf6d8MBCxhMnMbm4i284RoQa9LYEuZtzWCcheYpTN7/knfDksrLiEE= Gitee SSH Key<br></code></pre></td></tr></table></figure><h3 id="测试">测试</h3><p>配置完成后回到<code>git bash</code>，测试配置的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@gitee.com<br>ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>成功后，显示如下内容：</p><p>测试<code>gitee</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@gitee.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>测试<code>github</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">user@DESKTOP MINGW64 ~/Desktop<br>$ ssh -T git@github.com<br>Hi user! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="克隆项目到本地">克隆项目到本地</h2><p>先进入之前创建的项目文件夹</p><h3 id="链接到远程库">链接到远程库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://git.oschina.net/xxxxxx/xxxxxx.git<br></code></pre></td></tr></table></figure><h3 id="克隆项目">克隆项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:AprilDawn/AprilDawn.gitee.io.git<br></code></pre></td></tr></table></figure><p>这样项目就下载到项目仓库了，现在就可以打开项目写代码了。</p><h2 id="项目提交">项目提交</h2><p>当完成代码后，进入克隆的项目里。</p><h3 id="添加文件">添加文件</h3><p>添加项目中新增或改动的文件到缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add . <br></code></pre></td></tr></table></figure><p>注：点表示添加目录下所有文件到缓存库,如果只添加某个文件,只需把 . 换成你要添加的文件名即可;</p><h3 id="添加注释">添加注释</h3><p>用以说明此次提交更改了哪些信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;新增什么功能，修复了什么BUG等等&quot;</span><br></code></pre></td></tr></table></figure><h3 id="推送提交到远程仓库">推送提交到远程仓库</h3><p>这是默认推送到master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push<br></code></pre></td></tr></table></figure><p>推送到指定分支</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> 分支名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树（Binary Tree）</title>
    <link href="/2023/10/14/BiTree/"/>
    <url>/2023/10/14/BiTree/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要总结了数据结构关于二叉树的相关知识内容，其中包括定义、过程算法和完整实现代码。</p></blockquote><span id="more"></span><h1>二叉树（BiTree）</h1><h2 id="定义">定义</h2><p><strong>二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序一次访问二叉树中的所有结点，使得每个结点被访问一次且仅被访问一次。</strong></p><h2 id="过程及其算法">过程及其算法</h2><h3 id="先序遍历：根左右">先序遍历：根左右</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 先序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FirstOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 先序遍历左子树</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 先序遍历右子树</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历：左根右">中序遍历：左根右</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始条件：二叉树T存在</span><br><span class="hljs-comment">// 操作结果：中序递归遍历T，依次输出值</span><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MidOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-built_in">MidOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">MidOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="后序遍历：左右根">后序遍历：左右根</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 初始条件：二叉树T存在</span><br><span class="hljs-comment">// 操作结果：后续递归遍历T</span><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">EndOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 后序遍历左子树</span><br><span class="hljs-built_in">EndOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 后序遍历右子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拓展：求树的深度">拓展：求树的深度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-built_in">treeDepth</span>(T-&gt;lchild);<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">treeDepth</span>(T-&gt;rchild);<br><span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-comment">//如果左边不大于右边就加一</span><br>&#123;<br><span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="层序遍历：（借助队列）">层序遍历：（借助队列）</h3><h4 id="算法思想：">算法思想：</h4><ul><li>初始化一个辅助队列</li><li>根节点入队</li><li>若队列非空，则对头结点出队访问该节点，并将其左、右孩子插入队尾（如果有的话）</li><li>重复上步直至队列为空</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkQueue Q ;<br><span class="hljs-built_in">InitQueue</span>(Q);<br>BiTree p;<br>p = <span class="hljs-keyword">new</span> BiTNode;<br><span class="hljs-built_in">Push</span>(Q, T);<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<span class="hljs-comment">//判断队列是否为空</span><br>&#123;<br><span class="hljs-built_in">Pop</span>(Q, p);<br>cout &lt;&lt; p-&gt;data;<br><span class="hljs-keyword">if</span> (p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q,p-&gt;lchild);<br>&#125;<br><span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q, p-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整实现代码">完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">二叉树的层序遍历</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 二叉树链式存储 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span><br>&#123;<br><span class="hljs-type">char</span> data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BiTNode</span>* lchild, * rchild;<br>&#125;BiTNode,*BiTree;<br><br><span class="hljs-comment">/* 链式队列结点 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkNode</span><br>&#123;<br>BiTNode* data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LinkNode</span>* next;<br>&#125;LinkNode;<br><br><span class="hljs-comment">/* 队列头尾结点 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>LinkNode* front,*rear;<span class="hljs-comment">//队头队尾</span><br>&#125;LinkQueue;<br><br><span class="hljs-comment">/* 按照先序创建树，#代表空 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createBiTree</span><span class="hljs-params">(BiTree &amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch;<br>cin &gt;&gt; ch;<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;#&#x27;</span>)<br>&#123;<br>T = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>T = <span class="hljs-keyword">new</span> BiTNode;<br>T-&gt;data = ch;<br><span class="hljs-built_in">createBiTree</span>(T-&gt;lchild);<br><span class="hljs-built_in">createBiTree</span>(T-&gt;rchild);<br>&#125;<br><br>&#125;<br><span class="hljs-comment">/* 初始化树 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitBiTree</span><span class="hljs-params">(BiTree&amp; T)</span></span><br><span class="hljs-function"></span>&#123;<br>T-&gt;lchild = <span class="hljs-literal">NULL</span>;<br>T-&gt;rchild = <span class="hljs-literal">NULL</span>;<br>T-&gt;data = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><span class="hljs-comment">/* 初始化队列 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>L.front = L.rear = <span class="hljs-keyword">new</span> LinkNode;<br>L.front-&gt;data = <span class="hljs-literal">NULL</span>;<br>L.front-&gt;next =  <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//front和rear指向同一地址，所以rear就不用初始化了</span><br>&#125;<br><br><span class="hljs-comment">/* 判断队列是否为空 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (Q.front == Q.rear)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进队列(在队尾插入)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkQueue&amp; S, BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkNode* p = <span class="hljs-keyword">new</span> LinkNode;<br>p-&gt;data = T;<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>S.rear-&gt;next = p; <span class="hljs-comment">//修改后继指针</span><br>S.rear = p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列（在队头弹出）头结点的下一个</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkQueue&amp; S, BiTree&amp; T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(S))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>T = S.front-&gt;next-&gt;data;<br>LinkNode* p = S.front-&gt;next;<br>S.front-&gt;next = p-&gt;next;<br><span class="hljs-keyword">if</span> (S.rear == p)<br>&#123;<br>S.rear = S.front;<br>&#125;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 先序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">FirstOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br><span class="hljs-built_in">FirstOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br><span class="hljs-comment">/* 中序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MidOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-built_in">MidOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 中序遍历左子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br><span class="hljs-built_in">MidOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 中序遍历右子树</span><br>&#125;<br><br><span class="hljs-comment">/* 后序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EndOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">EndOrder</span>(T-&gt;lchild);  <span class="hljs-comment">// 后序遍历左子树</span><br><span class="hljs-built_in">EndOrder</span>(T-&gt;rchild);  <span class="hljs-comment">// 后序遍历右子树</span><br>cout &lt;&lt; T-&gt;data;  <span class="hljs-comment">// 进行输出结点数据的操作</span><br>&#125;<br><br><span class="hljs-comment">/* 层序遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrder</span><span class="hljs-params">(BiTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>LinkQueue Q ;<br><span class="hljs-built_in">InitQueue</span>(Q);<br>BiTree p;<br>p = <span class="hljs-keyword">new</span> BiTNode;<br><span class="hljs-comment">//InitBiTree(p);</span><br><span class="hljs-built_in">Push</span>(Q, T);<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<br>&#123;<br><span class="hljs-built_in">Pop</span>(Q, p);<br>cout &lt;&lt; p-&gt;data;<br><span class="hljs-keyword">if</span> (p-&gt;lchild!=<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q,p-&gt;lchild);<br>&#125;<br><span class="hljs-keyword">if</span> (p-&gt;rchild != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">Push</span>(Q, p-&gt;rchild);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* 二叉树的深度 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDepth</span><span class="hljs-params">(BiTree T)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-built_in">treeDepth</span>(T-&gt;lchild);<br><span class="hljs-type">int</span> right = <span class="hljs-built_in">treeDepth</span>(T-&gt;rchild);<br><span class="hljs-keyword">if</span> (left &gt; right)<span class="hljs-comment">//如果左边不大于右边就加一</span><br>&#123;<br><span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//主程序入口</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>BiTree bt;<br><span class="hljs-built_in">createBiTree</span>(bt);<br>cout &lt;&lt; <span class="hljs-string">&quot;树的深度为：&quot;</span>&lt;&lt; <span class="hljs-built_in">treeDepth</span>(bt) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;树的先序遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">FirstOrder</span>(bt);<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;树的中序遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">MidOrder</span>(bt);<br>cout &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;树的后序遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">EndOrder</span>(bt);<br>cout &lt;&lt; endl;<br>cout&lt;&lt; <span class="hljs-string">&quot;树的层次遍历为：&quot;</span> &lt;&lt; endl;<br><span class="hljs-built_in">LevelOrder</span>(bt);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环队列（链式存储结构）</title>
    <link href="/2023/10/13/LinkQueue/"/>
    <url>/2023/10/13/LinkQueue/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要总结了循环队列的另一种实现形式，即循环队列的链式存储结构形式，主要是完整实现代码。</p></blockquote><span id="more"></span><h1>循环队列（链式存储结构）</h1><h2 id="完整代码实现">完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环队列的链式实现</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链队列存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br><span class="hljs-type">int</span> data;  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> * next;<br>&#125;SNode,*SqQueue;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>SqQueue front;<br>SqQueue rear;<br>&#125;LinkQueue;<br><br><span class="hljs-comment">//初始化队列(有头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.front = S.rear = <span class="hljs-keyword">new</span> SNode;<br>S.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(LinkQueue S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.front == S.rear)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进队列(每次都插在头结点后面)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkQueue&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>SNode* p = <span class="hljs-keyword">new</span> SNode;<br>p-&gt;data = e;<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>S.rear-&gt;next = p; <span class="hljs-comment">//修改后继指针</span><br>S.rear = p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkQueue&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueEmpty</span>(S))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.front-&gt;next-&gt;data;<br>SNode* p = S.front-&gt;next;<br>S.front-&gt;next = p-&gt;next;<br><span class="hljs-keyword">if</span> (S.rear == p)<br>&#123;<br>S.rear = S.front;<br>&#125;<br><span class="hljs-keyword">delete</span> p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取队列顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(LinkQueue S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueEmpty</span>(S))<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.front-&gt;next-&gt;data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LinkQueue S;<br><span class="hljs-built_in">InitQueue</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取队列顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环队列（顺序存储结构）</title>
    <link href="/2023/10/13/SqQueue/"/>
    <url>/2023/10/13/SqQueue/</url>
    
    <content type="html"><![CDATA[<blockquote><p>循环队列的定义、特点和完整代码实现。</p></blockquote><span id="more"></span><h1>循环队列（顺序存储结构）</h1><h2 id="定义">定义</h2><p>顺序表类型的队列，定义了两个指针，头指针和尾指针。当入队满的时候，每出队一个头指针都要后移，这样到最后就无法入队新元素了，在入队会导致假溢出。为了解决这一问题，入队和出队后，队头队尾对MAXSIZE取模，这样队列就变成了环形，类似于旋转木马，即循环队列，</p><h2 id="特点">特点</h2><p>可以有效的利用资源</p><h2 id="基本算法">基本算法</h2><p>主要是判断队列是否为空所采取的方法：</p><ul><li>牺牲一个存储单元</li><li>增加size属性记录元素个数</li><li>增加标志位，判断最近的一次操作是入队还是出队（只有入队会导致队满）</li></ul><h2 id="完整代码实现">完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环队列  顺序实现</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 2 <span class="hljs-comment">//队列元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序队列存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br><span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放队列元素</span><br><span class="hljs-type">int</span> front;  <span class="hljs-comment">//队头指针</span><br><span class="hljs-type">int</span> rear;<span class="hljs-comment">//队尾指针</span><br><span class="hljs-type">int</span> size;  <span class="hljs-comment">//队列元素个数</span><br>&#125;SqQueue; <br><br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.front = <span class="hljs-number">0</span>;<br>S.rear = <span class="hljs-number">0</span>;<br>S.size = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//入队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqQueue&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.data[S.rear] = e;<br>S.rear = (S.rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>S.size++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出队列</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqQueue&amp; S, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.front];<br>S.front=(S.front+<span class="hljs-number">1</span>)% MAXSIZE;<br>S.size--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取队列顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(SqQueue S,<span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.size == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.front];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqQueue S;<br><span class="hljs-built_in">InitQueue</span>(S);<br>cout &lt;&lt;<span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a1 = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a2 = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a1)&lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a2) &lt;&lt; endl;<br><span class="hljs-built_in">GetElem</span>(S, b);<br>cout&lt;&lt;<span class="hljs-string">&quot;读取队列顶元素：&quot;</span> &lt;&lt;b &lt;&lt;endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, b) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">QueueEmpty</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a1) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入队列：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a2) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;队列大小：&quot;</span> &lt;&lt; S.size &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链栈</title>
    <link href="/2023/10/12/LinkStack/"/>
    <url>/2023/10/12/LinkStack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要总结了栈的链式存储方式，包括有无头结点两种情况和相关的完整实现代码。</p></blockquote><span id="more"></span><h1>链栈</h1><h2 id="有头结点的完整实现代码">有头结点的完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">链栈（有头结点）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链栈存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br><span class="hljs-type">int</span> data;  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> * next;<br><span class="hljs-type">int</span> top;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SNode,*SqStack;<br><br><span class="hljs-comment">//初始化栈(有头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S = <span class="hljs-keyword">new</span> SNode;<br>S-&gt;top = <span class="hljs-number">-1</span>;<br>S-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进栈(每次都插在头结点后面)</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>SNode* p = <span class="hljs-keyword">new</span> SNode;<br>p-&gt;data = e;<br>p-&gt;next = S-&gt;next;<br>S-&gt;next = p;<br>p-&gt;top = ++(S-&gt;top);<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S-&gt;next-&gt;data;<br><span class="hljs-keyword">if</span> (!S-&gt;next-&gt;next)<br>&#123;<br>S-&gt;top--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>S-&gt;next = S-&gt;next-&gt;next;<br>S-&gt;top--;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S-&gt;top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S-&gt;next-&gt;data;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无头结点的完整实现代码">无头结点的完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">链栈(无头结点)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 链栈存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span><br>&#123;<br><span class="hljs-type">int</span> data;  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span>* next;<br><span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SNode, * SqStack;<br><br><span class="hljs-comment">//初始化栈(无头结点)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>SNode* p = S;<br>S = <span class="hljs-keyword">new</span> SNode;<br>S-&gt;data = e;<br>S-&gt;next = p;<br><span class="hljs-keyword">if</span> (!p) <span class="hljs-comment">//如果p为NULL</span><br>&#123;<br>S-&gt;top++;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>S-&gt;top = p-&gt;top+<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S-&gt;data;<br>SNode* p = S;<br><br>S = p-&gt;next;<br><br><span class="hljs-comment">//delete p;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S-&gt;data;<br>&#125;<br><span class="hljs-comment">//读取栈元素个数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetSize</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> S-&gt;top;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈元素个数：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetSize</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>共享顺序栈</title>
    <link href="/2023/10/11/ShareSqStack/"/>
    <url>/2023/10/11/ShareSqStack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>共享顺序栈的特点和完整代码实现。</p></blockquote><span id="more"></span><h1>共享顺序栈</h1><h2 id="特点">特点</h2><p>两个顺序栈用一个数组空间，可看作单通道的隧道停车厂，一边占用的空间多了，另一边的剩余空间就少了。</p><h2 id="完整代码实现">完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">共享栈：两个栈用一个数组空间</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10 <span class="hljs-comment">//栈元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序栈表存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br><span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-type">int</span> top1;  <span class="hljs-comment">//1号栈顶指针</span><br><span class="hljs-type">int</span> top2; <span class="hljs-comment">//2号栈顶指针</span><br>&#125;SqStack;<br><br><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack&amp; S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.top1 = <span class="hljs-number">-1</span>;<br>S.top2 = MAXSIZE;<br>&#125;<br><br><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span> || S.top2 == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//进1号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push1</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 +<span class="hljs-number">1</span> == S.top2)<span class="hljs-comment">//top指的是数组的下标位置</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.top1++;<span class="hljs-comment">//指针先+1</span><br>S.data[S.top1] = e; <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[++S.top1] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//进2号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push2</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 + <span class="hljs-number">1</span> == S.top2)<span class="hljs-comment">//top指的是数组的下标位置</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.top2--;<span class="hljs-comment">//指针先-1</span><br>S.data[S.top2] = e; <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[--S.top2] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出1号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop1</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.top1];<br>S.top1--;<br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[S.top--] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//出2号栈</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop2</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top2 == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.top2];<br>S.top2++;<br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[S.top2++] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">//读取1号栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop1</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top1 == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.top1];<br>&#125;<br><br><span class="hljs-comment">//读取2号栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop2</span><span class="hljs-params">(SqStack S, <span class="hljs-type">int</span>&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top2 == MAXSIZE)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.top2];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;入1号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push1</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop1</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取1号栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出1号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop1</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;入2号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push2</span>(S, a) &lt;&lt; endl;<br><span class="hljs-built_in">GetTop2</span>(S, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;读取2号栈顶元素：&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出2号栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop2</span>(S, a) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顺序栈（SqStack）</title>
    <link href="/2023/10/11/SqStack/"/>
    <url>/2023/10/11/SqStack/</url>
    
    <content type="html"><![CDATA[<blockquote><p>顺序栈的特点和完整代码实现。</p></blockquote><span id="more"></span><h1>顺序栈（SqStack）</h1><p>注：SqStack为简写，完整名为Sequential Stack。</p><h2 id="特点">特点</h2><ul><li>栈也是一种线性表。</li><li>只允许在一端进行插入和删除的线性表。</li><li>先进后出。</li></ul><h2 id="完整代码实现">完整代码实现</h2><h3 id="代码结构">代码结构</h3><ul><li>定义顺序栈结构</li><li>初始化顺序栈</li><li>判断顺序栈空方法</li><li>顺序栈的进栈方法</li><li>顺序栈的出栈方法</li><li>顺序栈的读取栈顶元素方法</li><li>主函数用以测试</li></ul><h3 id="具体实现">具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序栈表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10 <span class="hljs-comment">//栈元素的最大个数</span></span><br><br><span class="hljs-comment">/* 顺序栈表存储结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <br>&#123;<br><span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-type">int</span> top;  <span class="hljs-comment">//栈顶指针</span><br>&#125;SqStack; <br><br><span class="hljs-comment">/* 初始化栈 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span><br><span class="hljs-function"></span>&#123;<br>S.top = <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">/* 判断栈空 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 进栈 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == MAXSIZE<span class="hljs-number">-1</span>)<span class="hljs-comment">//top指的是数组的下标位置</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>S.top++;<span class="hljs-comment">//指针先+1</span><br>S.data[S.top] = e; <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[++S.top] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 出栈 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack&amp; S, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>e = S.data[S.top];<br>S.top--;<br><span class="hljs-comment">//或者上两步合并</span><br><span class="hljs-comment">//S.data[S.top--] = e;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/* 读取栈顶元素 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S,<span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (S.top == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>e = S.data[S.top];<br>&#125;<br><br><span class="hljs-comment">/* 主函数 */</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqStack S; <span class="hljs-comment">//实例化栈</span><br><span class="hljs-built_in">InitStack</span>(S);  <span class="hljs-comment">//初始化栈</span><br>cout &lt;&lt;<span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl; <span class="hljs-comment">//判断栈空</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//定义入栈元素a</span><br><span class="hljs-type">int</span> b;    <span class="hljs-comment">//定义接收栈顶元素b</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;入栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Push</span>(S, a)&lt;&lt; endl;<br><span class="hljs-built_in">GetTop</span>(S, b);<br>cout&lt;&lt;<span class="hljs-string">&quot;读取栈顶元素：&quot;</span> &lt;&lt;b &lt;&lt;endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;出栈：&quot;</span> &lt;&lt; <span class="hljs-built_in">Pop</span>(S, a) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;栈是否为空：&quot;</span> &lt;&lt; <span class="hljs-built_in">StackEmpty</span>(S) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基数排序（Radix Sort）</title>
    <link href="/2023/10/10/RadixSort/"/>
    <url>/2023/10/10/RadixSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>基数排序的原理、特点和完整代码实现。</p></blockquote><span id="more"></span><h1>基数排序（Radix Sort）</h1><h2 id="基数排序特点">基数排序特点</h2><ul><li>是稳定排序</li><li>可用于链式结构，也可用于顺序结构</li><li>时间复杂度可以突破基于关键字比较一类方法的下界O(n log2 n)，达到O(n)</li><li>基数排序使用条件有严苛的要求：需要知道各级关键字的主次关系和各级关键字的主次范围</li></ul><h2 id="基数排序过程-原理">基数排序过程(原理)</h2><h3 id="算法思想">算法思想</h3><ul><li>将整个关键字拆分为 d 位（或 “ 组 ”）</li><li>按照各个 关键字位 权重递增的次序（如：个、十、百），做 d 趟 <code>分配</code> 和 <code>收集</code>，若当前处理的关键字位可能取得<code>r</code>个值，则需要建立<code>r</code>个队列</li><li>分配：顺序扫描各个元素，根据当前处理的关键字位，将元素插入相应队列。一趟分配耗时O(n)</li><li>收集：把各个队列中的结点依次出队并链接。一趟收集耗时O®</li></ul><h3 id="性能">性能</h3><ul><li>空间复杂度：O®</li><li>时间复杂度：O(d(n+r))</li><li>稳定性：稳</li></ul><h3 id="擅长处理">擅长处理</h3><ol><li>数据元素的关键字可以方便地拆分为 d 组，且 d 较小</li><li>每组关键字的取值范围不大，即<code>r</code>较小</li><li>数据元素个数<code>n</code>较大</li></ol><h2 id="完整代码实现（顺序存储）">完整代码实现（顺序存储）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 获取数组中的最大值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> max = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>            max = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-comment">// 对数组按照指定位数进行计数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">countingSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> exp)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个临时数组用于存储排序结果</span><br>    <span class="hljs-type">int</span>* output = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><br>    <span class="hljs-comment">// 用于统计每个数字出现的次数，下标为0到9</span><br>    <span class="hljs-type">int</span> count[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br><br>    <span class="hljs-comment">// 统计该位上的数字出现次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        count[(arr[i] / exp) % <span class="hljs-number">10</span>]++;<br>    &#125;<br><br>    <span class="hljs-comment">// 计算累计频率</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        count[i] += count[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 输出排序后的结果到output数组中</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        output[count[(arr[i] / exp) % <span class="hljs-number">10</span>] - <span class="hljs-number">1</span>] = arr[i];<br>        count[(arr[i] / exp) % <span class="hljs-number">10</span>]--;<br>    &#125;<br><br>    <span class="hljs-comment">// 将排序结果拷贝回原数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        arr[i] = output[i];<br>    &#125;<br><br>    <span class="hljs-comment">// 释放动态内存</span><br>    <span class="hljs-keyword">delete</span>[] output;<br>&#125;<br><br><span class="hljs-comment">// 基数排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取数组中的最大值</span><br>    <span class="hljs-type">int</span> max = <span class="hljs-built_in">getMax</span>(arr, n);<br><br>    <span class="hljs-comment">// 对每一位进行计数排序</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> exp = <span class="hljs-number">1</span>; max / exp &gt; <span class="hljs-number">0</span>; exp *= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-built_in">countingSort</span>(arr, n, exp);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">170</span>, <span class="hljs-number">45</span>, <span class="hljs-number">75</span>, <span class="hljs-number">90</span>, <span class="hljs-number">802</span>, <span class="hljs-number">24</span>, <span class="hljs-number">2</span>, <span class="hljs-number">66</span> &#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>    cout &lt;&lt; <span class="hljs-string">&quot;原数据: &quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <br>    cout &lt;&lt; endl;<br>    <span class="hljs-comment">// 调用基数排序函数</span><br>    <span class="hljs-built_in">radixSort</span>(arr, n);<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;基数排序结果: &quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cout &lt;&lt; arr[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">原数据:<br>170 45 75 90 802 24 2 66<br>基数排序结果:<br>2 24 45 66 75 90 170 802<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure><h2 id="完整代码实现（链式存储）">完整代码实现（链式存储）</h2><p>注：此处选择使用静态链表和静态队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    宏定义</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 9 <span class="hljs-comment">//数组长度</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RADIX 10 <span class="hljs-comment">//关键字基数</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    静态链表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> key;    <span class="hljs-comment">//节点对关键码值</span><br>    <span class="hljs-type">int</span> next;   <span class="hljs-comment">//下一节点在数组中的下标</span><br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    静态队列</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">StaticQueue</span>&#123;<br>    <span class="hljs-type">int</span> front;   <span class="hljs-comment">//队头指针</span><br>    <span class="hljs-type">int</span> rear;   <span class="hljs-comment">//队尾指针</span><br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据关键字分配到队列</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Distribute</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span> first, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> r, StaticQueue* queue)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; r; j++)<br>    &#123;<br>        queue[j].front = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> curr = first;<span class="hljs-comment">//取关键字</span><br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-number">-1</span>)<br>    &#123;<span class="hljs-comment">//对整个静态链进行分配</span><br>        <span class="hljs-type">int</span> k = array[curr].key;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; a &lt; i; a++)<br>        &#123;<span class="hljs-comment">//取第i位排序码数字k</span><br>            k = k / r;<br>        &#125;<br>        k = k % r;<br>        <span class="hljs-keyword">if</span> (queue[k].front == <span class="hljs-number">-1</span>)<br>        &#123;<span class="hljs-comment">//把数据分配到第k个桶中</span><br>            queue[k].front = curr;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            array[queue[k].rear].next = curr;<br>        &#125;<br>        queue[k].rear = curr;<br>        curr = array[curr].next;<span class="hljs-comment">//curr移动，继续分配</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    收集：</span><br><span class="hljs-comment">       待收集数组：array 头结点：first 关键字基数：r  分配队列：queue</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Collect</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span>&amp; first, <span class="hljs-type">int</span> r, StaticQueue* queue)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<span class="hljs-comment">//已收集到的最后一个记录</span><br>    <span class="hljs-keyword">while</span> (queue[k].front == <span class="hljs-number">-1</span>)<br>    &#123;<span class="hljs-comment">//找到第一个非空队</span><br>        k++;<br>    &#125;<br>    first = queue[k].front; <span class="hljs-comment">//队列第k个元素的头结点赋值给first</span><br>    <span class="hljs-type">int</span> last = queue[k].rear;<span class="hljs-comment">//队列第k个元素的尾结点赋值给last</span><br>    <span class="hljs-keyword">while</span> (k &lt; r - <span class="hljs-number">1</span>) <span class="hljs-comment">// k &lt; 9</span><br>    &#123;<span class="hljs-comment">//继续收集下一个非空队列</span><br>        k++;<br>        <span class="hljs-keyword">while</span> (k &lt; r - <span class="hljs-number">1</span> &amp;&amp; queue[k].front == <span class="hljs-number">-1</span>)<span class="hljs-comment">// k &lt; 9并且queue是空队列</span><br>        &#123;<br>            k++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (queue[k].front != <span class="hljs-number">-1</span>) <span class="hljs-comment">//queue是非空队列</span><br>        &#123;<span class="hljs-comment">//试探下一个队列</span><br>            array[last].next = queue[k].front;<br>            last = queue[k].rear;<span class="hljs-comment">//最后一个为序列的尾部</span><br>        &#125;<br>    &#125;<br>    array[last].next = <span class="hljs-number">-1</span>;<span class="hljs-comment">//收集完毕</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    按静态链表的地址排序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddrSort</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> first)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = first;<span class="hljs-comment">//j待处理数据下标</span><br>    Node TempRec;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<span class="hljs-comment">//循环，每次处理第i个记录</span><br>        TempRec = array[j];<span class="hljs-comment">//暂存第i个的记录array[j]</span><br>        <span class="hljs-built_in">swap</span>(array[i], array[j]);<br>        array[i].next = j;<span class="hljs-comment">//next链要保留调换轨迹j</span><br>        j = TempRec.next;<span class="hljs-comment">//j移动到下一位</span><br>        <span class="hljs-keyword">while</span> (j &lt;= i)<br>        &#123;<span class="hljs-comment">//j比i小，则是轨迹，顺链找</span><br>            j = array[j].next;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    基数排序：</span><br><span class="hljs-comment">        待排数组：array   </span><br><span class="hljs-comment">        数组长度：n  </span><br><span class="hljs-comment">        收集趟数：d  </span><br><span class="hljs-comment">        关键字基数：r</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RadixSort</span><span class="hljs-params">(Node* array, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> d, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//头结点</span><br>    <span class="hljs-type">int</span> first = <span class="hljs-number">0</span>;<span class="hljs-comment">//first指向第一个记录</span><br>    <span class="hljs-comment">//实例化队列</span><br>    StaticQueue* queue = <span class="hljs-keyword">new</span> StaticQueue[r];<br>    <span class="hljs-comment">//for (int i = 0; i &lt; n - 1; i++)</span><br>    <span class="hljs-comment">//&#123;//初始化静态指针域</span><br>    <span class="hljs-comment">//    array[i].next = i + 1;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//array[n - 1].next = -1;//链尾next为空</span><br><br>    <span class="hljs-comment">//对第i个排序码进行分配和收集，一共d趟</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        i==0时，取个位数；i==1时，取十位数；i==2时，取百位数</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++)<br>    &#123;<br>        <span class="hljs-built_in">Distribute</span>(array, first, i, r, queue);<br>        <span class="hljs-built_in">Collect</span>(array, first, r, queue);<br>    &#125;<br>    <span class="hljs-keyword">delete</span>[]queue;<br>    <span class="hljs-built_in">AddrSort</span>(array, n, first);<span class="hljs-comment">//按地址整理数据 </span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取分配/收集次数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetTurnNum</span><span class="hljs-params">(Node* array)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取最大值</span><br>    <span class="hljs-type">int</span> Max = array[<span class="hljs-number">0</span>].key;<br>    <span class="hljs-type">int</span> Num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SIZE; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (array[i].key&gt;Max)<br>        &#123;<br>            Max = array[i].key;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//计算收集次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> exp = <span class="hljs-number">1</span>; Max / exp &gt; <span class="hljs-number">0</span>; exp *= <span class="hljs-number">10</span>) &#123;<br>        Num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Num;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    内容输出方法：</span><br><span class="hljs-comment">        静态链表数组：Node* array</span><br><span class="hljs-comment">        数组长度：len</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Node* array,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        cout &lt;&lt; array[i].key &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//待排序静态链表型数组</span><br>    Node array[SIZE] = &#123; &#123;<span class="hljs-number">256</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">170</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">45</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">75</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">90</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">802</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">24</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-number">66</span>, <span class="hljs-number">-1</span>&#125; &#125;;<br>    cout &lt;&lt; <span class="hljs-string">&quot;原序列：&quot;</span> &lt;&lt; endl;;<br>    <span class="hljs-built_in">Print</span>(array, SIZE);<br>    <span class="hljs-comment">//分配/收集次数</span><br>    <span class="hljs-type">int</span> Num = <span class="hljs-built_in">GetTurnNum</span>(array);<br>    <span class="hljs-comment">//基数排序</span><br>    <span class="hljs-built_in">RadixSort</span>(array, SIZE, Num, RADIX);<br>    cout &lt;&lt; <span class="hljs-string">&quot;基数排序结果：&quot;</span> &lt;&lt; endl;;<br>    <span class="hljs-built_in">Print</span>(array, SIZE);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">原序列:<br>170 45 75 90 802 24 2 66<br>基数排序结果:<br>2 24 45 66 75 90 170 802<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希尔排序（Shell Sort）</title>
    <link href="/2023/10/09/ShellSort/"/>
    <url>/2023/10/09/ShellSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>希尔排序的原理、特点和完整代码实现。</p></blockquote><span id="more"></span><h1>希尔排序（Shell Sort）</h1><h2 id="原理">原理</h2><p>先将待排序表分割成若干形如L[i, i+d, i+2d, … , i+kd]的特殊子表，对各个子表分别进行直接插入排序。缩小增量d，重复上述过程，直到d = 1为止。</p><h2 id="特点">特点</h2><ul><li>空间复杂度：O(1)</li><li>时间复杂度：未知，但优于直接插入排序</li><li>稳定性：不稳定</li><li>适用性：仅可用于顺序表</li></ul><p>高频题型：给出增量序列，分析每一趟排序后的状态</p><h2 id="完整代码实现">完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 希尔排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShellSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> d,i,j;<br><span class="hljs-comment">//A[0]为暂存单元，当j&lt;=0时，就到插入位置了</span><br><span class="hljs-keyword">for</span> (d = len/<span class="hljs-number">2</span>; d &gt;=<span class="hljs-number">1</span>; d=d/<span class="hljs-number">2</span>)<span class="hljs-comment">//步长变化</span><br>&#123;<br><span class="hljs-keyword">for</span> (i = d+<span class="hljs-number">1</span>; i &lt;= len; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (A[i]&lt;A[i-d]) &#123;<span class="hljs-comment">//需将A[i]插入有序增量子表</span><br>A[<span class="hljs-number">0</span>] = A[i];  <span class="hljs-comment">//暂存在A[0]</span><br><span class="hljs-keyword">for</span>(j = i-d; j &gt;<span class="hljs-number">0</span> &amp;&amp; A[<span class="hljs-number">0</span>]&lt;A[j]; j-=d)<br>&#123;<br>A[j + d] = A[j];  <span class="hljs-comment">//记录后移，查找插入位置</span><br>&#125;<br>A[j + d] = A[<span class="hljs-number">0</span>];  <span class="hljs-comment">//插入</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//哨兵是用来判断程序何时结束的</span><br><span class="hljs-comment">//有暂存单元的数组，第一个是暂存单元</span><br><span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br><span class="hljs-built_in">ShellSort</span>(A, <span class="hljs-number">8</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;希尔排序后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>&#123;<br>cout &lt;&lt; A[i];<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>&#123;<br>cout &lt;&lt;endl;;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>折半插入排序（BInsertSort）</title>
    <link href="/2023/10/09/BInsertSort/"/>
    <url>/2023/10/09/BInsertSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>折半插入排序的特点和折半插入排序的完整实现代码。</p></blockquote><span id="more"></span><h1>折半插入排序</h1><h2 id="特点">特点</h2><p>折半查找找到应插入的位置，仅适用于顺序表。时间复杂度O(n^2)，并没有比插入排序快多少。</p><p>注意：一直到low&gt;high时才停止折半查找。当mid所指元素等于当前元素时，应继续令low = mid +1,以保证“稳定性”。最终应将当前元素插入到low所指位置（即high+1）</p><h2 id="完整实现代码">完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 折半插入排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BInsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i, j, low, mid, high;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= len; i++)<span class="hljs-comment">//依次将A[2]~A[n]插入前面的已排序序列</span><br>&#123;<br>A[<span class="hljs-number">0</span>] = A[i];<span class="hljs-comment">//将A[i]暂存到A[0]</span><br>low = <span class="hljs-number">1</span>; <span class="hljs-comment">//设置折半查找的范围</span><br>high = i - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (low&lt;=high)<span class="hljs-comment">//折半查找（默认递增有序）</span><br>&#123;<br>mid = (low + high) / <span class="hljs-number">2</span>;<span class="hljs-comment">//取中间点</span><br><span class="hljs-keyword">if</span> (A[mid]&gt;A[<span class="hljs-number">0</span>])<br>&#123;<br>high = mid - <span class="hljs-number">1</span>;<span class="hljs-comment">//查找左半子表</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>low = mid + <span class="hljs-number">1</span>;<span class="hljs-comment">//查找右半子表</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (j = i<span class="hljs-number">-1</span>; j &gt;= high+<span class="hljs-number">1</span>; --j)<br>&#123;<br>A[j + <span class="hljs-number">1</span>] = A[j]; <span class="hljs-comment">//统一后移元素，空出插入位置</span><br>&#125;<br>A[high + <span class="hljs-number">1</span>] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//插入操作</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//哨兵是用来判断程序何时结束的</span><br><span class="hljs-comment">//有暂存单元的数组，第一个是暂存单元</span><br><span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br><span class="hljs-built_in">BInsertSort</span>(A, <span class="hljs-number">8</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;折半插入排序后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>&#123;<br>cout &lt;&lt; A[i];<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>&#123;<br>cout &lt;&lt;endl;;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插入排序（InsertSort）</title>
    <link href="/2023/10/08/InsertSort/"/>
    <url>/2023/10/08/InsertSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要总结了插入排序的相关知识，其中包括插入排序的特点、原理和直接插入排序的完整实现代码。</p></blockquote><span id="more"></span><h1>插入排序</h1><h2 id="插入排序特点">插入排序特点</h2><ul><li>稳定排序</li><li>算法简便，且容易实现</li><li>空间复杂度：O(1)；时间复杂度：平均O(n^2)</li><li>也适合用于链式存储结构，只是在单链表上无需移动记录，只需修改相应的指针</li><li>更适合于初始记录基本有序（正序）的情况，当初始记录无序，n较大时，此算法时间复杂度较高，不宜采用</li></ul><h2 id="插入排序过程-原理">插入排序过程(原理)</h2><p>插入排序是指在待排序的元素中，假设前面n-1(其中n&gt;=2)个数已经是排好顺序的，现将第n个数插到前面已经排好的序列中，然后找到合适自己的位置，使得插入第n个数的这个序列也是排好顺序的。按照此法对所有元素进行插入，直到整个序列排为有序的过程，称为插入排序。</p><h2 id="完整代码实现（直接插入排序）">完整代码实现（直接插入排序）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//插入排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//保存要替换的位置（数组下标）</span><br>    <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>; <span class="hljs-comment">//保存提取的未排序的元素值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-comment">//提取未排序的元素</span><br>        temp = arr[i];<br>        <span class="hljs-keyword">for</span> (j = i<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>&amp;&amp;arr[j]&gt;temp; j--)<br>        &#123;<br>            arr[j + <span class="hljs-number">1</span>] = arr[j]; <br>        &#125;<br>        arr[j+<span class="hljs-number">1</span>] = temp;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//数组打印</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len,<span class="hljs-type">int</span> start = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;&#123;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k == len - <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot; &#125;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot;，&quot;</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>&#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">8</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入排序前：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">printArr</span>(arr, len);<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入排序：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">InsertSort</span>(arr, len);<br>    cout &lt;&lt; <span class="hljs-string">&quot;插入排序后：&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">printArr</span>(arr,len);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">test02</span>();<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向链表（DuLinkList）</title>
    <link href="/2023/10/07/DuLinkList/"/>
    <url>/2023/10/07/DuLinkList/</url>
    
    <content type="html"><![CDATA[<blockquote><p>双向链表与单链表的主要区别和完整实现代码。</p></blockquote><span id="more"></span><hr><p>前置文章：<a href="https://superlovelace.top/2022/12/10/LinkList/">单链表</a></p><h1>双向链表（DuLinkList）</h1><h2 id="存储结构">存储结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span><br>&#123;<br>ElemType data; <span class="hljs-comment">//数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* prior; <span class="hljs-comment">//直接前驱</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* next; <span class="hljs-comment">//直接后继</span><br>&#125;DuLNode, * DuLinkList;<br></code></pre></td></tr></table></figure><h2 id="与单链表主要区别">与单链表主要区别</h2><p>比单链表多了个头结点，因此可以从最后一个结点往前遍历<br>与单链表主要区别在 存储结构、初始化、插入和删除的方法上，其他的可通用</p><p>与单链表代码不同的地方：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 双向链表结构 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span><br>&#123;<br>ElemType data; <span class="hljs-comment">//数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* prior; <span class="hljs-comment">//直接前驱</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* next; <span class="hljs-comment">//直接后继</span><br>&#125;DuLNode, * DuLinkList;<br><br><span class="hljs-comment">//初始化双链表 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(DuLinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>L = <span class="hljs-keyword">new</span> DuLNode;<br>L-&gt;prior = <span class="hljs-literal">NULL</span>;<br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的取址（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要取址的双链表</span><br><span class="hljs-comment">参数二：要取址的位置</span><br><span class="hljs-comment">这是获取插入位置前一个的地址</span><br><span class="hljs-comment">如果想把数据插入1号位置，就返回第1-1号位置的地址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DuLNode* <span class="hljs-title">GetElem_Dul</span><span class="hljs-params">(DuLinkList L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = L;<br><span class="hljs-comment">//if (p-&gt;next == NULL)//如果头结点L的后继为空，则返回头结点L的地址</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//return p;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i<span class="hljs-number">-1</span>)<br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || j &gt; i)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的插入（按位序前插入）:时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要插入的双链表</span><br><span class="hljs-comment">参数二：要插入的位置</span><br><span class="hljs-comment">参数三：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = <span class="hljs-built_in">GetElem_Dul</span>(L, i);<span class="hljs-comment">//获取插入位置的前驱结点</span><br>DuLNode* s = <span class="hljs-keyword">new</span> DuLNode; <span class="hljs-comment">//创建新结点</span><br>s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>s-&gt;next = p-&gt;next;<span class="hljs-comment">//改s的前驱和后继</span><br><span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>p-&gt;next-&gt;prior = s;<span class="hljs-comment">//p的指针指向新节点s</span><br>&#125;<br><br>s-&gt;prior = p;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>p-&gt;next = s;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的删除:   时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要删除的双链表</span><br><span class="hljs-comment">参数二：要删除的位置</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br><span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; (j &lt; i - <span class="hljs-number">1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!(p-&gt;next) || (j &gt; i - <span class="hljs-number">1</span>))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>DuLNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>p-&gt;next-&gt;next-&gt;prior = p;<span class="hljs-comment">//修改q-&gt;next的前驱</span><br>p-&gt;next = p-&gt;next-&gt;next;<span class="hljs-comment">//修改p的后继</span><br><span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整实现代码">完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表 Double Link List</span><br><span class="hljs-comment">比单链表多了个头结点，因此可以从最后一个结点往前遍历</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">与单链表主要区别在 存储结构、插入和删除的方法上，其他的可通用</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span><br>&#123;<br>ElemType data; <span class="hljs-comment">//数据域</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* prior; <span class="hljs-comment">//直接前驱</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DuLNode</span>* next; <span class="hljs-comment">//直接后继</span><br>&#125;DuLNode, * DuLinkList;<br><br><span class="hljs-comment">//初始化双链表 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(DuLinkList&amp; L)</span></span><br><span class="hljs-function"></span>&#123;<br>L = <span class="hljs-keyword">new</span> DuLNode;<br>L-&gt;prior = <span class="hljs-literal">NULL</span>;<br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的取值（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要取值的双链表</span><br><span class="hljs-comment">参数二：要取值的位置</span><br><span class="hljs-comment">参数三：待保存的对象</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(DuLinkList L, <span class="hljs-type">int</span> i, ElemType&amp; e)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = L-&gt;next;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i)<br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || j &gt; i)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>e = p-&gt;data;<br><span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的取址（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要取址的双链表</span><br><span class="hljs-comment">参数二：要取址的位置</span><br><span class="hljs-comment">这是获取插入位置前一个的地址</span><br><span class="hljs-comment">如果想把数据插入1号位置，就返回第1-1号位置的地址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DuLNode* <span class="hljs-title">GetElem_Dul</span><span class="hljs-params">(DuLinkList L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = L;<br><span class="hljs-comment">//if (p-&gt;next == NULL)//如果头结点L的后继为空，则返回头结点L的地址</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//return p;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i<span class="hljs-number">-1</span>)<br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || j &gt; i)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的查找（按值查找）:   时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要查找的双链表</span><br><span class="hljs-comment">参数二：要查找的数据</span><br><span class="hljs-comment">注意：成功：返回下标地址；失败：返回NULL。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">DuLNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(DuLinkList L, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = L-&gt;next;<span class="hljs-comment">//创建新结点，并指向第一块数据</span><br><span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data != e)<span class="hljs-comment">//如果p不为空且data != e,指向下一个</span><br>&#123;<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> p;<span class="hljs-comment">//找到e返回p的地址，没找到返回NULL</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的插入（按位序前插入）:时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要插入的双链表</span><br><span class="hljs-comment">参数二：要插入的位置</span><br><span class="hljs-comment">参数三：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = <span class="hljs-built_in">GetElem_Dul</span>(L, i);<span class="hljs-comment">//获取插入位置的前驱结点</span><br>DuLNode* s = <span class="hljs-keyword">new</span> DuLNode; <span class="hljs-comment">//创建新结点</span><br>s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>s-&gt;next = p-&gt;next;<span class="hljs-comment">//改s的前驱和后继</span><br><span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>)<br>&#123;<br>p-&gt;next-&gt;prior = s;<span class="hljs-comment">//p的指针指向新节点s</span><br>&#125;<br><br>s-&gt;prior = p;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>p-&gt;next = s;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">双链表的删除:   时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要删除的双链表</span><br><span class="hljs-comment">参数二：要删除的位置</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(DuLinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>DuLNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br><span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; (j &lt; i - <span class="hljs-number">1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!(p-&gt;next) || (j &gt; i - <span class="hljs-number">1</span>))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>DuLNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>p-&gt;next-&gt;next-&gt;prior = p;<span class="hljs-comment">//修改q-&gt;next的前驱</span><br>p-&gt;next = p-&gt;next-&gt;next;<span class="hljs-comment">//修改p的后继</span><br><span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>DuLinkList L;<br><span class="hljs-comment">//初始化双链表</span><br><span class="hljs-built_in">InitList</span>(L);<br><span class="hljs-comment">//插入双链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-built_in">ListInsert</span>(L, i, i);<br>&#125;<br><span class="hljs-comment">//取值</span><br><span class="hljs-type">int</span> e;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//查找</span><br>cout &lt;&lt; <span class="hljs-string">&quot;5的地址为：&quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(L, <span class="hljs-number">1</span>) &lt;&lt; endl;<br><span class="hljs-comment">//删除</span><br><span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">2</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;删除第一个元素1：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环链表（Circular Link List）</title>
    <link href="/2023/10/06/CircularLinkList/"/>
    <url>/2023/10/06/CircularLinkList/</url>
    
    <content type="html"><![CDATA[<blockquote><p>循环链表与单链表的主要区别和完整实现代码。</p></blockquote><span id="more"></span><hr><p>前置文章：<a href="https://superlovelace.top/2022/12/10/LinkList/">单链表</a></p><h1>循环链表(Circular Link List)</h1><p>初始循环链表的头结点的后继指向自己</p><h2 id="与单链表主要区别">与单链表主要区别</h2><ul><li>在遍历时判断结点是否为头结点 而不是 是否为空</li><li>空的双向循环链表的头结点的前驱和后继都指向自己</li><li>两个循环链表可以合并为一个，循环链表A、B 定义指针 p</li><li>p指向B链表的最后一个结点指向的下下个结点的地址，即B的头结点指向的第一个数据</li><li>把A链表的最后一个结点的后继（A的头结点）赋值给 B链表的最后一个结点的后继（B的头结点）</li><li>把p的地址赋值给A链表的最后一个结点的后继</li><li>p = B-&gt;next-&gt;next;//把B的头结点地址指向给p</li><li>B-&gt;next = A-&gt;next; //把B的尾结点地址指向A的头结点</li><li>A-&gt;next = p;//把A的尾结点地址指向B的头结点指向的地址（B的第一个有值结点）</li></ul><h2 id="代码不同处">代码不同处</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始化 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>L = <span class="hljs-keyword">new</span> LNode;<br>L-&gt;next = L;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>LNode *p = L-&gt;next;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (p!=L &amp;&amp; j&lt;i)<span class="hljs-comment">//这里的改动！类似这种循环遍历的地方都要改</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (p==L || j &gt; i) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>e = p-&gt;data;<br><span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完整实现代码">完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环链表 Circular Link List</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>ElemType data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化循环链表 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>L = <span class="hljs-keyword">new</span> LNode;<br>L-&gt;next = L;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环链表的取值（按位查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要取值的循环链表</span><br><span class="hljs-comment">参数二：要取值的位置</span><br><span class="hljs-comment">参数三：待保存的对象</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>LNode *p = L-&gt;next;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (p!=L &amp;&amp; j&lt;i)<span class="hljs-comment">//循环链表修改处！！！</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (p==L || j &gt; i) <span class="hljs-comment">//循环链表修改处！！！</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>e = p-&gt;data;<br><span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环链表的查找（按值查找）:   时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要查找的循环链表</span><br><span class="hljs-comment">参数二：要查找的数据</span><br><span class="hljs-comment">注意：成功：返回下标地址；失败：返回NULL。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br>LNode* p = L-&gt;next;<span class="hljs-comment">//创建新结点，并指向第一块数据</span><br><span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="hljs-comment">//如果p不为空且data == e,返回p的地址</span><br>&#123;<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环链表的插入（按位序插入）:时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要插入的循环链表</span><br><span class="hljs-comment">参数二：要插入的位置</span><br><span class="hljs-comment">参数三：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br><span class="hljs-comment">//循环链表修改处！！！</span><br><span class="hljs-keyword">while</span> (p-&gt;next!=L &amp;&amp; (j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-comment">//循环链表修改处！！！</span><br><span class="hljs-keyword">if</span> (p==L || j&gt;i<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果地址p为NULL就退出，头结点的地址也不为空</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* s = <span class="hljs-keyword">new</span> LNode; <span class="hljs-comment">//创建新结点</span><br>s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">循环链表的删除:   时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要删除的循环链表</span><br><span class="hljs-comment">参数二：要删除的位置</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br><span class="hljs-comment">//循环链表修改处！！！</span><br><span class="hljs-keyword">while</span> (p-&gt;next != L &amp;&amp;(j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-comment">//循环链表修改处！！！</span><br><span class="hljs-keyword">if</span> (p-&gt;next == L||(j&gt;i<span class="hljs-number">-1</span>))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>p-&gt;next = q-&gt;next;<span class="hljs-comment">//p的指针指向q的指针指向的下一个数据地址</span><br><span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LinkList L;<br><span class="hljs-comment">//初始化循环链表</span><br><span class="hljs-built_in">InitList</span>(L);<br><span class="hljs-comment">//插入循环链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-built_in">ListInsert</span>(L, <span class="hljs-number">1</span>, i);<br>&#125;<br><span class="hljs-comment">//取值</span><br><span class="hljs-type">int</span> e;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//查找</span><br>cout &lt;&lt; <span class="hljs-string">&quot;5的地址为：&quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(L, <span class="hljs-number">5</span>) &lt;&lt; endl;<br><span class="hljs-comment">//删除</span><br><span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">1</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;删除第一个元素5：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序（Merge Sort）</title>
    <link href="/2023/10/05/MergeSort/"/>
    <url>/2023/10/05/MergeSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>归并排序的介绍，包括归并排序的特点、原理和完整实现代码。</p></blockquote><span id="more"></span><h1>归并排序（Merge Sort）</h1><p>把两个或多个有序的子序列合并为一个</p><p>2路归并：二合一</p><p>k路归并：k合一</p><h2 id="归并排序特点">归并排序特点</h2><ul><li>是稳定排序</li><li>可用于链式结构，且不需要附加存储空间，但递归实现时仍需要开辟相应的递归工作栈</li><li>空间复杂度：O（n）</li><li>时间复杂度：O（nlogn）</li></ul><h2 id="归并排序过程-原理">归并排序过程(原理)</h2><ol><li>若low &gt; high ，则将序列分从中间mid = (low + high)/2</li><li>对左半部分【low，mid】递归地进行归并排序</li><li>对右半部分【mid+1，high】递归地进行归并排序</li><li>将左右两个有序子序列Merge为一个</li></ol><h2 id="完整代码实现">完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 辅助数组B */</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* B = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(n * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)); <span class="hljs-comment">//方式一</span><br><span class="hljs-type">int</span>* B2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n]; <span class="hljs-comment">//方式二</span><br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">归并</span><br><span class="hljs-comment">A[low...mid]和A[mid+1...high]各自有序，将两个部分归并</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> high)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-keyword">for</span> ( k = low; k &lt;= high; k++)<br>&#123;<br>B[k] = A[k];  <span class="hljs-comment">//将A中所有元素复制到B中</span><br>&#125;<br><span class="hljs-keyword">for</span> (i = low,j = mid+<span class="hljs-number">1</span>,k = i;i&lt;=mid&amp;&amp;j&lt;=high; k++)<br>&#123;<br><span class="hljs-keyword">if</span> (B[i] &lt;= B[j]) &#123;<br>A[k] = B[i++];<span class="hljs-comment">//将较小值复制到A中</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>A[k] = B[j++];<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (i&lt;=mid)<br>&#123;<br>A[k++] = B[i++];<br>&#125;<br><span class="hljs-keyword">while</span> (j &lt;= high)<br>&#123;<br>A[k++] = B[j++];<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 归并排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (low&lt;high) &#123;<br><span class="hljs-type">int</span> mid = (low + high) / <span class="hljs-number">2</span>; <span class="hljs-comment">//从中间划分</span><br><span class="hljs-built_in">MergeSort</span>(A, low, mid);  <span class="hljs-comment">//对左半部分归并排序</span><br><span class="hljs-built_in">MergeSort</span>(A, mid+<span class="hljs-number">1</span>, high); <span class="hljs-comment">//右半部分归并排序</span><br><span class="hljs-built_in">Merge</span>(A, low, mid, high); <span class="hljs-comment">//归并</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a[] = &#123; <span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br><span class="hljs-built_in">MergeSort</span>(a, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;归并排序后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)<br>&#123;<br>cout &lt;&lt; a[i];<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">7</span>)<br>&#123;<br>cout &lt;&lt;endl;;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">归并排序后：<br>1,2,3,4,5,6,8,9<br><br>按任意键关闭此窗口. . .<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VsCode启动警告：无法导入Django</title>
    <link href="/2023/10/05/DjangoStartError/"/>
    <url>/2023/10/05/DjangoStartError/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ImportError: Couldn’t import Django. Are you sure it’s installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?</p></blockquote><span id="more"></span><h2 id="错误信息：">错误信息：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">PS F:\mysite\mysite&gt; python manage.py runserver<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;manage.py&quot;</span>, line <span class="hljs-number">8</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">from</span> django.core.management <span class="hljs-keyword">import</span> execute_from_command_line<br>ModuleNotFoundError: No module named <span class="hljs-string">&#x27;django&#x27;</span><br><br>The above exception was the direct cause of the following exception:<br><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;manage.py&quot;</span>, line <span class="hljs-number">10</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">raise</span> ImportError(<br>ImportError: Couldn<span class="hljs-string">&#x27;t import Django. Are you sure it&#x27;</span>s installed <span class="hljs-keyword">and</span> available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?<br>PS F:\mysite\mysite&gt; <br></code></pre></td></tr></table></figure><p>错误信息翻译：</p><p>不能导入Django，您确定PYTHONPATH环境变量已安装并可用吗？您是否忘记激活虚拟环境？</p><hr><h2 id="查看环境变量">查看环境变量</h2><p>发现系统的环境变量PATH里没有python，然后去用户环境变量，发现PAYH内容如下：</p><table><thead><tr><th>用户PATH内容</th></tr></thead><tbody><tr><td>D:\anaconda3</td></tr><tr><td>D:\anaconda3\Library\mingw-w64\bin</td></tr><tr><td>D:\anaconda3\Library\usr\bin</td></tr><tr><td>D:\anaconda3\Library\bin</td></tr><tr><td>D:\anaconda3\Scripts</td></tr><tr><td>D:\python\Scripts\</td></tr><tr><td>D:\python\</td></tr></tbody></table><p>这样先找的就是anaconda里的python</p><hr><h2 id="解决方法">解决方法</h2><p>将D:\python\上移到第一个，然后确定。</p><table><thead><tr><th>用户PATH更改后</th></tr></thead><tbody><tr><td>D:\python\</td></tr><tr><td>D:\anaconda3</td></tr><tr><td>D:\anaconda3\Library\mingw-w64\bin</td></tr><tr><td>D:\anaconda3\Library\usr\bin</td></tr><tr><td>D:\anaconda3\Library\bin</td></tr><tr><td>D:\anaconda3\Scripts</td></tr><tr><td>D:\python\Scripts\</td></tr><tr><td></td></tr></tbody></table><h2 id="重启VSCode">重启VSCode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">PS F:\mysite\mysite&gt; python manage.py runserver<br>Watching <span class="hljs-keyword">for</span> file changes <span class="hljs-keyword">with</span> StatReloader<br>Performing system checks...<br><br>System check identified no issues (<span class="hljs-number">0</span> silenced).<br>October <span class="hljs-number">13</span>, <span class="hljs-number">2021</span> - <span class="hljs-number">11</span>:<span class="hljs-number">25</span>:<span class="hljs-number">26</span><br>Django version <span class="hljs-number">3.0</span>, using settings <span class="hljs-string">&#x27;mysite.settings&#x27;</span> <br>Starting development server at http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8000</span>/<br>Quit the server <span class="hljs-keyword">with</span> CTRL-BREAK.<br><br></code></pre></td></tr></table></figure><p>OK，启动成功！</p>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo添加网站地图</title>
    <link href="/2023/10/04/HexoWebsite/"/>
    <url>/2023/10/04/HexoWebsite/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo下载相关插件，以完成自动生成网站地图。</p></blockquote><span id="more"></span><h1>Hexo添加网站地图</h1><h2 id="先进入你的网站根目录">先进入你的网站根目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd hexo<br></code></pre></td></tr></table></figure><h2 id="安装地图生成插件">安装地图生成插件</h2><h3 id="谷歌地图生成器：">谷歌地图生成器：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-sitemap --save<br></code></pre></td></tr></table></figure><h3 id="百度地图生成器：">百度地图生成器：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-generator-baidu-sitemap --save<br></code></pre></td></tr></table></figure><h3 id="修改-hexo-配置文件-config-yml">修改 hexo 配置文件 <code>_config.yml</code></h3><p>注意：这里不是主题里的配置文件。</p><p>找个空位置，添加如下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">自动生成sitemap，生成路径path一定要缩进，不然报错</span><br>sitemap:<br>path: sitemap.xml<br>baidusitemap:<br>path: baidusitemap.xml<br></code></pre></td></tr></table></figure><p>保存文件。这样你再次生成的时候就可以在<code>public</code>文件夹内看到了3</p><h2 id="添加robots-txt">添加<code>robots.txt</code></h2><p>在source文件夹下创建<code>robots.txt</code>，并写入类似下面的配置，来规范搜索引擎的行为。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-agent: *<br>Allow: /<br>Allow: /archives/<br>Allow: /categories/<br>Allow: /tags/<br>Disallow: /about/<br>Disallow: /*.jpg$<br>Disallow: /*.jpeg$<br>Disallow: /*.gif$<br>Disallow: /*.png$<br>Disallow: /*.bmp$<br><br>Sitemap: https://你的网址/sitemap.xml<br>Sitemap: https://你的网址/baidusitemap.xml<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="/2023/10/04/HexoBlogBuild/"/>
    <url>/2023/10/04/HexoBlogBuild/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo静态博客搭建，从准备阶段安装<code>nodej.s</code>到正式安装Hexo博客框架，最后安装主题并开始使用。</p></blockquote><span id="more"></span><h1>Hexo静态博客搭建</h1><h2 id="准备阶段">准备阶段</h2><p>首先安装<code>node.js</code></p><p>在应用商店安装Node.js版本管理器 1.7</p><p>安装成功后，选择安装Node.js  v16.18.1</p><p>安装成功后测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -verson<br></code></pre></td></tr></table></figure><p>发现找不到命令，打开Node.js版本管理器，修改环境变量</p><p>第一条是环境变量后面加上/bin；第二条是下载地址，改成国内镜像；第三条不用动；第四条在前面加–</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">prefix = /www/server/nodejs/v16<span class="hljs-number">.18</span><span class="hljs-number">.1</span>/bin<br>registry = https:<span class="hljs-comment">//registry.npm.taobao.org</span><br>cache = /www/server/nodejs/cache/<br>--init-<span class="hljs-keyword">module</span> = /www/server/nodejs/v16<span class="hljs-number">.18</span><span class="hljs-number">.1</span>/etc/init-<span class="hljs-keyword">module</span>.js<br></code></pre></td></tr></table></figure><hr><p>修改环境变量，打开文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi  <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p>添加数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/www/</span>server<span class="hljs-regexp">/nodejs/</span>v16.<span class="hljs-number">18.1</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>让文件生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>再次测试，成功显示版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -verson<br></code></pre></td></tr></table></figure><p>安装git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install git-core<br></code></pre></td></tr></table></figure><h2 id="正式安装">正式安装</h2><h3 id="安装-Hexo">安装 Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>报错：npm WARN config init.module Use <code>--init-module</code> instead.</p><p>进入应用程序的环境变量，把<code>init.module </code>修改为<code>--init.module </code>，保存</p><p>再次安装，安装成功</p><ol><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure><h2 id="配置文件：">配置文件：</h2><p>安装 Hexo 完成后，新建个要作为网站的文件夹</p><p>请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。/www/wwwroot/hexo为网站目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init /www/wwwroot/hexo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /www/wwwroot/hexo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure><p>期间报错依赖安装失败，让执行<code>npm install</code>，就继续执行就可以</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><h2 id="以-zhaoo-主题为例进行主题安装">以 zhaoo 主题为例进行主题安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/zhaoo/hexo-theme-zhaoo.git themes/zhaoo<br></code></pre></td></tr></table></figure><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件启用 zhaoo 主题：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> zhaoo<br></code></pre></td></tr></table></figure><p>建议将文章数量改为<strong>9</strong>篇，启用代码高亮效果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">9</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span><br></code></pre></td></tr></table></figure><h2 id="运行服务器">运行服务器</h2><p>发布网站<br>安装服务器：Hexo 3.0 把服务器独立成了个别模块，我们必须得在站点文件夹根目录下安装之后才能使用。<br>在命令行中打开我们的工作站文件夹，键入以下命令，以将 hexo-server 安装到我们的工作站文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-server --save<br></code></pre></td></tr></table></figure><p>清除缓存文件<br>为了避免不必要的错误，在生成静态文件前，强烈建议每次发布网站前先运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br></code></pre></td></tr></table></figure><p>首先执行下列命令生成相应的静态网页，生成的静态网页以及相关资源都会在public目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo generate<br></code></pre></td></tr></table></figure><p>hexo-server模块的主要命令如下，输入以下命令以启动服务器，在浏览器进入 <a href="http://localhost:4000">http://localhost:4000</a> 就可以看到我们的网站了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server<br></code></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo server -p 5000<br></code></pre></td></tr></table></figure><h2 id="日常使用：">日常使用：</h2><p><a href="https://www.izhaoo.com/2020/05/05/hexo-theme-zhaoo-doc/">主题配置文档</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VSCode弹窗警告</title>
    <link href="/2023/10/03/VSCodeAlert/"/>
    <url>/2023/10/03/VSCodeAlert/</url>
    
    <content type="html"><![CDATA[<blockquote><p>VSCode启动后弹窗警告：The environment variable ‘Path’ seems to…</p></blockquote><span id="more"></span><h2 id="警告详细信息：">警告详细信息：</h2><blockquote><p>The environment variable ‘Path’ seems to have some paths containing the ‘&quot;’ character. The existence of such a character is known to have caused the Python extension to not load. If the extension fails to load please modify your paths to remove this ‘&quot;’ character.</p></blockquote><p>中文含义：</p><blockquote><p>环境变量“Path”的某些路径似乎包含“”字符。已知存在这样的字符导致Python扩展无法加载。如果扩展无法加载，请修改路径以删除此“”字符。</p></blockquote><p>这里的 &quot; &quot;指的是环境变量存在引号，这里可以通过启动<code>cmd</code>命令提示符，输入命令<code>path</code>查看。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Microsoft Windows [版本 10.0.19044.2728]<br>(c) Microsoft Corporation。保留所有权利。<br><br>C:\Users\user&gt;path<br>PATH=C:\Program Files\Java\jdk1.8.0_251\bin;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\WINDOWS\System32;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Windows\System32;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;D:\mysql\bin;C:\WINDOWS\System32\OpenSSH\;D:\Program Files\MongoDB\bin;D:\Program Files\Git\cmd;D:\Program Files\微信web开发者工具\dll;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;&quot;;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\&quot;;D:\python\;D:\python\Scripts\;D:\anaconda3;D:\anaconda3\Library\mingw-w64\bin;D:\anaconda3\Library\usr\bin;D:\anaconda3\Library\bin;D:\anaconda3\Scripts;C:\Users\user\AppData\Local\Microsoft\WindowsApps;D:\web\apache-maven-3.6.0\bin;D:\Program Files\Microsoft VS Code\bin;C:\Program Files (x86)\Tencent\QQGameTempest\Hall.57938\;<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure><p>仔细观察一下，即可看到有路径被引号包括了。这里之所以被引号包括是因为在<code>path</code>编辑环境变量里，有一行或多行的路径栏里，把众多路径用<code>;</code>给合并到一栏了，类似这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%SYSTEMROOT%\System32\OpenSSH\<br></code></pre></td></tr></table></figure><h2 id="解决方法：">解决方法：</h2><p>去系统Path环境变量，将合并在一起的路径拆分成单个的，分别新建一栏存放，然后点击确定，重启<code>VSCode</code>即可。</p><p>示例：</p><ul><li>拆分前（一栏就这么多）：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">;D:\Program Files\MATLAB\R2017a\runtime\win64;D:\Program Files\MATLAB\R2017a\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%SYSTEMROOT%\System32\OpenSSH\<br></code></pre></td></tr></table></figure><ul><li>拆分后（分成了七栏）：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\Program Files\MATLAB\R2017a\runtime\win64<br>D:\Program Files\MATLAB\R2017a\bin<br><span class="hljs-meta prompt_">%</span><span class="language-bash">SystemRoot%\system32</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">SystemRoot%</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">SystemRoot%\System32\Wbem</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">SYSTEMROOT%\System32\WindowsPowerShell\v1.0\</span><br><span class="language-bash">%SYSTEMROOT%\System32\OpenSSH\</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue启动失败（VSCode）</title>
    <link href="/2023/10/03/VueStartFail/"/>
    <url>/2023/10/03/VueStartFail/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Vue UI 在VS Code终端启动失败</p></blockquote><span id="more"></span><h1>Vue UI 在VS Code终端启动失败</h1><h2 id="问题分析">问题分析</h2><p>错误信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> F:\myblog\myblog&gt; vue ui<br>vue : 无法加载文件 C:\Users\user\AppData\Roaming\npm\vue.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参 <br>阅 https:/go.microsoft.com/fwlink/?LinkID=<span class="hljs-number">135170</span> 中的 about_Execution_Policies。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ vue ui<br>+ ~~~<br>    + CategoryInfo          : SecurityError: (:) []，PSSecurityException<br>    + FullyQualifiedErrorId : UnauthorizedAccess<br><span class="hljs-built_in">PS</span> F:\myblog\myblog&gt; <br></code></pre></td></tr></table></figure><p>分析：</p><p>点开地址：https:/go.microsoft.com/fwlink/?LinkID=135170</p><p>发现此处信息</p><h3 id="Default">Default</h3><ul><li>设置默认执行策略。</li><li><strong>Restricted</strong> 适用于 Windows 客户端的 。</li><li>适用于 Windows 服务器的 <strong>RemoteSigned</strong>。</li></ul><p>此处说明，在Windows 客户端，我们的策略默认是<strong>Restricted</strong></p><p>查看相应文本信息：</p><h3 id="Restricted">Restricted</h3><ul><li>Windows 客户端计算机的默认执行策略。</li><li>允许单个命令，但不允许脚本。</li><li>阻止运行所有脚本文件，包括格式化和配置文件 () <code>.ps1xml</code> 、模块脚本文件 (<code>.psm1</code>) ，以及 PowerShell 配置文件 () <code>.ps1</code> 。</li></ul><p>上面说  配置文件 () <code>.ps1</code> 的文件也会被阻止运行，而我们需要运行的<code>vue.ps1</code>正好属于此项。</p><p>OK，问题已查明，要解决问题需要更改执行策略。</p><h2 id="问题解决">问题解决</h2><p>查看其他几个策略，寻找允许脚本运行的策略：</p><h3 id="AllSigned">AllSigned</h3><ul><li>脚本可以运行。</li><li>要求所有脚本和配置文件都由受信任的发布者签名，包括在本地计算机上编写的脚本。</li><li>从尚未分类为受信任或不受信任的发布者运行脚本之前，会提示你。</li><li>运行已签名但恶意脚本的风险。</li></ul><h3 id="RemoteSigned">RemoteSigned</h3><ul><li>Windows Server 计算机的默认执行策略。</li><li>脚本可以运行。</li><li>需要受信任的发布者对从 Internet 下载的脚本和配置文件（包括电子邮件和即时消息程序）的数字签名。</li><li>不需要在本地计算机上编写且未从 Internet 下载的脚本上使用数字签名。</li><li>如果未阻止脚本（例如使用 cmdlet），则运行从 Internet 下载且未签名的 <code>Unblock-File</code> 脚本。</li><li>运行来自 Internet 以外的源的未签名脚本以及可能是恶意的已签名脚本的风险。</li></ul><p><strong>RemoteSigned</strong>  为服务器端的默认执行策略，我们需要选择把策略改成这个</p><p><strong>用管理员身份打开PowerShell</strong></p><p>输入命令（设置执行策略为：RemoteSigned）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned<br></code></pre></td></tr></table></figure><p>然后输入Y，确定更改。</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Windows PowerShell<br>版权所有 (C) Microsoft Corporation。保留所有权利。<br><br>尝试新的跨平台 PowerShell https://aka.ms/pscore6<br><br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt; <span class="hljs-built_in">set-ExecutionPolicy</span> RemoteSigned<br><br>执行策略更改<br>执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class="hljs-number">135170</span><br>中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?<br>[<span class="hljs-type">Y</span>] 是(Y)  [<span class="hljs-type">A</span>] 全是(A)  [<span class="hljs-type">N</span>] 否(N)  [<span class="hljs-type">L</span>] 全否(L)  [<span class="hljs-type">S</span>] 暂停(S)  [?] 帮助 (默认值为“N”): Y<br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt;<br></code></pre></td></tr></table></figure><p>OK，再次在VSCode中执行终端命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> F:\myblog\myblog&gt; vue ui<br>🚀  Starting GUI...<br>🌠  Ready on http://localhost:<span class="hljs-number">8000</span><br><br></code></pre></td></tr></table></figure><p>发现已成功启动！</p><p>OK，问题已解决，去开启你的奇妙之旅吧！</p><hr><p>注：以上内容为本人实践总结，如有疏漏或错误的地方，还请评论区指正；如果您觉得写的还不错或者对您有帮助的话，欢迎点赞收藏。</p>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动词分类</title>
    <link href="/2023/10/02/VerbCategories/"/>
    <url>/2023/10/02/VerbCategories/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在此了解动词的基本分类</p></blockquote><span id="more"></span><p>注：本文为学习笔记，视频学习地址为：<a href="https://www.bilibili.com/video/BV1XY411J7aG/">英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系)</a></p><h1>动词分类</h1><h2 id="一、可做谓语动词">一、可做谓语动词</h2><h3 id="1、实义动词">1、实义动词</h3><ul><li>（按动作承受者划分）<ul><li>及物动词</li><li>不及物动词</li></ul></li><li>（按状态动作划分）<ul><li>动作动词（eat）</li><li>状态动词（have、feel、own、believe等，这些词并没有真正动起来的意思）</li></ul></li></ul><h3 id="2、-连-系动词">2、(连)系动词</h3><p>有些会把<strong>系动词</strong>划在<strong>不及物动词</strong>里，而且也可被看作<strong>状态动词</strong>。</p><h2 id="二、可辅助构成谓语动词">二、可辅助构成谓语动词</h2><h3 id="1、助动词">1、助动词</h3><h3 id="2、情态动词">2、情态动词</h3><p><strong>情态动词</strong>也被视为<strong>助动词</strong>的一种</p><h2 id="三、不可做谓语动词">三、不可做谓语动词</h2><h3 id="1、非谓语动词">1、非谓语动词</h3><ul><li>不定式</li><li>过去分词</li><li>现在分词</li><li>动名词</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NTP时间同步服务安装指南（Linux）</title>
    <link href="/2023/10/02/NTP/"/>
    <url>/2023/10/02/NTP/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Linux系统每次启动时间都不正确，若每次手动修改则很不便，安装NTP时间同步服务即可自动同步时间。</p></blockquote><span id="more"></span><h1>Linux安装NTP时间同步服务</h1><h3 id="安装命令：">安装命令：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install ntp<br></code></pre></td></tr></table></figure><h3 id="启动NTP服务：">启动NTP服务：</h3><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start ntpd<br><span class="hljs-params">system</span>ctl enable ntpd<br></code></pre></td></tr></table></figure><h3 id="查看NTP服务运行状态：">查看NTP服务运行状态：</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status ntpd</span><br></code></pre></td></tr></table></figure><h3 id="修改配置文件：">修改配置文件：</h3><p>我这里没有安装<code>vim</code>，所以用<code>vi</code>，<code>vim</code>也一样只是换个名。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>ntp.conf<br></code></pre></td></tr></table></figure><p>我这里有个问题，找不到配置文件，但是用文件查找命令发现就在那里，也许是被隐藏了吧。<br>ntp配置文件查找命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo <span class="hljs-built_in">find</span> / -name ntp.conf<br></code></pre></td></tr></table></figure><p>修改内容：新增阿里云时间服务器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">server ntp<span class="hljs-selector-class">.aliyun</span><span class="hljs-selector-class">.com</span> iburst<br></code></pre></td></tr></table></figure><h3 id="查看配置文件中设置的NTP授时服务器">查看配置文件中设置的NTP授时服务器</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> server <span class="hljs-regexp">/etc/</span>ntp.conf <br></code></pre></td></tr></table></figure><p>终端显示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># Use <span class="hljs-built_in">public</span> servers <span class="hljs-keyword">from</span> the pool.ntp.org project.<br><span class="hljs-keyword">server</span> <span class="hljs-number">0.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> <span class="hljs-number">1.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> <span class="hljs-number">2.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> <span class="hljs-number">3.</span>centos.pool.ntp.org iburst<br><span class="hljs-keyword">server</span> ntp.aliyun.com iburst<br><span class="hljs-meta">#broadcast 192.168.1.255 autokey        # broadcast server</span><br><span class="hljs-meta">#broadcast 224.0.1.1 autokey            # multicast server</span><br><span class="hljs-meta">#manycastserver 239.255.254.254         # manycast server</span><br></code></pre></td></tr></table></figure><h3 id="重启NTP服务：">重启NTP服务：</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart ntpd</span><br></code></pre></td></tr></table></figure><h3 id="查看同步状态：">查看同步状态：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ntpq -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>这样再次重启，时间也不会乱了。</p><hr><p>详细安装信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# yum -y install ntp<br>已加载插件：fastestmirror<br>Determining fastest mirrors<br> * base: ftp.sjtu.edu.cn<br> * extras: mirrors.bfsu.edu.cn<br> * updates: mirrors.bfsu.edu.cn<br>base                                                                                                                                                            | 3.6 kB  00:00:00     <br>extras                                                                                                                                                          | 2.9 kB  00:00:00     <br>updates                                                                                                                                                         | 2.9 kB  00:00:00     <br>updates/7/x86_64/primary_db                                                                                                                                     |  23 MB  00:00:02     <br>软件包 ntp-4.2.6p5-29.el7.centos.2.x86_64 已安装并且是最新版本<br>无须任何处理<br>[root@localhost ~]# systemctl start  ntpd<br>[root@localhost ~]# systemctl enable  ntpd<br>Created symlink from /etc/systemd/system/multi-user.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.<br>[root@localhost ~]# systemctl status ntpd<br>● ntpd.service - Network Time Service<br>   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; enabled; vendor preset: disabled)<br>   Active: active (running) since 一 2023-10-02 09:06:57 CST; 29s ago<br> Main PID: 2705 (ntpd)<br>   CGroup: /system.slice/ntpd.service<br>           └─2705 /usr/sbin/ntpd -u ntp:ntp -g<br><br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen and drop on 1 v6wildcard :: UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 2 lo 127.0.0.1 UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 3 ens33 192.168.175.131 UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 4 lo ::1 UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listen normally on 5 ens33 fe80::62:fd49:3a6c:994c UDP 123<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: Listening on routing socket on fd #22 for interface updates<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: 0.0.0.0 c016 06 restart<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: 0.0.0.0 c012 02 freq_set kernel 0.000 PPM<br>10月 02 09:06:57 localhost.localdomain ntpd[2705]: 0.0.0.0 c011 01 freq_not_set<br>10月 02 09:07:04 localhost.localdomain ntpd[2705]: 0.0.0.0 c614 04 freq_mode<br>[root@localhost ~]# <br>[root@localhost ~]# vi /etc/ntp.conf<br>[root@localhost ~]# grep server /etc/ntp.conf <br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use public servers from the pool.ntp.org project.</span><br>server 0.centos.pool.ntp.org iburst<br>server 1.centos.pool.ntp.org iburst<br>server 2.centos.pool.ntp.org iburst<br>server 3.centos.pool.ntp.org iburst<br>server ntp.aliyun.com iburst<br><span class="hljs-meta prompt_">#</span><span class="language-bash">broadcast 192.168.1.255 autokey        <span class="hljs-comment"># broadcast server</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">broadcast 224.0.1.1 autokey            <span class="hljs-comment"># multicast server</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">manycastserver 239.255.254.254         <span class="hljs-comment"># manycast server</span></span><br>[root@localhost ~]# systemctl restart ntpd<br>[root@localhost ~]# ntpq -p<br>     remote           refid      st t when poll reach   delay   offset  jitter<br>==============================================================================<br>*ntp8.flashdance 194.58.202.20    2 u    1   64    1  350.605   69.011  11.779<br> 111.230.189.174 100.122.36.196   2 u    2   64    1   64.256   38.951   7.296<br> a.chl.la        131.188.3.222    2 u    1   64    1  215.988   15.178  12.127<br> 203.107.6.88    100.107.25.114   2 u    -   64    1   26.506   39.602   7.992<br>[root@localhost ~]# <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安装指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTP</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue安装指南（Windows）</title>
    <link href="/2023/10/01/Vue-install/"/>
    <url>/2023/10/01/Vue-install/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Windows系统下，记录在线安装Vue。</p></blockquote><span id="more"></span><h1>安装 | Vue CLI</h1><p><code>Vue CLI</code>官网地址：<a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a></p><p>在<code>cmd</code>输入以下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cnpm install -g @vue/cli<br></code></pre></td></tr></table></figure><p>稍等片刻，出现以下信息，即安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;cnpm install -g @vue/cli<br>Downloading @vue/cli to C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli_tmp<br>Copying C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli_tmp\.store\@vue+cli@5.0.8\node_modules\@vue\cli to C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli<br>Installing @vue/cli&#x27;s dependencies to C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli/node_modules<br>[1/35] @types/ejs@^3.0.6 installed at node_modules\.store\@types+ejs@3.1.2\node_modules\@types\ejs<br>[2/35] ini@^2.0.0 installed at node_modules\.store\ini@2.0.0\node_modules\ini<br>[3/35] commander@^7.1.0 installed at node_modules\.store\commander@7.2.0\node_modules\commander<br>[4/35] leven@^3.1.0 installed at node_modules\.store\leven@3.1.0\node_modules\leven<br>[5/35] isbinaryfile@^4.0.6 installed at node_modules\.store\isbinaryfile@4.0.10\node_modules\isbinaryfile<br>[6/35] slash@^3.0.0 installed at node_modules\.store\slash@3.0.0\node_modules\slash<br>[7/35] lodash.clonedeep@^4.5.0 installed at node_modules\.store\lodash.clonedeep@4.5.0\node_modules\lodash.clonedeep<br>[8/35] envinfo@^7.7.4 installed at node_modules\.store\envinfo@7.8.1\node_modules\envinfo<br>[9/35] deepmerge@^4.2.2 installed at node_modules\.store\deepmerge@4.3.1\node_modules\deepmerge<br>[10/35] javascript-stringify@^2.0.1 installed at node_modules\.store\javascript-stringify@2.1.0\node_modules\javascript-stringify<br>[11/35] minimist@^1.2.5 installed at node_modules\.store\minimist@1.2.8\node_modules\minimist<br>[12/35] @vue/cli-ui-addon-widgets@^5.0.8 installed at node_modules\.store\@vue+cli-ui-addon-widgets@5.0.8\node_modules\@vue\cli-ui-addon-widgets<br>[13/35] @vue/cli-ui-addon-webpack@^5.0.8 installed at node_modules\.store\@vue+cli-ui-addon-webpack@5.0.8\node_modules\@vue\cli-ui-addon-webpack<br>[14/35] strip-ansi@^6.0.0 installed at node_modules\.store\strip-ansi@6.0.1\node_modules\strip-ansi<br>[15/35] debug@^4.1.0 installed at node_modules\.store\debug@4.3.4\node_modules\debug<br>[16/35] lru-cache@^6.0.0 installed at node_modules\.store\lru-cache@6.0.0\node_modules\lru-cache<br>[17/35] validate-npm-package-name@^3.0.0 installed at node_modules\.store\validate-npm-package-name@3.0.0\node_modules\validate-npm-package-name<br>[18/35] import-global@^0.1.0 installed at node_modules\.store\import-global@0.1.0\node_modules\import-global<br>[19/35] shortid@^2.2.15 installed at node_modules\.store\shortid@2.2.16\node_modules\shortid<br>[20/35] fs-extra@^9.1.0 installed at node_modules\.store\fs-extra@9.1.0\node_modules\fs-extra<br>[21/35] js-yaml@^4.0.0 installed at node_modules\.store\js-yaml@4.1.0\node_modules\js-yaml<br>[22/35] boxen@^5.0.0 installed at node_modules\.store\boxen@5.1.2\node_modules\boxen<br>[23/35] pkg-dir@^5.0.0 installed at node_modules\.store\pkg-dir@5.0.0\node_modules\pkg-dir<br>[24/35] recast@^0.20.3 installed at node_modules\.store\recast@0.20.5\node_modules\recast<br>[25/35] yaml-front-matter@^4.1.0 installed at node_modules\.store\yaml-front-matter@4.1.1\node_modules\yaml-front-matter<br>[26/35] @vue/cli-shared-utils@^5.0.8 installed at node_modules\.store\@vue+cli-shared-utils@5.0.8\node_modules\@vue\cli-shared-utils<br>[27/35] resolve@^1.20.0 installed at node_modules\.store\resolve@1.22.2\node_modules\resolve<br>[28/35] globby@^11.0.2 installed at node_modules\.store\globby@11.1.0\node_modules\globby<br>[29/35] download-git-repo@^3.0.2 installed at node_modules\.store\download-git-repo@3.0.2\node_modules\download-git-repo<br>[30/35] ejs@^3.1.6 installed at node_modules\.store\ejs@3.1.9\node_modules\ejs<br>[31/35] vue@^2.6.14 installed at node_modules\.store\vue@2.7.14\node_modules\vue<br>[32/35] @vue/cli-ui@^5.0.8 installed at node_modules\.store\@vue+cli-ui@5.0.8\node_modules\@vue\cli-ui<br>[33/35] @types/inquirer@^8.1.3 installed at node_modules\.store\@types+inquirer@8.2.6\node_modules\@types\inquirer<br>[34/35] inquirer@^8.0.0 installed at node_modules\.store\inquirer@8.2.5\node_modules\inquirer<br>[35/35] vue-codemod@^0.0.5 installed at node_modules\.store\vue-codemod@0.0.5\node_modules\vue-codemod<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@^0.5.0 See https://github.com/lydell/source-map-resolve#deprecated<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@0.5.3 › source-map-url@^0.4.0 See https://github.com/lydell/source-map-url#deprecated<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@0.5.3 › urix@^0.1.0 Please see https://github.com/lydell/urix#deprecated<br>deprecate vue-codemod@0.0.5 › jscodeshift@0.11.0 › micromatch@3.1.10 › snapdragon@0.8.2 › source-map-resolve@0.5.3 › resolve-url@^0.2.1 https://github.com/lydell/resolve-url#deprecated<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@^3.9.0 The `apollo-server-express` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>anti semver @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › @types/express@4.17.14 › @types/express-serve-static-core@^4.17.18 delcares @types/express-serve-static-core@^4.17.18(resolved as 4.17.35) but using ancestor(apollo-server-express)&#x27;s dependency @types/express-serve-static-core@4.17.31(resolved as 4.17.31)<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-types@^3.8.0 The `apollo-server-types` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › subscriptions-transport-ws@^0.11.0 The `subscriptions-transport-ws` package is no longer maintained. We recommend you use `graphql-ws` instead. For help migrating Apollo software to `graphql-ws`, see https://www.apollographql.com/docs/apollo-server/data/subscriptions/#switching-from-subscriptions-transport-ws    For general help using `graphql-ws`, see https://github.com/enisdenjo/graphql-ws/blob/master/README.md<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-types@3.8.0 › apollo-reporting-protobuf@^3.4.0 The `apollo-reporting-protobuf` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/usage-reporting-protobuf` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-types@3.8.0 › apollo-server-env@^4.2.1 The `apollo-server-env` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/utils.fetcher` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@^3.12.0 The `apollo-server-core` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@3.12.0 › apollo-server-errors@^3.3.1 The `apollo-server-errors` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@3.12.0 › apollo-datasource@^3.3.2 The `apollo-datasource` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>deprecate @vue/cli-ui@5.0.8 › apollo-server-express@3.12.0 › apollo-server-core@3.12.0 › apollo-server-plugin-base@^3.7.2 The `apollo-server-plugin-base` package is part of Apollo Server v2 and v3, which are now deprecated (end-of-life October 22nd 2023). This package&#x27;s functionality is now found in the `@apollo/server` package. See https://www.apollographql.com/docs/apollo-server/previous-versions/ for more details.<br>Recently updated (since 2023-05-20): 47 packages (detail see file C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli\node_modules\.recently_updates.txt)<br>  Today:<br>    → vue-codemod@0.0.5 › @babel/preset-env@^7.10.3(7.22.2) (01:52:00)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-private-methods@^7.22.0(7.22.3) (18:11:00)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-dynamic-import@^7.22.1(7.22.1) (00:34:50)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-logical-assignment-operators@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-unicode-sets-regex@^7.22.0(7.22.3) (18:11:03)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-new-target@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-unicode-property-regex@^7.22.0(7.22.3) (18:11:01)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-syntax-import-attributes@^7.22.0(7.22.3) (18:10:53)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-named-capturing-groups-regex@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-json-strings@^7.22.0(7.22.3) (18:10:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-class-properties@^7.22.0(7.22.3) (18:10:54)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-export-namespace-from@^7.22.0(7.22.3) (18:10:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-nullish-coalescing-operator@^7.22.0(7.22.3) (18:10:57)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-optional-catch-binding@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-numeric-separator@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-modules-systemjs@^7.22.0(7.22.3) (18:10:56)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-class-static-block@^7.22.0(7.22.3) (18:10:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-private-property-in-object@^7.22.0(7.22.3) (18:11:00)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-async-generator-functions@^7.22.0(7.22.3) (18:10:54)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-rest-spread@^7.22.0(7.22.3) (18:11:09)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining@^7.22.0(7.22.3) (18:11:08)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › babel-plugin-polyfill-corejs2@^0.4.2(0.4.3) (02:07:04)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-optional-chaining@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-parameters@^7.22.0(7.22.3) (18:10:58)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/compat-data@^7.22.0(7.22.3) (18:10:50)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@^7.22.1(7.22.1) (00:34:49)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-super@7.18.6 › @babel/helper-replace-supers@^7.18.6(7.22.1) (00:34:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-async-generator-functions@7.22.3 › @babel/helper-environment-visitor@^7.22.1(7.22.1) (00:34:49)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-unicode-regex@7.18.6 › @babel/helper-create-regexp-features-plugin@^7.18.6(7.22.1) (00:34:49)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-exponentiation-operator@7.18.6 › @babel/helper-builder-binary-assignment-operator-visitor@^7.18.6(7.22.3) (18:11:07)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-modules-umd@7.18.6 › @babel/helper-module-transforms@^7.18.6(7.22.1) (00:34:55)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-private-methods@7.22.3 › @babel/helper-create-class-features-plugin@^7.22.1(7.22.1) (00:34:57)<br>    → vue-codemod@0.0.5 › jscodeshift@0.11.0 › @babel/preset-typescript@7.21.5 › @babel/plugin-transform-typescript@^7.21.3(7.22.3) (18:11:01)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-super@7.18.6 › @babel/helper-replace-supers@7.22.1 › @babel/helper-member-expression-to-functions@^7.22.0(7.22.3) (18:11:08)<br>    → vue-codemod@0.0.5 › @babel/core@^7.10.3(7.22.1) (00:34:57)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@7.22.1 › browserslist@4.21.5 › electron-to-chromium@^1.4.284(1.4.411) (10:02:21)<br>    → @types/inquirer@8.2.6 › @types/through@0.0.30 › @types/node@*(20.2.5) (04:33:01)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-object-super@7.18.6 › @babel/helper-replace-supers@7.22.1 › @babel/traverse@^7.22.1(7.22.1) (00:34:54)<br>    → vue-codemod@0.0.5 › @vue/compiler-core@3.3.4 › @babel/parser@^7.21.3(7.22.3) (18:10:51)<br>    → vue-codemod@0.0.5 › @babel/core@7.22.1 › @babel/generator@^7.22.0(7.22.3) (18:11:08)<br>    → vue-codemod@0.0.5 › @babel/types@^7.12.12(7.22.3) (18:11:04)<br>    → vue-codemod@0.0.5 › @babel/core@7.22.1 › @babel/helpers@^7.22.0(7.22.3) (18:11:07)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-regenerator@7.21.5 › regenerator-transform@0.15.1 › @babel/runtime@^7.8.4(7.22.3) (18:11:03)<br>  2023-05-26<br>    → vue-codemod@0.0.5 › jscodeshift@0.11.0 › flow-parser@0.*(0.207.0) (11:19:57)<br>  2023-05-24<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@7.22.1 › browserslist@4.21.5 › node-releases@^2.0.8(2.0.12) (10:05:03)<br>  2023-05-22<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/plugin-transform-computed-properties@7.21.5 › @babel/template@^7.20.7(7.21.9) (18:02:21)<br>    → vue-codemod@0.0.5 › @babel/preset-env@7.22.2 › @babel/helper-compilation-targets@7.22.1 › browserslist@4.21.5 › caniuse-lite@^1.0.30001449(1.0.30001489) (17:47:42)<br>Run 2 script(s) in 4s.<br>All packages installed (778 packages installed from npm registry, used 1m(network 1m), speed 557.5KB/s, json 680(8.43MB), tarball 33.89MB, manifests cache hit 0, etag hit 0 / miss 0)<br>[@vue/cli@5.0.8] link C:\Users\user\AppData\Roaming\npm\vue@ -&gt; C:\Users\user\AppData\Roaming\npm\node_modules\@vue\cli\bin\vue.js<br><br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure><p>验证安装，在<code>cmd</code>输入<code>vue</code>，出现以下信息即安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;vue<br>Usage: vue &lt;command&gt; [options]<br><br>Options:<br>  -V, --version                              output the version number<br>  -h, --help                                 display help for command<br><br>Commands:<br>  create [options] &lt;app-name&gt;                create a new project powered by vue-cli-service<br>  add [options] &lt;plugin&gt; [pluginOptions]     install a plugin and invoke its generator in an already created project<br>  invoke [options] &lt;plugin&gt; [pluginOptions]  invoke the generator of a plugin in an already created project<br>  inspect [options] [paths...]               inspect the webpack config in a project with vue-cli-service<br>  serve                                      alias of &quot;npm run serve&quot; in the current project<br>  build                                      alias of &quot;npm run build&quot; in the current project<br>  ui [options]                               start and open the vue-cli ui<br>  init [options] &lt;template&gt; &lt;app-name&gt;       generate a project from a remote template (legacy API, requires<br>                                             @vue/cli-init)<br>  config [options] [value]                   inspect and modify the config<br>  outdated [options]                         (experimental) check for outdated vue cli service / plugins<br>  upgrade [options] [plugin-name]            (experimental) upgrade vue cli service / plugins<br>  migrate [options] [plugin-name]            (experimental) run migrator for an already-installed cli plugin<br>  info                                       print debugging information about your environment<br>  help [command]                             display help for command<br><br>  Run vue &lt;command&gt; --help for detailed usage of given command.<br><br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure><p>当然还可以查看下版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;vue --version<br>@vue/cli 5.0.8<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安装指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优化C++控制台输出字体颜色方法</title>
    <link href="/2023/10/01/C++ConsoleTextColor/"/>
    <url>/2023/10/01/C++ConsoleTextColor/</url>
    
    <content type="html"><![CDATA[<blockquote><p>C++的系统调用输出颜色的方法参数很冗长，而且没有中文注释，很不方便，所以进行了优化处理，各位可以直接复制保存使用。</p></blockquote><span id="more"></span><h1>优化C++控制台输出字体颜色方法</h1><blockquote><p>所用工具为：Microsoft Virtual Studio</p></blockquote><h2 id="原版">原版</h2><h3 id="字体颜色：">字体颜色：</h3><p>使用方法：先包含windows头文件<code>Windows.h</code></p><p>必须在方法体内：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//调用此方法设置参数</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_RED);<br><span class="hljs-comment">//颜色参数之间用|分隔</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">文本颜色</th><th style="text-align:center">参数</th></tr></thead><tbody><tr><td style="text-align:center">红色</td><td style="text-align:center">FOREGROUND_RED</td></tr><tr><td style="text-align:center">绿色</td><td style="text-align:center">FOREGROUND_GREEN</td></tr><tr><td style="text-align:center">蓝色</td><td style="text-align:center">FOREGROUND_BLUE</td></tr><tr><td style="text-align:center">白色</td><td style="text-align:center">FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED</td></tr><tr><td style="text-align:center">天蓝色</td><td style="text-align:center">FOREGROUND_BLUE | FOREGROUND_GREEN</td></tr><tr><td style="text-align:center">黄色</td><td style="text-align:center">FOREGROUND_GREEN | FOREGROUND_RED</td></tr><tr><td style="text-align:center">粉色</td><td style="text-align:center">FOREGROUND_RED | FOREGROUND_BLUE</td></tr><tr><td style="text-align:center">颜色增强</td><td style="text-align:center">FOREGROUND_INTENSITY</td></tr></tbody></table><h3 id="字体背景颜色：">字体背景颜色：</h3><p>使用方法同字体颜色，主要是参数不一样</p><p>使用方法：先包含windows头文件<code>Windows.h</code></p><p>必须在方法体内：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//调用此方法设置参数</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_RED);<br><span class="hljs-comment">//颜色参数之间用|分隔</span><br><span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br></code></pre></td></tr></table></figure><p>注：相关参数源码是用宏定义的，不可修改</p><table><thead><tr><th style="text-align:center">背景颜色</th><th style="text-align:center">参数</th></tr></thead><tbody><tr><td style="text-align:center">红色</td><td style="text-align:center">BACKGROUND_RED</td></tr><tr><td style="text-align:center">绿色</td><td style="text-align:center">BACKGROUND_GREEN</td></tr><tr><td style="text-align:center">蓝色</td><td style="text-align:center">BACKGROUND_BLUE</td></tr><tr><td style="text-align:center">白色</td><td style="text-align:center">BACKGROUND_BLUE | BACKGROUND_GREEN |BACKGROUND_RED</td></tr><tr><td style="text-align:center">天蓝色</td><td style="text-align:center">BACKGROUND_BLUE | BACKGROUND_GREEN</td></tr><tr><td style="text-align:center">黄色</td><td style="text-align:center">BACKGROUND_GREEN | BACKGROUND_RED</td></tr><tr><td style="text-align:center">粉色</td><td style="text-align:center">BACKGROUND_RED | BACKGROUND_BLUE</td></tr><tr><td style="text-align:center">颜色增强</td><td style="text-align:center">BACKGROUND_INTENSITY</td></tr></tbody></table><p>注：</p><ul><li>相关参数源码是用宏定义的，不可修改。</li><li>颜色为三基色，且不可与非颜色增强的混合搭配，即要么都增强，要么都不增强</li><li>设置后，后面的就全是这个颜色了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Attributes flags:</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_BLUE      0x0001 <span class="hljs-comment">// text color contains blue.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_GREEN     0x0002 <span class="hljs-comment">// text color contains green.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_RED       0x0004 <span class="hljs-comment">// text color contains red.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FOREGROUND_INTENSITY 0x0008 <span class="hljs-comment">// text color is intensified.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_BLUE      0x0010 <span class="hljs-comment">// background color contains blue.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_GREEN     0x0020 <span class="hljs-comment">// background color contains green.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_RED       0x0040 <span class="hljs-comment">// background color contains red.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BACKGROUND_INTENSITY 0x0080 <span class="hljs-comment">// background color is intensified.</span></span><br></code></pre></td></tr></table></figure><h2 id="简化版">简化版</h2><p>由于方法参数很长，不便使用，因此进行了简化。</p><p>使用方法：</p><ul><li>只需要创建个头文件，名称自定义，例如<code>printcolor</code>，然后复制下面的代码粘贴。</li><li>在源文件内包含此头文件<code>printcolor.h</code>，然后打印输出前调用方法<code>setTextColor()</code>设置字体颜色，调用方法<code>setTextBackgroundColor()</code>设置字体背景颜色，传入相应的<code>string</code>类型的英文颜色字符串即可。</li></ul><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once<span class="hljs-comment">//防止头文件重复包含</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：</span><br><span class="hljs-comment">        设置后，在此之后输出的都将是设置的颜色。</span><br><span class="hljs-comment">        若再想恢复默认颜色，可通过不传参数执行此方法恢复默认颜色。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    设置字体颜色：</span><br><span class="hljs-comment">        方法支持15种颜色（请传入相应的英文参数）：</span><br><span class="hljs-comment">            0、浅白色：littlewhite</span><br><span class="hljs-comment">            1、红色：red      2、绿色：green     3、蓝色：blue</span><br><span class="hljs-comment">            4、白色: white    5、天蓝色：skyblue   6、黄色：yellow</span><br><span class="hljs-comment">            7、粉色: pink</span><br><span class="hljs-comment">            11、亮红色：lightred      12、亮绿色：lightgreen     13、亮蓝色：lightblue</span><br><span class="hljs-comment">            14、亮白色: lightwhite    15、亮天蓝色：lightskyblue   16、亮黄色：lightyellow</span><br><span class="hljs-comment">            17、亮粉色: lightpink</span><br><span class="hljs-comment">            其它参数或不传参数：默认色(白色)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTextColor</span><span class="hljs-params">(string color = <span class="hljs-string">&quot;white&quot;</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//设置Windows控制台打印颜色</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;littlewhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;red&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;green&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;blue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;white&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;skyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;yellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">6</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;pink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">7</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightred&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">11</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightgreen&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">12</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">13</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightwhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">14</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightskyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">15</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightyellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightpink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">17</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (num)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//浅白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-comment">//白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-comment">//天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-comment">//黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-comment">//粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<span class="hljs-comment">//增强红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<span class="hljs-comment">//增强绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<span class="hljs-comment">//增强蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<span class="hljs-comment">//增强白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<span class="hljs-comment">//增强天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<span class="hljs-comment">//增强黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<span class="hljs-comment">//增强粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<span class="hljs-comment">//默认</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    设置字体背景色：</span><br><span class="hljs-comment">        方法支持15种颜色（请传入相应的英文参数）：</span><br><span class="hljs-comment">            0、浅白色：littlewhite</span><br><span class="hljs-comment">            1、红色：red      2、绿色：green     3、蓝色：blue</span><br><span class="hljs-comment">            4、白色: white    5、天蓝色：skyblue   6、黄色：yellow</span><br><span class="hljs-comment">            7、粉色: pink</span><br><span class="hljs-comment">            11、亮红色：lightred      12、亮绿色：lightgreen     13、亮蓝色：lightblue</span><br><span class="hljs-comment">            14、亮白色: lightwhite    15、亮天蓝色：lightskyblue   16、亮黄色：lightyellow</span><br><span class="hljs-comment">            17、亮粉色: lightpink</span><br><span class="hljs-comment">    注意：背景色一旦设置，就恢复不了原来的黑色字体背景了，除非不设置背景色</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTextBackgroundColor</span><span class="hljs-params">(string color = <span class="hljs-string">&quot;white&quot;</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//设置Windows控制台打印颜色</span><br>    <span class="hljs-type">int</span> num = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;littlewhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;red&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;green&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;blue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;white&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;skyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;yellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">6</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;pink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">7</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightred&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">11</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightgreen&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">12</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">13</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightwhite&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">14</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightskyblue&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">15</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightyellow&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-string">&quot;lightpink&quot;</span>)<br>    &#123;<br>        num = <span class="hljs-number">17</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        num = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (num)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//浅白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-comment">//红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-comment">//绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-comment">//蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-comment">//白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-comment">//天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-comment">//黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-comment">//粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<span class="hljs-comment">//增强红色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<span class="hljs-comment">//增强绿色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<span class="hljs-comment">//增强蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">14</span>:<span class="hljs-comment">//增强白色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">15</span>:<span class="hljs-comment">//增强天蓝色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_GREEN);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<span class="hljs-comment">//增强黄色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">17</span>:<span class="hljs-comment">//增强粉色</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<span class="hljs-comment">//默认</span><br>        <span class="hljs-built_in">SetConsoleTextAttribute</span>(<span class="hljs-built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：源文件demo.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;printcolor.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;red&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;红色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;green&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;绿色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;white&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;白色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;skyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;天蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;yellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;黄色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;pink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;粉色字体：***************&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightred&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮红色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightgreen&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮绿色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightwhite&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮白色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightskyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮天蓝色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightyellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮黄色字体：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextColor</span>(<span class="hljs-string">&quot;lightpink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;亮粉色字体：***************&quot;</span> &lt;&lt; endl;<br><br><br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;red&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体红色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;green&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体绿色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;blue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;white&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体白色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;skyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体天蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;yellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体黄色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;pink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体粉色背景：***************&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightred&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮红色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightgreen&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮绿色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightwhite&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮白色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightskyblue&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮天蓝色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightyellow&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮黄色背景：***************&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">setTextBackgroundColor</span>(<span class="hljs-string">&quot;lightpink&quot;</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;字体亮粉色背景：***************&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">test</span>();<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CNPM安装指南（Windows）</title>
    <link href="/2023/10/01/Cnpm-install/"/>
    <url>/2023/10/01/Cnpm-install/</url>
    
    <content type="html"><![CDATA[<blockquote><p>npm在国内使用总会出现些问题，例如下载速度慢，连接失败等；所以今天分享在Windows系统下安装在国内的CNPM。</p></blockquote><span id="more"></span><h2 id="CNPM安装教程（Windows系统版）">CNPM安装教程（Windows系统版）</h2><p>**CNPM淘宝镜像官网：**<a href="https://npmmirror.com/">https://npmmirror.com/</a></p><h3 id="1、打开CNPM淘宝镜像官网">1、打开CNPM淘宝镜像官网</h3><p>有很多信息：</p><ul><li>当前 <a href="https://npmmirror.com/">npmmirror.com</a> 运行版本是: cnpmcore@3.20.3</li><li>本系统运行在 <a href="https://nodejs.org?spm=a2c6h.24755359.0.0.6d446e513fj62f">Node.js</a>@v18.16.0 上</li><li>开源镜像: <a href="https://npmmirror.com/mirrors/">https://npmmirror.com/mirrors/</a></li><li>Node.js 镜像: <a href="https://npmmirror.com/mirrors/node/">https://npmmirror.com/mirrors/node/</a></li><li>alinode 镜像: <a href="https://npmmirror.com/mirrors/alinode/">https://npmmirror.com/mirrors/alinode/</a></li><li>ChromeDriver 镜像: <a href="https://npmmirror.com/mirrors/chromedriver/">https://npmmirror.com/mirrors/chromedriver/</a></li><li>OperaDriver 镜像: <a href="https://npmmirror.com/mirrors/operadriver/">https://npmmirror.com/mirrors/operadriver/</a></li><li>Selenium 镜像: <a href="https://npmmirror.com/mirrors/selenium/">https://npmmirror.com/mirrors/selenium/</a></li><li>electron 镜像: <a href="https://npmmirror.com/mirrors/electron/">https://npmmirror.com/mirrors/electron/</a></li></ul><p>注意：主要查看–&gt;<strong>本系统运行在 <a href="https://nodejs.org?spm=a2c6h.24755359.0.0.6d446e513fj62f">Node.js</a>@v18.16.0 上</strong></p><p><strong>这里不同时间会有所不同，具体以你当前打开的官网这里写的为准，一定要匹配，不然后期安装CNMP会出现一堆错误。例如什么操作被系统拒绝，需要权限允许等等，网上的方法我都试过，什么删除npmrc文件，更改文件权限之类的，都没用…</strong></p><h3 id="2、打开Node-js官网">2、打开Node.js官网</h3><p><strong>Node,js中文官网地址</strong>：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></p><p>选择CNPM支持的版本下载（我现在是v18.16.0），下载会有些慢，请耐心等待，然后安装。</p><p>安装就没什么特别的，就安装路径根据需要改一下，其他的都默认。</p><p>安装成功后，打开cmd命令提示符，输入<code>npm</code>，会出现以下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;npm<br>npm &lt;command&gt;<br><br>Usage:<br><br>npm install        install all the dependencies in your project<br>npm install &lt;foo&gt;  add the &lt;foo&gt; dependency to your project<br>npm test           run this project&#x27;s tests<br>npm run &lt;foo&gt;      run the script named &lt;foo&gt;<br>npm &lt;command&gt; -h   quick help on &lt;command&gt;<br>npm -l             display usage info for all commands<br>npm help &lt;term&gt;    search for help on &lt;term&gt; (in a browser)<br>npm help npm       more involved overview (in a browser)<br><br>All commands:<br><br>    access, adduser, audit, bugs, cache, ci, completion,<br>    config, dedupe, deprecate, diff, dist-tag, docs, doctor,<br>    edit, exec, explain, explore, find-dupes, fund, get, help,<br>    hook, init, install, install-ci-test, install-test, link,<br>    ll, login, logout, ls, org, outdated, owner, pack, ping,<br>    pkg, prefix, profile, prune, publish, query, rebuild, repo,<br>    restart, root, run-script, search, set, shrinkwrap, star,<br>    stars, start, stop, team, test, token, uninstall, unpublish,<br>    unstar, update, version, view, whoami<br><br>Specify configs in the ini-formatted file:<br>    C:\Users\user\.npmrc<br>or on the command line via: npm &lt;command&gt; --key=value<br><br>More configuration info: npm help config<br>Configuration fields: npm help 7 config<br><br>npm@9.5.1 D:\nodejs\node_modules\npm<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure><p>证明已安装成功。</p><h3 id="3、安装CNPM">3、安装CNPM</h3><p>CNPM淘宝镜像官网有详细说明：</p><p>在<code>cmd</code>输入以下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><p>稍等片刻，成功后出现如下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;npm install -g cnpm --registry=https://registry.npmmirror.com<br>npm WARN deprecated @npmcli/move-file@2.0.1: This functionality has been moved to @npmcli/fs<br><br>added 470 packages in 42s<br><br>27 packages are looking for funding<br>  run `npm fund` for details<br>npm notice<br>npm notice New minor version of npm available! 9.5.1 -&gt; 9.6.7<br>npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.6.7<br>npm notice Run npm install -g npm@9.6.7 to update!<br>npm notice<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure><p>在<code>cmd</code>输入<code>cnpm</code>已验证可用性，成功则出现以下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\user&gt;cnpm<br>Usage: cnpm [option] &lt;command&gt;<br>Help: http://cnpmjs.org/help/cnpm<br><br>  Extend command<br>    web                            open cnpm web (ex.: cnpm web)<br>    check [ingoreupdate]           check project dependencies, add ignoreupdate will not check modules&#x27; latest version(ex.: cnpm check, cnpm check -i)<br>    doc [moduleName]               open document page (ex.: cnpm doc egg)<br>    sync [moduleName]              sync module from source npm (ex.: cnpm sync egg)<br>    user [username]                open user profile page (ex.: cnpm user fengmk2)<br><br>  npm command use --registry=https://registry.npmmirror.com<br>    where &lt;command&gt; is one of:<br>    add-user, adduser, apihelp, author, bin, bugs, c, cache,<br>    completion, config, ddp, dedupe, deprecate, docs, edit,<br>    explore, faq, find, find-dupes, get, help, help-search,<br>    home, i, info, init, install, isntall, la, link, list, ll,<br>    ln, login, ls, outdated, owner, pack, prefix, prune,<br>    publish, r, rb, rebuild, remove, restart, rm, root,<br>    run-script, s, se, search, set, show, shrinkwrap, star,<br>    start, stop, submodule, tag, test, tst, un, uninstall,<br>    unlink, unpublish, unstar, up, update, v, version, view,<br>    whoami<br>      npm &lt;cmd&gt; -h     quick help on &lt;cmd&gt;<br>      npm -l           display full usage info<br>      npm faq          commonly asked questions<br>      npm help &lt;term&gt;  search for help on &lt;term&gt;<br>      npm help npm     involved overview<br><br>      Specify configs in the ini-formatted file:<br>          C:\Users\user\.cnpmrc<br>      or on the command line via: npm &lt;command&gt; --key value<br>      Config info can be viewed via: npm help config<br><br>C:\Users\user&gt;<br></code></pre></td></tr></table></figure><p>OK，到此CNPM就安装完成了，去开启你的奇妙之旅吧！</p>]]></content>
    
    
    <categories>
      
      <category>安装指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CNPM</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英语语法综述</title>
    <link href="/2023/09/30/EnglishGrammar/"/>
    <url>/2023/09/30/EnglishGrammar/</url>
    
    <content type="html"><![CDATA[<blockquote><p>英语语法学习笔记，包括谓语动词、非谓语动词、句子成分、词类和时态等。</p></blockquote><span id="more"></span><p>注：本文为学习笔记，视频学习地址为：<a href="https://www.bilibili.com/video/BV1XY411J7aG/">英语语法精讲合集 (全面, 通俗, 有趣 | 从零打造系统语法体系)</a>，更多英语学习视频请关注B站UP主：<a href="https://space.bilibili.com/483162496">英语兔</a></p><h1>英语语法综述</h1><p>当句子拆分到不能拆的时候，大都是以下此类句型：</p><p>主语(人/物) + 谓语(动作/发生了什么事)</p><p>此刻的动作是广义的动作，即动词</p><h2 id="一、谓语动词">一、谓语动词</h2><h3 id="1、可以独立完成的动作（不及物动词）">1、可以独立完成的动作（不及物动词）</h3><p>例如：<code>Papa Rabbit sleeps.</code> (译文：兔老爹睡觉。)</p><p>动词<code>sleep</code> 没有承受者，是不及物动词。</p><h6 id="对应句型：主语-动词">对应句型：<code>主语+动词</code></h6><h3 id="2、有1个动作的承受者（单及物动词）">2、有<code>1</code>个动作的承受者（单及物动词）</h3><p>例如：<code>Papa Rabbit like you.</code> (译文：兔老爹喜欢你。)</p><p>动词<code>like</code> 为及物动词，若只是<code>Papa Rabbit like</code> 兔老爹喜欢，喜欢什么呢，我们会觉得意思不完整，或者没有意义。而此例句的动作承受着<code>you</code>就是宾语。</p><h6 id="对应句型：主语-单及物动词-宾语">对应句型：<code>主语+单及物动词+宾语</code></h6><h3 id="3、有2个动作的承受者（双及物动词）">3、有<code>2</code>个动作的承受者（双及物动词）</h3><p>例如：<code>Papa Rabbit teaches you English.</code> (译文：兔老爹教你英语。)</p><p>此句有两个承受者，其中，核心词为<code>teach </code>教，教的知识是<code>English</code>英语，知识的接受对象是<code>you </code>你。动词的这两个承受者被称为直接宾语和间接宾语。若只是<code>Papa Rabbit teaches English</code> 兔老爹教英语，句意已经完整了，而<code>Papa Rabbit teaches you</code> 兔老爹教你，则不完整，仍需补充，所以<code>English</code>为直接宾语，<code>you</code>为间接宾语。</p><h6 id="对应句型：主语-双及物动词-间接宾语-直接宾语">对应句型：<code>主语+双及物动词+间接宾语+直接宾语</code></h6><h3 id="4、只有1个动作的承受者但需补充说明（复杂及物动词）">4、只有<code>1</code>个动作的承受者但需补充说明（复杂及物动词）</h3><p>例如：<code>Papa Rabbit considers you smart.</code> (译文：兔老爹认为你聪明。)</p><p><code>you</code>为动作承受者，是宾语。而<code>smart</code>为形容词，并不能是动作承受者，在英语中，宾语只包含名词和代词。但只是认为你，意义不完整，需要补充，而<code>smart</code>在这里充当补语，用来说明认为的状态。这种需要补语的动词被称为复杂及物动词。</p><h6 id="对应句型：主语-复杂及物动词-宾语-宾语-补语">对应句型：<code>主语+复杂及物动词+宾语+(宾语)补语</code></h6><h3 id="5、非动作（系动词）">5、非动作（系动词）</h3><p>例如：<code>Papa Rabbit is tall.</code> (译文：兔老爹很高。)</p><p><code>is</code> 通常翻译成 ” 是 “，在这里只是把<code>tall</code>(高的)这个信息赋予<code>Papa Rabbit</code>，大白话就是把两者连系起来，所以这类词被称为连系动词。系动词后的补充信息就是补语，更精确说是主语补语，主语补语又称为表语。</p><h6 id="对应句型：主语-系动词-主语-补语-表语">对应句型：<code>主语+系动词+(主语)补语/表语</code></h6><h2 id="二、句子成分">二、句子成分</h2><p>以上已经提到了5种句子成分：</p><ol><li>主语</li><li>谓语动词</li><li>宾语</li><li>宾语补语</li><li>主语补语</li></ol><p>6、定语（主要用来主语和宾语）</p><p>例如：<code>The little white rabbit ate a large carrot.</code>译文：这只小白兔吃了一根大胡萝卜。</p><p>其中，<code>The little white</code> 就是主语<code>rabbit</code>的定语，而<code>a large</code>就是宾语<code>carrot</code>的定语</p><p>7、状语（主要用来修饰谓语动词）</p><p>例如：<code>The rabbit ate quickly.</code>译文：兔子快速地吃。</p><p><code>quickly</code>就是<code>ate</code>的状语</p><p>8、同位语（主要是把主语或宾语换个说法再说一遍）</p><p><code>Papa Rabbit，an English teacher，eats carrots.</code>译文：兔老爹，一个英语老师，吃胡萝卜。</p><p><code>an English teacher</code>就是把<code>Papa Rabbit</code>换个方式说了一遍，与主语同等地位。</p><h2 id="三、简单句">三、简单句</h2><p>以上皆为简单句，而简单句的简单相加就变成了复合句，而简单句的嵌套就组成了复杂句。</p><p>一个句子套一个句子——&gt;主句+从句(嵌套的句子)，而从句本质上就是修改简单句成为另一个句子的句子成分。</p><p>名词性从句：</p><ul><li>简单句作主语–&gt;主语从句</li><li>简单句作宾语–&gt;宾语从句</li><li>简单句作表语–&gt;表语从句</li><li>简单句作同位语–&gt;同位语从句</li></ul><p>简单句作定语–&gt;定语从句</p><p>简单句作状语–&gt;状语从句</p><h2 id="四、词类（充当句子成分）">四、词类（充当句子成分）</h2><ol><li>动词（表示动作行为）</li><li>名词（表示人和物）</li><li>冠词（说明人和物）<code>a</code>、<code>an</code>和<code>the</code></li><li>代词（替代人和物）<code>he</code>、<code>she</code>、<code>I</code>、<code>they</code>、<code>it</code>等等</li><li>形容词（形容人和物）</li><li>数词（表数量）</li><li>副词（修饰动词或形容词）</li><li>介词（表示和其他词关系的词）</li><li>叹词（表感叹）</li><li>连词（连接词和句）<code>and</code>、<code>because</code>等等</li></ol><h2 id="五、时态">五、时态</h2><p>谓语动词的”三大本领“：</p><ol><li>动作时间（过去、现在、将来和过去将来）</li><li>动作状态（一般，进行、完成和完成进行）</li><li>动作假设，情感…（语气）</li></ol><p>时态 == 动作时间 + 动作状态</p><p>谓语动词本身并不能直接把其本领表示出来，需要借助助动词来完成。</p><h2 id="六、助动词">六、助动词</h2><p>例如<code>eat</code>吃：</p><ul><li>(协助)表示 ”吃过了“（完成）–&gt; <code>have</code> --&gt; <code>have eaten</code></li><li>(协助)表示 ”正在吃“（进行）–&gt; <code>be</code> --&gt; <code>is eating</code></li><li>(协助)表示 ”被吃“–&gt; <code>be</code> --&gt; <code>is eaten</code></li><li>(协助)表示 ”有能力吃“–&gt; <code>can</code>–&gt; <code>can eat</code></li><li>(协助)表示 ”有可能吃“ --&gt; <code>might</code>–&gt; <code>might eat</code></li><li>(协助)表示 ”有义务吃“–&gt; <code>must</code>–&gt; <code>must eat</code></li><li>(协助)表示 ”不吃“（否定）–&gt; <code>do</code> --&gt; <code>do not eat</code></li></ul><p>这些词做助动词时，没有实际意义，只是帮助作用。</p><p>但是这些词本身作为实义动词还是有具体意义的，甚至具有其它词性：</p><p><code>can</code>可以是 ”易拉罐“、<code>be</code>可以是 “存在”、<code>might</code>可以是 ”力量“、<code>musty</code>可以是发霉的、<code>do</code>可以是 ”做某事“、<code>have</code>可以是拥有等等…</p><h2 id="七、非谓语动词">七、非谓语动词</h2><p>几乎可以取代所有从句，从而简化句子，但此类动词丧失了表示<strong>动作时间</strong>，<strong>状态</strong>，<strong>语态语气</strong>的功能，即没有时态的变化。</p><p>有以下四种：</p><ul><li>动词不定式（形式为 to do）</li><li>现在分词（形式为 动词+ing）</li><li>动名词（形式为 动词+ing）</li><li>过去分词（形式为 动词+ed）</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交换排序之快速排序（Quick Sort）</title>
    <link href="/2023/09/29/QuickSort/"/>
    <url>/2023/09/29/QuickSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>快速排序的介绍，包括快速排序的特点、原理和完整代码实现。</p></blockquote><span id="more"></span><h1>快速排序</h1><p>快速排序是对冒泡排序算法的一种改进。</p><h2 id="1、过程">1、过程</h2><p>设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它左边，所有比它大的数都放到它右边，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会在算法结束时产生变动。</p><h2 id="2、特点">2、特点</h2><ul><li>记录非顺次的移动导致排序方法是不稳定的</li><li>排序过程中需要定位表的下界和上界，所以适合用于顺序结构，很难用于链式结构</li><li>当n较大时，在平均情况下快速排序是所有内部排序算法中速度最快的一种，所以其适合初始记录无序、n较大时的情况</li></ul><h2 id="3、完整代码实现">3、完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//将比轴心大的数据右移，比轴心小的数据左移，并返回轴心下标</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//获取轴心值</span><br>    <span class="hljs-type">int</span> key = arr[start];<br>    <span class="hljs-keyword">while</span> (start&lt;end)<br>    &#123;<br>        <span class="hljs-comment">//轴心右边比轴心小的赋值给轴心下标，end末尾下标-1</span><br>        <span class="hljs-keyword">while</span> (start&lt;end&amp;&amp;arr[end]&gt;=key)<br>        &#123;<br>            --end;<br>        &#125;<br>        arr[start] = arr[end];<br>        <span class="hljs-comment">//轴心左边比轴心大的与轴心替换</span><br>        <span class="hljs-keyword">while</span> (start&lt;end &amp;&amp; arr[start]&lt;=key)<br>        &#123;<br>            ++start;<br>        &#125;<br>        arr[end] = arr[start];<br>    &#125;<br>    arr[start] = key;<span class="hljs-comment">//填充轴心值</span><br>    <span class="hljs-keyword">return</span> start;<br>&#125;<br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (start&lt;end)<br>    &#123;<br>        <span class="hljs-type">int</span> index = <span class="hljs-built_in">Calculate</span>(arr,start,end);<span class="hljs-comment">//获取轴心数据下标</span><br>        <span class="hljs-built_in">QuickSort</span>(arr,start,index<span class="hljs-number">-1</span>);<span class="hljs-comment">//排序轴心左侧的数据</span><br>        <span class="hljs-built_in">QuickSort</span>(arr,index+<span class="hljs-number">1</span>,end);<span class="hljs-comment">//排序轴心右侧的数据</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//数组打印</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;&#123;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = start; k &lt; len; k++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k == len - <span class="hljs-number">1</span>)<br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot; &#125;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; arr[k] &lt;&lt; <span class="hljs-string">&quot;，&quot;</span>;<br>        &#125;<br><br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">8</span>;<br>    <span class="hljs-built_in">QuickSort</span>(arr, <span class="hljs-number">0</span>,len<span class="hljs-number">-1</span>);    <br>    <span class="hljs-built_in">printArr</span>(arr, len);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1>快速排序动画演示</h1><iframe src="//player.bilibili.com/player.html?aid=945266697&bvid=BV1rW4y1x7Kh&cid=897065233&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="477px"> </iframe>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交换排序之冒泡排序（Bubble Sort）</title>
    <link href="/2023/09/29/BubbleSort/"/>
    <url>/2023/09/29/BubbleSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章主要总结了冒泡排序的相关内容，包括选择排序的概念，特点和完整实现代码。</p></blockquote><span id="more"></span><h1>冒泡排序</h1><h2 id="过程">过程</h2><p>从后往前两两比较相邻元素值，若为逆序就交换，直到序列比较完成。每一趟可以使一个元素移动到最终位置，已经确定的元素，之后无需再次对比。若一趟下来未发生交换，则算法可提前结束。</p><h2 id="特点">特点</h2><ul><li>空间复杂度：O(1)</li><li>平均时间复杂度：O(n^2)</li><li>算法稳定，顺序表和链表都可用</li></ul><h2 id="完整实现代码">完整实现代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 冒泡排序 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> * arr ,<span class="hljs-type">int</span> len)</span><span class="hljs-comment">//升序排列</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++) <br>    &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++) <span class="hljs-comment">//每次确定一个最大值在后面</span><br>        &#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) <span class="hljs-comment">//前一个比后一个大就交换</span><br>            &#123;<br><span class="hljs-type">int</span> temp = arr[j];<br>arr[j] = arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1>补充内容</h1><p><a href="https://visualgo.net/zh/sorting">排序动画演示</a></p>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序之堆排序（Heap Sort）</title>
    <link href="/2023/09/29/HeapSort/"/>
    <url>/2023/09/29/HeapSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要总结了堆排序相关知识，其中包括堆排序的概念、算法思想、特点和完整实现代码。</p></blockquote><span id="more"></span><h1>堆排序</h1><h2 id="堆">堆</h2><ul><li>顺序存储地 “ 完全二叉树 ”<ul><li>结点 <code>i</code> 地左孩子是<code>2i</code>；右孩子是<code>2i+1</code>；父结点是<code>i/2</code></li></ul></li><li>大根堆（根&gt;=左、右）；小根堆（根&lt;=左、右）；</li></ul><h2 id="算法思想">算法思想</h2><ul><li>建堆<ul><li>编号&lt;= n/2 的所有结点依次 “ 下坠 ”调整（自底向上处理各分支结点）</li><li>调整规则：小元素逐层 “ 下坠 ”（与关键字更大的孩子交换）</li></ul></li><li>排序<ul><li>将堆顶元素加入有序子序列（堆顶元素与堆底元素交换）</li><li>堆底元素换到堆顶后，需要进行“ 下坠 ”调整，恢复“ 大根堆 ”的特性</li><li>上述过程重复 n~1 趟</li></ul></li></ul><h2 id="特性">特性</h2><ul><li>空间复杂度：O(1)</li><li>时间复杂度：建堆O(n)、排序O(nlogn)；总的时间复杂度= O(nlogn)</li><li>稳定性：不稳定</li><li>基于大根堆的堆排序得到 “ 递增序列 ”，基于小根堆的堆排序得到 “ 递减序列 ”</li></ul><h2 id="完整实现代码">完整实现代码</h2><blockquote><p>大根堆：按升序排列</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 堆排序 */</span><br><br><span class="hljs-comment">//将以k为根的子树调整为大根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeadAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>A[<span class="hljs-number">0</span>] = A[k];  <span class="hljs-comment">//A[0]暂存子树的根结点</span><br><span class="hljs-comment">//沿key较大的子结点向下筛选</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>*k; i &lt;= len; i*=<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (i&lt;len&amp;&amp;A[i]&lt;A[i+<span class="hljs-number">1</span>]) <br>&#123;<br>i++; <span class="hljs-comment">//取key较大的子结点的下标</span><br>&#125;<br><span class="hljs-keyword">if</span> (A[<span class="hljs-number">0</span>]&gt;=A[i])<br>&#123;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//筛选结束</span><br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>k = i;  <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>&#125;<br>&#125;<br>A[k] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br><br><span class="hljs-comment">//建立大根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildMaxHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//从后往前调整所有非终端结点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-built_in">HeadAdjust</span>(A, i, len);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//堆排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">BuildMaxHeap</span>(A,len);  <span class="hljs-comment">//初始建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &gt; <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//n-1 趟的交换和建堆过程</span><br>&#123;<br><span class="hljs-built_in">swap</span>(A[i], A[<span class="hljs-number">1</span>]);   <span class="hljs-comment">//堆顶元素和堆底元素交换</span><br><span class="hljs-built_in">HeadAdjust</span>(A, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>); <span class="hljs-comment">//把剩余的待排序元素整理成堆</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//有哨兵的数组</span><br><span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br><span class="hljs-built_in">HeapSort</span>(A, <span class="hljs-number">8</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;堆排序后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>&#123;<br>cout &lt;&lt; A[i];<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>&#123;<br>cout &lt;&lt;endl;;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>小根堆：按降序排列</p></blockquote><p>修改部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将以k为根的子树调整为小根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MinHeadAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>A[<span class="hljs-number">0</span>] = A[k];  <span class="hljs-comment">//A[0]暂存子树的根结点</span><br><span class="hljs-comment">//沿key较大的子结点向下筛选</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * k; i &lt;= len; i *= <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (i &lt; len &amp;&amp; A[i] &gt; A[i + <span class="hljs-number">1</span>]) <span class="hljs-comment">//大根堆改小根堆第一步把小于号改为大于</span><br>&#123;<br>i++; <span class="hljs-comment">//取key较小的子结点的下标</span><br>&#125;<br><span class="hljs-keyword">if</span> (A[<span class="hljs-number">0</span>] &lt;= A[i]) <span class="hljs-comment">////大根堆改小根堆第二步把大于等于号改为小于等于</span><br>&#123;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//筛选结束</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>k = i;  <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>&#125;<br>&#125;<br>A[k] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完整实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 堆排序 */</span><br><br><span class="hljs-comment">//将以k为根的子树调整为小根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MinHeadAdjust</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>A[<span class="hljs-number">0</span>] = A[k];  <span class="hljs-comment">//A[0]暂存子树的根结点</span><br><span class="hljs-comment">//沿key较大的子结点向下筛选</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * k; i &lt;= len; i *= <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (i &lt; len &amp;&amp; A[i] &gt; A[i + <span class="hljs-number">1</span>]) <span class="hljs-comment">//大根堆改小根堆第一步把小于号改为大于</span><br>&#123;<br>i++; <span class="hljs-comment">//取key较小的子结点的下标</span><br>&#125;<br><span class="hljs-keyword">if</span> (A[<span class="hljs-number">0</span>] &lt;= A[i]) <span class="hljs-comment">////大根堆改小根堆第二步把大于等于号改为小于等于</span><br>&#123;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//筛选结束</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>A[k] = A[i]; <span class="hljs-comment">//将A[i]调整到双亲结点上</span><br>k = i;  <span class="hljs-comment">//修改k值，以便继续向下筛选</span><br>&#125;<br>&#125;<br>A[k] = A[<span class="hljs-number">0</span>];<span class="hljs-comment">//被筛选结点的值放入最终位置</span><br>&#125;<br><br><span class="hljs-comment">//建立小根堆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildMinHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//从后往前调整所有非终端结点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>&#123;<br><span class="hljs-built_in">MinHeadAdjust</span>(A, i, len);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//堆排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HeapSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">BuildMinHeap</span>(A,len);  <span class="hljs-comment">//初始建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &gt; <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//n-1 趟的交换和建堆过程</span><br>&#123;<br><span class="hljs-built_in">swap</span>(A[i], A[<span class="hljs-number">1</span>]);   <span class="hljs-comment">//堆顶元素和堆底元素交换</span><br><span class="hljs-built_in">MinHeadAdjust</span>(A, <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>); <span class="hljs-comment">//把剩余的待排序元素整理成堆</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//有哨兵的数组</span><br><span class="hljs-type">int</span> A[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span> &#125;;<br><span class="hljs-built_in">HeapSort</span>(A, <span class="hljs-number">8</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;堆排序后：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>&#123;<br>cout &lt;&lt; A[i];<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">8</span>)<br>&#123;<br>cout &lt;&lt;endl;;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;,&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序之简单选择排序（Select Sort）</title>
    <link href="/2023/09/28/SelectSort/"/>
    <url>/2023/09/28/SelectSort/</url>
    
    <content type="html"><![CDATA[<blockquote><p>简单选择排序的介绍，包括选择排序的特点、原理和完整代码实现。</p></blockquote><span id="more"></span><h1>简单选择排序</h1><h2 id="1、特点">1、特点</h2><ul><li>交换记录导致排序方法是不稳定的</li><li>可用于链式存储结构</li><li>移动记录次数较少，当每一记录占用的空间较多时，此方法比直接插入排序快</li></ul><h2 id="2、过程-原理">2、过程(原理)</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h2 id="3、完整代码实现">3、完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[],<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> min = i;<span class="hljs-comment">//标志位</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; len; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[min] &gt; arr[j])<span class="hljs-comment">//比较大小，如果比最小值小，就获取对方的下标给min</span><br>&#123;<br>min = j;<br>&#125;<br>&#125;<br>        <span class="hljs-keyword">if</span>(min == i)<span class="hljs-comment">//一轮搜索后最小值仍然是标志位，则直接进行下一轮比对</span><br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//把最小值和刚开始的标志位交换</span><br><span class="hljs-type">int</span> temp = arr[i];<br>arr[i] = arr[min];<br>arr[min] = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1>补充内容</h1><p><a href="https://visualgo.net/zh/sorting">排序动画演示</a></p>]]></content>
    
    
    <categories>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表（LinkList）</title>
    <link href="/2022/12/10/LinkList/"/>
    <url>/2022/12/10/LinkList/</url>
    
    <content type="html"><![CDATA[<blockquote><p>链表的定义、特点和存储结构；以及单链表的完整实现代码。</p></blockquote><span id="more"></span><hr><p>前置文章：<a href="https://superlovelace.top/2022/12/10/SqList/">线性表之顺序表</a></p><h1>链表</h1><h2 id="链表的定义">链表的定义</h2><p>每个结点除了存放数据元素外，还要存储指向下一个结点的指针</p><h2 id="链表的特点">链表的特点</h2><ol><li>不要求大片连续空间</li><li>改变容量方便</li><li>不可随机存取</li><li>要耗费一定空间存放指针</li></ol><h2 id="链式存储结构">链式存储结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//单链表的存储结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>ElemType data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure><h2 id="单链表的完整代码实现">单链表的完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表（带头结点）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>ElemType data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化 有头结点</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>L = <span class="hljs-keyword">new</span> LNode;<br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表的取值（按位序取值）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要取值的单链表</span><br><span class="hljs-comment">参数二：要取值的位置</span><br><span class="hljs-comment">参数三：待保存的对象</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(LinkList L,<span class="hljs-type">int</span> i,ElemType &amp;e)</span></span><br><span class="hljs-function"></span>&#123;<br>LNode *p = L-&gt;next;<br><span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (p &amp;&amp; j&lt;i)<br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || j &gt; i) <br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>e = p-&gt;data;<br><span class="hljs-keyword">return</span> p-&gt;data;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表的查找（按位序查找）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要查找的单链表</span><br><span class="hljs-comment">参数二：要查找的数据</span><br><span class="hljs-comment">注意：成功：返回下标地址；失败：返回NULL。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">LNode* <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkList L, ElemType e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>LNode* p = L-&gt;next;<span class="hljs-comment">//创建新结点，并指向第一块数据</span><br><span class="hljs-keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="hljs-comment">//如果p不为空且data == e,返回p的地址</span><br>&#123;<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表的插入（按位序插入（后插法））:  时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要插入的单链表</span><br><span class="hljs-comment">参数二：要插入的位置</span><br><span class="hljs-comment">参数三：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (i&lt;<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br><span class="hljs-keyword">while</span> (p &amp;&amp; (j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || j&gt;i<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果地址p为NULL就退出，头结点的地址也不为空</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* s = <span class="hljs-keyword">new</span> LNode; <span class="hljs-comment">//创建新结点</span><br>s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表的删除（按位序删除）: 时间复杂度O(n)</span><br><span class="hljs-comment">参数一：要删除的单链表</span><br><span class="hljs-comment">参数二：要删除的位置</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList&amp; L, <span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>LNode* p = L;<span class="hljs-comment">//创建临时结点指向头结点，头结点不存数据</span><br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录p指向的是第几个结点，第0个结点为头结点，头结点不存数据，只存地址</span><br><span class="hljs-keyword">while</span> (p-&gt;next&amp;&amp;(j&lt;i<span class="hljs-number">-1</span>))<span class="hljs-comment">//循环找到第i-1个结点的前一个结点</span><br>&#123;<br>p = p-&gt;next;<br>j++;<br>&#125;<br><span class="hljs-keyword">if</span> (!(p-&gt;next)||(j&gt;i<span class="hljs-number">-1</span>))<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* q = p-&gt;next;<span class="hljs-comment">//创建新结点q,指向要删除的数据内存地址</span><br>p-&gt;next = q-&gt;next;<span class="hljs-comment">//p的指针指向q的指针指向的下一个数据地址</span><br><span class="hljs-keyword">delete</span> q;<span class="hljs-comment">//释放q结点</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>LinkList L;<br><span class="hljs-comment">//创建单链表</span><br><span class="hljs-comment">//CreateList_H(L,5);</span><br><span class="hljs-comment">//初始化单链表</span><br><span class="hljs-built_in">InitList</span>(L);<br><span class="hljs-comment">//插入单链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-built_in">ListInsert</span>(L, <span class="hljs-number">1</span>, i);<br>&#125;<br><span class="hljs-comment">//取值</span><br><span class="hljs-type">int</span> e;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//查找</span><br>cout &lt;&lt; <span class="hljs-string">&quot;5的地址为：&quot;</span> &lt;&lt; <span class="hljs-built_in">LocateElem</span>(L, <span class="hljs-number">5</span>) &lt;&lt; endl;<br><span class="hljs-comment">//删除</span><br><span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">1</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;删除第一个元素5：&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">GetElem</span>(L, i, e) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内容补充">内容补充</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">前插法创建单链表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//void CreateList_H(LinkList&amp; L, int n)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//L = new LNode;</span><br><span class="hljs-comment">//L-&gt;next = NULL;</span><br><span class="hljs-comment">//for (int i = 0; i &lt; n; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//LNode* p = new LNode;</span><br><span class="hljs-comment">//cin &gt;&gt; p-&gt;data;</span><br><span class="hljs-comment">//p-&gt;next = L-&gt;next;</span><br><span class="hljs-comment">//L-&gt;next = p;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">尾插法创建单链表</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//void CreateList_R(LinkList&amp; L, int n)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//L = new LNode;</span><br><span class="hljs-comment">//L-&gt;next = NULL;</span><br><span class="hljs-comment">//LNode* r = L;</span><br><span class="hljs-comment">//for (int i = 0; i &lt; n; i++)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//LNode* p = new LNode;</span><br><span class="hljs-comment">//cin &gt;&gt; p-&gt;data;</span><br><span class="hljs-comment">//p-&gt;next = NULL;</span><br><span class="hljs-comment">//r-&gt;next = p;</span><br><span class="hljs-comment">//r = p;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表的插入（前插法）: 时间复杂度O(1)</span><br><span class="hljs-comment">参数一：要插入的结点</span><br><span class="hljs-comment">参数二：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">原理：前插法即开辟新结点s，复制p结点的值，然后将数据e存给p结点，再将s的指针指向p的指针指向，p的指针指向s。可谓是偷天换日、原地TP。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListPriorInsert</span><span class="hljs-params">(LNode *p, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* s = <span class="hljs-keyword">new</span> LNode;<span class="hljs-comment">//创建新结点</span><br><span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>s-&gt;data = p-&gt;data;<span class="hljs-comment">//复制插入的前一个数据到新开辟的空间</span><br>p-&gt;data = e;  <span class="hljs-comment">//前一个数据存放新数据e</span><br>s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">单链表的插入（后插法）: 时间复杂度O(1)</span><br><span class="hljs-comment">参数一：要插入的结点</span><br><span class="hljs-comment">参数二：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListNextInsert</span><span class="hljs-params">(LNode* p, ElemType e)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>LNode* s = <span class="hljs-keyword">new</span> LNode;<span class="hljs-comment">//创建新结点</span><br><span class="hljs-keyword">if</span> (s == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>s-&gt;data = e;<span class="hljs-comment">//新结点存放新数据e</span><br>s-&gt;next = p-&gt;next;<span class="hljs-comment">//将p的指针指向的下一个数据地址赋值给新结点s的指针</span><br>p-&gt;next = s;<span class="hljs-comment">//p的指针指向新节点s</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表之顺序表（SqList）</title>
    <link href="/2022/12/10/SqList/"/>
    <url>/2022/12/10/SqList/</url>
    
    <content type="html"><![CDATA[<blockquote><p>数据结构第二章线性表的定义、特点和存储结构。顺序表的定义、特点和存储结构。附加完整代码实现</p></blockquote><span id="more"></span><h1>线性表</h1><p>注：SqList为简写，完整名为Sequential List。</p><h2 id="线性表的定义">线性表的定义</h2><p>线性表是n个具有<code>相同</code>数据类型（特性）的<code>数据元素</code>的<code>有限</code> <code>序列</code>，其中n为表长，当n = 0时，线性表是一个空表。</p><p><strong>相同</strong>：每个数据元素所占空间一样大</p><p><strong>序列</strong>：有次序</p><p><strong>有限</strong>：所有的整数按递增次序排列，不是线性表。所有的整数是无限的</p><blockquote><p>注意：线性表的位序从1开始，数组下标是从0开始的</p></blockquote><h2 id="线性表的特点">线性表的特点</h2><p>1．集合中必存在唯一的一个“第一元素”。</p><p>2．集合中必存在唯一的一个 “最后元素” 。</p><p>3．除最后一个元素之外，均有唯一的后继(后件)。</p><p>4．除第一个元素之外，均有唯一的前驱(前件)。</p><h2 id="线性表存储结构">线性表存储结构</h2><p>线性表在逻辑上是线性结构，也就说是连续的一条直线。但是在物理结构上并不一定是连续的， 线性表在物理上存储时，通常以数组和链式结构的形式存储。</p><ul><li>数组存储即顺序存储结构</li><li>链表即链式存储结构</li></ul><h1>顺序表</h1><p>顺序表是用顺序存储的方式实现的线性表</p><h2 id="顺序表的定义">顺序表的定义</h2><p>顺序表是用一段物理地址连续的存储单元依次存储数据元素的线性结构，一般情况下采用数组存储。在数组上完成数据的增删查改。</p><h2 id="顺序表的特点">顺序表的特点</h2><ol><li><strong>随机访问，即可在O（1）时间内找到第i个元素。</strong></li><li>存储密度高，每个节点只存储数据元素本身</li><li>拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）<br>静态分配不能拓展容量。</li><li>插入、删除操作不方便，需要移动大量元素</li></ol><h2 id="顺序存储结构">顺序存储结构</h2><p>逻辑上相邻的数据元素，其物理次序也是相邻的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//顺序表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>Book* elem; <span class="hljs-comment">//定义Book指针</span><br><span class="hljs-type">int</span> length; <span class="hljs-comment">//顺序表的长度</span><br><span class="hljs-type">int</span> MaxSize;<span class="hljs-comment">//此处为扩展知识,书上没有</span><br>&#125;SqList;<br></code></pre></td></tr></table></figure><h2 id="顺序表的完整代码实现">顺序表的完整代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10  <span class="hljs-comment">//宏定义，定义数组最大长度，对应顺序表的容量</span></span><br><br><span class="hljs-comment">//图书结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>string no; <span class="hljs-comment">//图书ISBN编号</span><br>string name;  <span class="hljs-comment">//图书名称</span><br><span class="hljs-type">float</span> price;  <span class="hljs-comment">//图书价格</span><br>&#125;Book;<br><br><span class="hljs-comment">//顺序表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>Book* elem; <span class="hljs-comment">//定义Book指针</span><br><span class="hljs-type">int</span> length; <span class="hljs-comment">//顺序表的长度</span><br><span class="hljs-type">int</span> MaxSize;<span class="hljs-comment">//此处为扩展知识,书上没有</span><br>&#125;SqList;<br><br><span class="hljs-comment">//给Book类型取外号为ElemType</span><br><span class="hljs-keyword">typedef</span> Book ElemType;<br><span class="hljs-comment">//给int类型取外号为Status</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Status;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的初始化:</span><br><span class="hljs-comment">参数一：要初始化的顺序表</span><br><span class="hljs-comment">注意：成功：返回1；失败：退出程序，错误代码：3。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(SqList&amp; L)</span><span class="hljs-comment">//使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>L.MaxSize = MAXSIZE;<br><span class="hljs-comment">//L.elem = (Book*)malloc(MAXSIZE*sizeof(int)); //或者用malloc开辟空间</span><br>L.elem = <span class="hljs-keyword">new</span> ElemType[MAXSIZE]; <span class="hljs-comment">//使用Book类型的外号ElemType</span><br><span class="hljs-comment">//exit是退出整个进程，OVERFLOW的默认值为3，意思为栈溢出</span><br><span class="hljs-keyword">if</span> (!L.elem) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>L.length = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的扩容（扩展知识，书上并没有这个）</span><br><span class="hljs-comment">扩容会大量移动数据，时间复杂度为O(n)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>Book *p = L.elem;<span class="hljs-comment">//将原来的地址给p</span><br>L.MaxSize += len;<span class="hljs-comment">//容量加上扩容的数据</span><br><br>L.elem = <span class="hljs-keyword">new</span> Book[L.MaxSize];<span class="hljs-comment">//开辟新空间</span><br><span class="hljs-comment">//L.elem = (Book*)malloc(L.MaxSize*sizeof(int));</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<span class="hljs-comment">//将原来的数据拷贝回来</span><br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">此处编译器警告：代码：C6385 说明：正在从&quot;L.elem&quot;读取无效数据。</span><br><span class="hljs-comment">尚不清楚是怎么回事，然而并不影响程序运行。</span><br><span class="hljs-comment">*/</span><br>L.elem[i] = p[i];<br>&#125;<br><br><span class="hljs-comment">//delete(p);//这里应当释放的，但是这样编译器报错，程序崩溃。</span><br><span class="hljs-comment">//free(p);//如果用malloc开辟空间，就用free释放</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的取值:</span><br><span class="hljs-comment">参数一：要取值的顺序表</span><br><span class="hljs-comment">参数二：要取值的位置</span><br><span class="hljs-comment">参数三：待保存的对象</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">GetElem</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-type">int</span> num, ElemType&amp; e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (num&lt;<span class="hljs-number">1</span> || num&gt;L.length)<span class="hljs-comment">//先判断输入是否合法</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>e = L.elem[num - <span class="hljs-number">1</span>]; <span class="hljs-comment">//将获取的数值赋值给Book对象e</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的查找:</span><br><span class="hljs-comment">参数一：要查找的顺序表</span><br><span class="hljs-comment">参数二：要查找的数据</span><br><span class="hljs-comment">注意：成功：返回下标位置；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">LocateElem</span><span class="hljs-params">(SqList L, ElemType e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<br>&#123;<br><span class="hljs-comment">//对比Book中的数据是否相等</span><br><span class="hljs-keyword">if</span> (L.elem[i].name == e.name &amp;&amp; L.elem[i].no == e.no &amp;&amp; L.elem[i].price == e.price)<br>&#123;<br><span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;<span class="hljs-comment">//因为线性表是从1开始的</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的插入:</span><br><span class="hljs-comment">参数一：要插入的顺序表</span><br><span class="hljs-comment">参数二：要插入的位置</span><br><span class="hljs-comment">参数三：要插入的数据</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-type">int</span> num, ElemType e)</span><span class="hljs-comment">//使用Book类型的外号ElemType作为传入参数e的类型，使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (L.length == MAXSIZE || num&lt;<span class="hljs-number">1</span> || num &gt;L.length + <span class="hljs-number">1</span>)<span class="hljs-comment">//先判断输入是否合法</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L.length - <span class="hljs-number">1</span>; i &gt;= num - <span class="hljs-number">1</span>; i--)<br>&#123;<br>L.elem[i + <span class="hljs-number">1</span>] = L.elem[i];<br>&#125;<br>L.elem[num - <span class="hljs-number">1</span>] = e;<br>L.length++;<span class="hljs-comment">//成功插入数据，length长度+1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的删除:</span><br><span class="hljs-comment">参数一：要删除的顺序表</span><br><span class="hljs-comment">参数二：要删除的位置</span><br><span class="hljs-comment">注意：成功：返回1；失败：返回0。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList&amp; L, <span class="hljs-type">int</span> num)</span><span class="hljs-comment">//使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (num&lt;<span class="hljs-number">1</span> || num &gt;L.length || L.length == <span class="hljs-number">0</span>)<span class="hljs-comment">//先判断输入是否合法</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//这里书上是i &lt; L.length-1；是错误的</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = num; i &lt; L.length; i++)<span class="hljs-comment">//删除数据就把num后的数据逐个前移，将其覆盖掉</span><br>&#123;<br>L.elem[i<span class="hljs-number">-1</span>] = L.elem[i];<br>&#125;<br>L.length--;<span class="hljs-comment">//成功删除数据，length长度-1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>SqList L;<br>Book book;<br><span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>; <span class="hljs-comment">//临时数据，用来判断执行是否成功</span><br>cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;1、初始化顺序表...&quot;</span>;<br>temp = <span class="hljs-built_in">InitList</span>(L);<br><span class="hljs-keyword">if</span> (!temp)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t失败&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br><br>book.no = <span class="hljs-string">&quot;978-7-115-37950-4&quot;</span>;<br>book.name = <span class="hljs-string">&quot;数据结构（c语言版）（第2版）&quot;</span>;<br>book.price = <span class="hljs-number">35</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;2、往顺序表中插入数据...&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)<br>&#123;<br>book.price = i;<br>temp = <span class="hljs-built_in">ListInsert</span>(L, i, book);<br>&#125;<br><br><br><span class="hljs-keyword">if</span> (!temp)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t失败&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">/*cout &lt;&lt; &quot;3、扩容...&quot;;</span><br><span class="hljs-comment">IncreaseSize(L, 5);</span><br><span class="hljs-comment">cout &lt;&lt; &quot;L.MaxSize :&quot;&lt;&lt; L.MaxSize &lt;&lt; endl;*/</span><br>cout &lt;&lt; <span class="hljs-string">&quot;3、获取图书的下标位置数据...&quot;</span>;<br>temp = <span class="hljs-built_in">LocateElem</span>(L, book);<br><span class="hljs-keyword">if</span> (!temp)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t失败!&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;下标位置为：&quot;</span> &lt;&lt; temp &lt;&lt; endl;<br>Book book1;<br>cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;4、在顺序表中取得数据...&quot;</span>;<br>temp = <span class="hljs-built_in">GetElem</span>(L, <span class="hljs-number">1</span>, book1);<br><span class="hljs-keyword">if</span> (!temp)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t失败&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;\t成功！&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;--------------------------------------&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;图书信息为：&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;图书ISBN :&quot;</span> &lt;&lt; book1.no<br>&lt;&lt; <span class="hljs-string">&quot;\t图书名称：&quot;</span> &lt;&lt; book1.name<br>&lt;&lt; <span class="hljs-string">&quot;\t图书价格：&quot;</span> &lt;&lt; book1.price &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;5、删除顺序表中的数据...&quot;</span>;<br>temp = <span class="hljs-built_in">ListDelete</span>(L, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">if</span> (!temp)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;失败&quot;</span> &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;成功&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;======================================&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= L.length; i++)<br>&#123;<br><span class="hljs-built_in">GetElem</span>(L, i, book1);<br>cout &lt;&lt; book1.price &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">======================================<br><span class="hljs-number">1</span>、初始化顺序表...      成功！<br>======================================<br><span class="hljs-number">2</span>、往顺序表中插入数据...        成功！<br>======================================<br><span class="hljs-number">3</span>、获取图书的下标位置数据...    成功！<br>--------------------------------------<br>下标位置为：<span class="hljs-number">1</span><br>======================================<br><span class="hljs-number">4</span>、在顺序表中取得数据...        成功！<br>--------------------------------------<br>图书信息为：<br>图书ISBN :<span class="hljs-number">978</span><span class="hljs-number">-7</span><span class="hljs-number">-115</span><span class="hljs-number">-37950</span><span class="hljs-number">-4</span>     图书名称：数据结构（c语言版）（第<span class="hljs-number">2</span>版）  图书价格：<span class="hljs-number">35</span><br>======================================<br><span class="hljs-number">5</span>、删除顺序表中的数据...成功<br>======================================<br>请按任意键继续. . .<br></code></pre></td></tr></table></figure><h2 id="动态分配方法（修改部分）">动态分配方法（修改部分）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//顺序表结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>Book* elem; <span class="hljs-comment">//定义Book指针</span><br><span class="hljs-type">int</span> length; <span class="hljs-comment">//顺序表的长度</span><br><span class="hljs-type">int</span> MaxSize;<br>&#125;SqList;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的初始化:</span><br><span class="hljs-comment">参数一：要初始化的顺序表</span><br><span class="hljs-comment">注意：成功：返回1；失败：退出程序，错误代码：3。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">Status <span class="hljs-title">InitList</span><span class="hljs-params">(SqList&amp; L)</span><span class="hljs-comment">//使用int类型的外号Status作为函数的返回值类型</span></span><br><span class="hljs-function"></span>&#123;<br>L.MaxSize = MAXSIZE;<br>L.elem = <span class="hljs-keyword">new</span> ElemType[MAXSIZE]; <span class="hljs-comment">//使用Book类型的外号ElemType</span><br><span class="hljs-comment">//L.elem = (Book*)malloc(MAXSIZE*sizeof(int));</span><br><span class="hljs-comment">//exit是退出整个进程，OVERFLOW的默认值为3，意思为栈溢出</span><br><span class="hljs-keyword">if</span> (!L.elem) <span class="hljs-built_in">exit</span>(OVERFLOW);<br>L.length = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">顺序表的扩容</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>Book *p = L.elem;<br>L.MaxSize += len;<br>L.elem = <span class="hljs-keyword">new</span> Book[L.MaxSize];<br>    <span class="hljs-comment">//L.elem = (Book*)malloc(L.MaxSize*sizeof(int));</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; L.length; i++)<br>    &#123;<br>        L.elem[i] = p[i];<br>    &#125;<br>    <span class="hljs-built_in">delete</span>(p);<br>    <span class="hljs-comment">//free(p);</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构 - 图</title>
    <link href="/2022/12/10/Graph/"/>
    <url>/2022/12/10/Graph/</url>
    
    <content type="html"><![CDATA[<blockquote><p>数据结构第六章图的学习笔记。</p></blockquote><span id="more"></span><html><div class="box1">         <span class="leftline"></span> <span class="text">正文部分</span> <span class="rightline"></span> </div></html><h3 id="1、图的定义、存储结构">1、图的定义、存储结构</h3><h4 id="1-1、图的定义和术语">1.1、图的定义和术语</h4><blockquote><p>线性表可以是空表，树可以是空树，但图不可以空</p><p>即图的顶点不能空，但边可以空</p></blockquote><p>图: G=(V,E)</p><p>V: 顶点(数据元素)的有穷非空集合</p><p>E: 边的有穷集合</p><p>简单图：1.不存在重复边 2.不存在顶点到自身的边</p><p>多重图：两点间的边多于一条，允许自己的边连接自己</p><ol><li>无向图: 每条边都是无方向的  (x,y)为边，且与(y,x)相同</li><li>有向图: 每条边都是有方向的  &lt;x,y&gt;为边，且与&lt;y,x&gt;不同</li><li>完全图: 任意两个点都有一条边相连</li><li>稀疏图: 有很少边或弧的图(e&lt;nlogn)</li><li>稠密图: 有较多边或弧的图</li><li>网: 边/弧带权的图</li><li>邻接: 有边/弧相连的两个顶点之间的关系(圆括号是无向图，尖括号是有向图)</li></ol><blockquote><p>存在(Vi,Vj),则称Vi和Vj互为邻接点</p><p>存在&lt;Vi,Vj&gt;,则称Vi邻接到Vi，Vj邻接于Vi</p></blockquote><ol start="8"><li>关联(依附): 边/弧与顶点之间的关系</li></ol><blockquote><p>存在(Vi,Vj)/&lt;Vi,Vj&gt;,则称该边/弧关联于Vi和Vj</p></blockquote><ol start="9"><li>顶点的度: 与该顶点相关联的边的数目，记为TD(v)</li></ol><blockquote><p>在有向图中，顶点的度等于该顶点的入度与出度之和</p><p>顶点v的入度是以v为终点的有向边的条数，记作ID(v)  指向V结点的</p><p>顶点v的出度是以v为始点的有向边的条数，记作OD(v) V结点指出的</p></blockquote><ol start="10"><li>当有向图中仅1个顶点的入度为0，其余顶点的入度均为1，此时是何形状?</li></ol><blockquote><p>答: 是树!而且是一棵有向树!</p></blockquote><h4 id="1-2、图的相关概念">1.2、图的相关概念</h4><p>点到点的距离，即最短路径。两点无连接，则这两点的距离为无穷</p><ol><li>路径: 接续的边构成的顶点序列</li><li>路径长度: 路径上边或弧的数目/权值之和</li><li>回路(环): 第一个顶点和最后一个顶点相同的路径</li><li>简单路径: 除路径起点和终点可以相同外，其余顶点均不相同的路径</li><li>简单回路(简单环): 除路径起点和终点相同外，其余顶点均不相同的路径</li><li>连通图(强连通图): 在无(有)向图G={V,{E}}中，若对任何两个顶点v、u都存在从v、u的路径，则称G是连通图(强连通图)</li><li>权与网: 图中边或弧所具有的相关数称为权，表明从一个顶点到另一个顶点的距离或耗费带权的图称为网</li><li>子图: 设有两个图G=(V,{E})、G1=(V1,{E1}),若则称G1是G的子图</li></ol><h4 id="1-3、连通分量">1.3、连通分量</h4><ol><li>无向图G的极大连通子图称为G的连通分量</li><li>极大连通子图:该子图是G的连通子图，将G的任何不在该子图中的顶点加入，子图不再连通</li><li>有向图G的极大强连通子图称为G的连强通分量</li><li>极大强连通子图:该子图是G的强连通子图，将G的任何不在该子图中的顶点加入，子图不再强连通</li><li>极小连通子图:该子图是G的连通子图，在该子图中删除任何一条边，子图不再连通</li><li>生成森林: 对非连通图，由各个连通分量的生成树的集合</li></ol><h4 id="1-4、图的存储结构">1.4、图的存储结构</h4><h5 id="1-4-1、邻接矩阵法：">1.4.1、邻接矩阵法：</h5><p>数组实现的顺序存储，空间复杂度高，不适合存储稀疏图 n^2</p><p>无向图的邻接矩阵：（右上和左下是对称重复的）</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>无向图邻接矩阵特点：第<code>i</code>个结点的度 = 第<code>i</code>行（或第<code>i</code>列）的非零元素个数</p><hr><p>有向图的邻接矩阵：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><p>有向图邻接矩阵特点：</p><ul><li>第<code>i</code>个结点的出度 = 第<code>i</code>行（或第<code>i</code>列）的非零元素个数</li><li>第<code>i</code>个结点的入度 = 第<code>i</code>行（或第<code>i</code>列）的非零元素个数</li><li>第<code>i</code>个结点的度 = 第<code>i</code>行、第<code>i</code>列的非零元素个数之和</li></ul><p>邻接矩阵性质：</p><p>两个矩阵A,B相乘，新的矩阵的C(1,4)位置的值为：A的第一行的第一个值*B的第四列的第一个值，有几个就+几个</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>B</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>B</mi><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>B</mi><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>B</mi><mo stretchy="false">(</mo><mn>4</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(1,4) = A(1,1)*B(1,4)+A(1,2)*B(2,4)+A(1,3)*B(3,4)+A(1,4)*B(4,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span></span></p><h5 id="1-4-2、邻接表（顺序存储-链式存储）">1.4.2、邻接表（顺序存储+链式存储）</h5><p>计算图的入读和找图的入边不方便，只能遍历</p><p>指针顺序不唯一，适合存稀疏图</p><table><thead><tr><th style="text-align:center">index</th><th style="text-align:center">data</th><th style="text-align:center">*指针1</th><th style="text-align:center">*指针2</th><th style="text-align:center">*指针3</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">A</td><td style="text-align:center">–&gt; 1</td><td style="text-align:center">–&gt; 2</td><td style="text-align:center">–&gt; 3</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">B</td><td style="text-align:center">–&gt; 0</td><td style="text-align:center">–&gt; 4</td><td style="text-align:center">–&gt; 5</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">C</td><td style="text-align:center">–&gt; 0</td><td style="text-align:center">–&gt; 4</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">D</td><td style="text-align:center">–&gt; 0</td><td style="text-align:center">–&gt; 5</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">E</td><td style="text-align:center">–&gt; 1</td><td style="text-align:center">–&gt; 2</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">F</td><td style="text-align:center">–&gt; 1</td><td style="text-align:center">–&gt; 3</td><td style="text-align:center"></td></tr></tbody></table><p>拓展，逆邻接表：</p><p>存的是指向它的结点（前驱）</p><h5 id="1-4-3、十字链表（有向图）（了解即可）：">1.4.3、十字链表（有向图）（了解即可）：</h5><p>数据域后的第一个橙色可以找到入边，第二个绿色找出边。这是相对于有向图来说的</p><h5 id="1-4-4、邻接多重表（无向图）（了解即可）：">1.4.4、邻接多重表（无向图）（了解即可）：</h5><h3 id="2、图的遍历过程及算法">2、图的遍历过程及算法</h3><h4 id="2-1、广度优先遍历（BFS）">2.1、广度优先遍历（BFS）</h4><p>图的广度优先遍历就类似树的层次遍历</p><blockquote><p>同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一</p><p>同一个图的邻接表表示方式不唯一，因此广度优先遍历序列不唯一</p></blockquote><p>算法要点：</p><ul><li>需要一个辅助队列</li><li>如何从一个结点找到与之邻接的其他顶点</li><li>visited数组，防止重复访问</li><li>如何处理非连通图</li></ul><p>复杂度：</p><ul><li>空间复杂度：O(n)  ---- 辅助队列</li><li>时间复杂度：<ul><li>访问结点的时间+访问所有边的时间</li><li>邻接矩阵：O(|V|^2)</li><li>邻接表：O(|V|+|E|)</li></ul></li></ul><p>广度优先生成树：</p><ul><li>即为广度优先遍历确定的树</li><li>邻接表存储的图表示方式不唯一，遍历序列，生成树也不唯一</li><li>遍历非连通图可得广度优先生成森林</li></ul><p>伪代码描述广度优先遍历：</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 伪代码 */</span><br><span class="hljs-comment">/* 访问标记数组 */</span><br><span class="hljs-type">bool</span> visited[MAX_VERTEX_NUM];<br><br><span class="hljs-comment">/* 对图G进行广度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFSTraverse</span><span class="hljs-params">(Graph G)</span><span class="hljs-comment">//主要是处理连通图多的情况</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G.vexnum; ++i)<br>&#123;<br>visited[i] = FALSE;<span class="hljs-comment">//访问标记数组初始化</span><br>&#125;<br><span class="hljs-built_in">InitQueue</span>(Q); <span class="hljs-comment">//初始化辅助队列</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G.vexnum; ++i)<span class="hljs-comment">//从0号顶点开始遍历</span><br>&#123;<br><span class="hljs-keyword">if</span> (!visited[i])<span class="hljs-comment">//对每个连通分量调用一次BFS</span><br>&#123;<br><span class="hljs-built_in">BFS</span>(G, i);<span class="hljs-comment">//vi未访问过，从Vi开始BFS</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* 广度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph G, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//从顶点v出发，广度优先遍历图G</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">visit</span>(v); <span class="hljs-comment">//访问初始顶点v</span><br>visited[v] = TRUE;<span class="hljs-comment">//对v做已访问标记</span><br><span class="hljs-built_in">Enqueue</span>(Q, v);<span class="hljs-comment">//顶点v入队列Q</span><br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isEmpty</span>(Q))<br>&#123;<br><span class="hljs-built_in">DeQueue</span>(Q, v);<span class="hljs-comment">//顶点v出队列</span><br>        <span class="hljs-comment">//检测v所有邻接点</span><br><span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstNeighbor</span>(G,v); w &gt;=<span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextNeighbor</span>(G, v, w))<br>&#123;<br><span class="hljs-keyword">if</span> (!visited[w])  <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>&#123;<br>visited[w];<span class="hljs-comment">//访问顶点w</span><br>visited[w] = TRUE;<span class="hljs-comment">//对w做已访问标记</span><br><span class="hljs-built_in">EnQueue</span>(Q, w);<span class="hljs-comment">//顶点w入队列</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2、深度优先遍历（DFS）">2.2、深度优先遍历（DFS）</h4><p>图的深度优先遍历就类似树的先序遍历</p><p>算法要点：</p><ul><li>递归地深入探索未被访问过的邻接点（类似于树的先根遍历）</li><li>如何从一个结点找到与之邻接的其他顶点</li><li>visited数组，防止重复访问</li><li>如何处理非连通图</li></ul><p>复杂度：</p><ul><li>空间复杂度：O(|V|)  ---- 来自递归工作站</li><li>时间复杂度：<ul><li>访问结点的时间+访问所有边的时间</li><li>邻接矩阵：O(|V|^2)</li><li>邻接表：O(|V|+|E|)</li></ul></li></ul><p>深度优先生成树：</p><ul><li>即为深度优先遍历确定的树</li><li>邻接表存储的图表示方式不唯一，深度优先遍历序列，生成树也不唯一</li><li>深度优先遍历非连通图可得深度优先生成森林</li></ul><p>伪代码描述深度优先遍历：</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 访问标记数组 */</span><br><span class="hljs-type">bool</span> visited[MAX_VERTEX_NUM];<br><br><span class="hljs-comment">/* 对图G进行深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(Graph G)</span><span class="hljs-comment">//主要是处理连通图多的情况</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<br>&#123;<br>visited[i] = FALSE;<span class="hljs-comment">//访问标记数组初始化</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<span class="hljs-comment">//从0号顶点开始遍历</span><br>&#123;<br><span class="hljs-keyword">if</span> (!visited[v])<span class="hljs-comment">//对每个连通分量调用一次BFS</span><br>&#123;<br><span class="hljs-built_in">DFS</span>(G, v);<span class="hljs-comment">//vi未访问过，从Vi开始BFS</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* 深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//从顶点v出发，深度优先遍历图G</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">visit</span>(v); <span class="hljs-comment">//访问初始顶点v</span><br>visited[v] = TRUE;<span class="hljs-comment">//对v做已访问标记</span><br>    <span class="hljs-comment">//检测v所有邻接点</span><br>    <span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstNeighbor</span>(G,v); w &gt;=<span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextNeighbor</span>(G, v, w))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!visited[w])  <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>        &#123;<br>           <span class="hljs-built_in">DFS</span>(G,w);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>图的遍历和连通性：</p><ul><li>无向图：DFS/BFS函数调用次数 = 连通分量数</li><li>有向图<ul><li>若从起始顶点到其他顶点都有路径，则只需调用一次DFS/BFS函数</li><li>对于强连通图，从任一顶点出发都只需调用一次DFS/BFS函数</li></ul></li></ul><h3 id="3、最小生成树构造过程及算法（MST）">3、最小生成树构造过程及算法（MST）</h3><p>针对的是带权连通无向图</p><p>边的权值之和最小的生成树，就是最小生成树</p><p>普利姆算法（Prim）：</p><ul><li><p>时间复杂度为：O(|V|^2)  适合边稠密图</p></li><li><p>从某个顶点开始构建生成树，每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。</p></li></ul><p>克鲁斯卡尔算法（Kruskal）:</p><ul><li>时间复杂度为：O(|E|log2|E|)  适合边稀疏图</li><li>每次选择一条权值最小的边，使这两条边的两头连通（已经连通的不选），直到所有结点都连通</li></ul><h3 id="4、拓扑排序过程及算法">4、拓扑排序过程及算法</h3><h4 id="4-1、AOV网：">4.1、AOV网：</h4><ul><li>顶点代表活动，有向边&lt;Vi,Vj&gt;表示活动Vi必须先于Vj进行</li><li>AOV网一定是DAG图（有向无环图），不能有环。</li></ul><h4 id="4-2、拓扑排序">4.2、拓扑排序</h4><ol><li>从AOV网中选择一个没有前驱（入度为0）的顶点并输出</li><li>从网中删除该顶点和所有以它为起点的有向边</li><li>重复 1 和 2 直到当前的AOV网为空</li></ol><h4 id="4-3、逆拓扑排序">4.3、逆拓扑排序</h4><ol><li>从AOV网中选择一个没有后继（出度为0）的顶点并输出</li><li>从网中删除该顶点和所有以它为终点的有向边</li><li>重复 1 和 2 直到当前的AOV网为空</li></ol><p><strong>另一种实现方式：用DFS实现拓扑排序/逆拓扑排序</strong></p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 访问标记数组 */</span><br><span class="hljs-type">bool</span> visited[MAX_VERTEX_NUM];<br><br><span class="hljs-comment">/* 对图G进行深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(Graph G)</span><span class="hljs-comment">//主要是处理连通图多的情况</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<br>&#123;<br>visited[i] = FALSE;<span class="hljs-comment">//访问标记数组初始化</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; G.vexnum; ++v)<span class="hljs-comment">//从0号顶点开始遍历</span><br>&#123;<br><span class="hljs-keyword">if</span> (!visited[v])<span class="hljs-comment">//对每个连通分量调用一次BFS</span><br>&#123;<br><span class="hljs-built_in">DFS</span>(G, v);<span class="hljs-comment">//vi未访问过，从Vi开始BFS</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* 深度优先遍历 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//从顶点v出发，深度优先遍历图G</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">visit</span>(v); <span class="hljs-comment">//访问初始顶点v</span><br>visited[v] = TRUE;<span class="hljs-comment">//对v做已访问标记</span><br>    <span class="hljs-comment">//检测v所有邻接点</span><br>    <span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstNeighbor</span>(G,v); w &gt;=<span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextNeighbor</span>(G, v, w))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!visited[w])  <span class="hljs-comment">//w为v的尚未访问的邻接顶点</span><br>        &#123;<br>           <span class="hljs-built_in">DFS</span>(G,w);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//用在拓扑排序的主要改动</span><br>    cout &lt;&lt; v;<span class="hljs-comment">//输出顶点</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4、性质">4.4、性质</h4><ul><li>拓扑排序、逆拓扑排序序列可能不唯一</li><li>若图中有环，则不存在拓扑排序序列/逆拓扑排序序列</li></ul><h3 id="5、关键路径相关内容">5、关键路径相关内容</h3><h4 id="5-1、AOV网">5.1、AOV网</h4><p>在带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销</p><p>相关概念：</p><ul><li>在AOE网中仅有一个入度为0的顶点，称为开始顶点（源点），表示整个工程的开始；</li><li>也仅有一个出度为0的顶点，称为结束顶点（汇点），表示整个工程的结束</li><li>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为关键路径，而把关键路径上的活动称为关键活动</li></ul><h4 id="5-2、求解方法">5.2、求解方法</h4><ol><li>求所有事件的最早发生时间ve( ) 正序取最大值 （指的是结点）</li><li>求所有事件的最迟发生时间vl( ) 倒序取最小值（指的是结点）</li><li>求所有活动的最早发生时间e( )   （指的是边）从前往后算发出边的的结点值</li><li>求所有活动的最迟发生时间 l( )（指的是边）从后往前算  结点值减路径值</li><li>求所有活动的时间余量 d ( )  = （活动的最迟发生时间 - 活动的最早发生时间）<ol><li>d( i ) = 0的活动就是关键活动，由关键活动可得关键路径</li></ol></li></ol><h4 id="5-3、特性">5.3、特性</h4><ul><li>若关键活动耗时增加，则整个工期的工程将延长</li><li>缩短关键活动的时间，可以缩短整个工程的工期</li><li>当缩短到一定程度时，关键活动可能会变成非关键活动</li><li>可能有多条关键路径，只提高一条关键路径上的关键活动速度并不能缩短整个工程的工期，只有加快那些包括在所有关键路径上的关键活动才能达到缩短工期的目的</li></ul><h3 id="6、最短路径相关内容">6、最短路径相关内容</h3><h4 id="6-1、单源最短路径">6.1、单源最短路径</h4><h5 id="6-1-1、BFS算法（无权图）">6.1.1、BFS算法（无权图）</h5><p>对BFS算法进行修改：在visit一个顶点时，修改其最短路径长度d[ ]并在path[ ]记录前驱结点</p><h5 id="6-1-2、Dijkstra算法（带权图、无权图）">6.1.2、Dijkstra算法（带权图、无权图）</h5><p>就是上学路径问题，就是找到达学校路程最短的那条路</p><p>标记最短路径数组、最短路径长度数组、路径前驱数组</p><p>不适用于有负权值的带权图</p><h4 id="6-2、各顶点间的最短路径">6.2、各顶点间的最短路径</h4><p><strong>Floyd算法（带权图、无权图）</strong></p><p>可以解决带负权值的图</p><p>添加中转点</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//.....准备工作，初始化矩阵A和path</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; n; k++)<span class="hljs-comment">//考虑以Vk作为中转点</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-comment">//遍历整个矩阵，i为行号，j为列号</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A[i][j]&gt;A[i][k]+A[k][j]) <span class="hljs-comment">//如果以Vk为中转点的路径更短</span><br>            &#123;<br>                A[i][j] = A[i][k] + A[k][j];<span class="hljs-comment">//更新最短路径长度</span><br>                path[i][j] = k;<span class="hljs-comment">//中转点</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>注：以上算法均不能解决带负权回路的图</p><h3 id="7、与图的应用相关的递归算法">7、与图的应用相关的递归算法</h3><p>有向无环图：一个有向图中不存在环。简称DAG图</p><p>用来描述表达式：算数表达式用树的形式展示，合并相同层次的操作数和操作符</p><html><div class="box1">    <span class="leftline"></span>    <span class="text">更多内容请在评论区留言讨论</span>    <span class="rightline"></span></div></html>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git deploy 部署报错</title>
    <link href="/2022/11/29/Git-error/"/>
    <url>/2022/11/29/Git-error/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ssh_exchange_identification: Connection closed by remote host. fatal: Could not read from remote repository.</p></blockquote><span id="more"></span><h1>背景：</h1><p>今天部署到GitHub时，出现此错误。昨天还正常，今天突然这样。</p><h2 id="详细错误信息：">详细错误信息：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@192 hexo]# hexo deploy<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend dirs...<br><span class="hljs-meta prompt_"># </span><span class="language-bash">位于分支 master</span><br>无文件要提交，干净的工作区<br>ssh_exchange_identification: Connection closed by remote host<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br>Error: Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (/www/wwwroot/hexo/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:513:28)<br>    at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12)<br>[root@192 hexo]# <br></code></pre></td></tr></table></figure><h2 id="解析错误信息：">解析错误信息：</h2><p>错误信息翻译成中文后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">SSH交换识别:连接被远程主机关闭<br>致命的:无法从远程存储库读取。<br>请确保您拥有正确的访问权限<br>而且存储库已经存在。<br>致命错误。也许你可以在这里找到解决方案:https://hexo.io/docs/troubleshooting.html<br>错误:生成失败<br>at ChildProcess.&lt;anonymous&gt; (/www/wwwroot/hexo/node_modules/hexo-util/lib/spawn.js:51:21)<br>    at ChildProcess.emit (node:events:513:28)<br>    at Process.ChildProcess._handle.onexit (node:internal/child_process:293:12)<br></code></pre></td></tr></table></figure><p>通过以上可知：</p><p>系统连接不到GitHub，因此无法用SSH密钥进行识别。 ----&gt;   说明是网络问题。</p><h2 id="实践探索-解决过程：">实践探索 - 解决过程：</h2><ul><li>出现错误的时候，我又多次部署了几次，依然这样。</li><li>然后，我打开了手机热点，让电脑连接。</li><li>再次部署，部署成功。</li><li>然后我关闭热点，换回无线网。</li><li>再次部署，部署失败，无法连接，同样的错误。</li><li>再打开热点，再部署，这次用手机热点部署失败，依旧报这个错误。</li><li>关闭手机热点，再部署，部署成功…</li></ul><h2 id="总结">总结</h2><p>经过多次实践可知，这就是网络波动导致的问题，GitHub在国内连接本来就有时能连上有时连不上，而且我昨天部署过多次，都可以成功。这是今天突然发生的问题，而且我也没修改过其他东西，那么错误就不在自己这。</p><h2 id="解决方案">解决方案</h2><ol><li>尝试更换其他网络。</li><li>过一段时间再试。</li></ol>]]></content>
    
    
    <categories>
      
      <category>异常处理</category>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-自定义404文件</title>
    <link href="/2022/11/27/Hexo-404/"/>
    <url>/2022/11/27/Hexo-404/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo-自定义404文件</p></blockquote><span id="more"></span><html><div class="box1">         <span class="leftline"></span> <span class="text">正文部分</span> <span class="rightline"></span> </div></html><p>自定义404文件非常简单，你需要去source文件夹下，创建一个404文件夹，<a href="http://xn--index-ll6hm0je43ajq1b.md">然后创建index.md</a><br>然后写入文件头信息：</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">---<br>title: &#x27;404&#x27;<br>layout: false<br>permalink: /404.html<br>---<br>上面是文档标题，不使用主题布局，permalink: 是404页面必须的<br><br>这里把你写的404HTML代码复制过来就好了，注意不要外链引入相对地址的css，<br>不然容易在其他页面找不到引入的相关文件。<br>代码标签别有大换行，不然下面会被md识别成代码块，从而导致网页不完整。<br></code></pre></td></tr></table></figure><html><div class="box1">    <span class="leftline"></span>    <span class="text">更多内容请在评论区留言讨论</span>    <span class="rightline"></span></div></html>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub使用自己域名实现https</title>
    <link href="/2022/11/25/Github-https/"/>
    <url>/2022/11/25/Github-https/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo托管到GitHub并使用自己域名实现https。</p></blockquote><span id="more"></span><h1>过程</h1><h2 id="域名解析">域名解析</h2><p>以阿里云为例，新增解析：</p><p>记录类型主机记录记录值<br>CNAME@<a href="http://username.github.io">username.github.io</a><br>CNAMEwww<a href="http://username.github.io">username.github.io</a></p><h2 id="Github配置">Github配置</h2><p>然后去Github，在个人系统仓库设置里，找到GitHub Pages，在Custom domain里输入你新买的域名，保存。<br>在系统根目录Source下新增无后缀的CNAME文件，文件内写上你的新域名。<br>然后用git把项目更新托管到github<br>回到GitHub Pages，在<code>Custom domain</code>的DNS确认无误后，勾上下面的<code>Enforce HTTPS checkbox</code>，从而强制执行<code>HTTPS</code></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现中间有正文内容的水平线分割线</title>
    <link href="/2022/11/24/Post-style/"/>
    <url>/2022/11/24/Post-style/</url>
    
    <content type="html"><![CDATA[<blockquote><p>用html语法实现文章前提示中间有正文内容的水平分隔线。</p></blockquote><span id="more"></span><h2 id="代码实现">代码实现</h2><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">40px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>:flex;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>:space-between;</span><br><span class="language-css">    <span class="hljs-attribute">align-items</span>:center;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#00000000</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.leftline</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">2px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#257efa99</span>;</span><br><span class="language-css">    <span class="hljs-attribute">flex-grow</span>:<span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.rightline</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">2px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#257efa99</span>;</span><br><span class="language-css">    <span class="hljs-attribute">flex-grow</span>:<span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.text</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>:<span class="hljs-number">#257efa</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;leftline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>正文部分<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rightline&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：在markdown前添加即可</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现MAC风格的Markdown代码块</title>
    <link href="/2022/11/23/MAC-Markdown/"/>
    <url>/2022/11/23/MAC-Markdown/</url>
    
    <content type="html"><![CDATA[<blockquote><p>用html语法实现Markdown代码块MAC风格。</p></blockquote><span id="more"></span><h2 id="说明">说明</h2><p>用html语法实现Markdown代码块MAC风格，使用时只需要在代码块前粘贴这段代码即可；在typora里看不到效果，在VSCode和网页上可以看到。</p><h2 id="代码实现">代码实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.mac</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>:<span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">5px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>:<span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.b1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">background</span>:<span class="hljs-number">#E0443E</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.b2</span> &#123; <span class="hljs-attribute">background</span>:<span class="hljs-number">#DEA123</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.b3</span> &#123; <span class="hljs-attribute">background</span>:<span class="hljs-number">#1AAB29</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.warpper</span>&#123;</span><br><span class="language-css">        user-select: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">5px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>:auto;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    br &#123; user-select: none <span class="hljs-meta">!important</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.line</span> &#123; </span><br><span class="language-css">        <span class="hljs-attribute">position</span>: sticky;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">text-align</span><span class="hljs-selector-pseudo">:right</span> !important; </span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.gutter</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">26px</span>;</span><br><span class="language-css">        user-select: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: table-cell <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border</span>: none <span class="hljs-meta">!important</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;warpper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mac b1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mac b2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mac b3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Next主题日常使用</title>
    <link href="/2022/11/23/Next-use/"/>
    <url>/2022/11/23/Next-use/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo-Next主题日常使用操作指令</p></blockquote><span id="more"></span><html><div class="box1">    <span class="leftline"></span>    <span class="text">正文部分</span>    <span class="rightline"></span></div></html><h1>Next主题日常使用</h1><h2 id="一、分类和文章">一、分类和文章</h2><h3 id="1、创建分类页面">1、创建分类页面</h3><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page categories<br></code></pre></td></tr></table></figure><p>修改categories文件夹下的 <a href="http://index.md">index.md</a></p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">---<br><span class="hljs-attr">title</span>: 文章分类<br><span class="hljs-attr">date</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">11</span>-<span class="hljs-number">23</span> <span class="hljs-number">01</span>:<span class="hljs-number">03</span>:<span class="hljs-number">20</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;categories&quot;</span><br>---<br></code></pre></td></tr></table></figure><h3 id="2、创建标签页面">2、创建标签页面</h3><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page tags<br></code></pre></td></tr></table></figure><p>修改tags文件夹下的 <a href="http://index.md">index.md</a></p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 文章标签<br><span class="hljs-built_in">date</span>: 2022-11-23 01:03:20<br><span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;tags&quot;</span><br>---<br></code></pre></td></tr></table></figure><h3 id="3、创建关于页面">3、创建关于页面</h3><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>修改about文件夹下的 <a href="http://index.md">index.md</a></p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 关于<br><span class="hljs-built_in">date</span>: 2022-11-23 01:03:20<br><span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;about&quot;</span><br>---<br></code></pre></td></tr></table></figure><h3 id="4、创建文章">4、创建文章</h3><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new 新文章<br></code></pre></td></tr></table></figure><p>在_post文件夹下就出现了新文章了</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: 关于<br><span class="hljs-built_in">date</span>: 2022-11-23 01:03:20<br><span class="hljs-built_in">type</span>: <span class="hljs-string">&quot;about&quot;</span><br>---<br>我是摘要内容.<br>&lt;!-- more --&gt;<br>我是正文内容...<br><br>132123131321<br></code></pre></td></tr></table></figure><h2 id="二、运行Hexo">二、运行Hexo</h2><p>安装服务器：Hexo 3.0 把服务器独立成了个别模块，我们必须得在站点文件夹根目录下安装之后才能使用。<br>在命令行中打开我们的工作站文件夹，键入以下命令，以将 hexo-server 安装到我们的工作站文件夹：</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-server --save<br></code></pre></td></tr></table></figure><p>cd进网站根目录，</p><p>清除缓存文件</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>生成的静态网页以及相关资源</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>启动服务器</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>指定端口启动服务器</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server -p 5000<br></code></pre></td></tr></table></figure><h2 id="三、利用pm2让Hexo后台运行">三、利用<code>pm2</code>让Hexo后台运行</h2><p>1、安装：</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g pm2<br></code></pre></td></tr></table></figure><p>2、<strong>编写一个执行脚本 —— 在博客根目录下创建一个文件 run.js</strong></p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)<br><span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;hexo server -p 指定端口&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(error)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;exec error: $&#123;error&#125;&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stdout: $&#123;stdout&#125;&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;stderr: $&#123;stderr&#125;&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>3、使用pm2运行脚本 run.js</strong></p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start run.js<br></code></pre></td></tr></table></figure><p>停止进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 stop pm的保护进程<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><h2 id="四、PM2相关命令">四、PM2相关命令</h2><p>1.安装pm2</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install pm2 -g<br></code></pre></td></tr></table></figure><p>2.更新pm2</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 update<br></code></pre></td></tr></table></figure><p>3.启动进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 start bin/www pm2 start app.js<br></code></pre></td></tr></table></figure><p>4.重命名进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 start app.js --name pro1<br></code></pre></td></tr></table></figure><p>5.监控进程（当文件改变的时候，重启一个应用）</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 start app.js --watch<br></code></pre></td></tr></table></figure><p>6.结束指定pm2进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 stop www<br></code></pre></td></tr></table></figure><p>7.结束所有pm2进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 stop all<br></code></pre></td></tr></table></figure><p>8.删除指定pm2进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 delete www<br></code></pre></td></tr></table></figure><p>9.删除所有pm2进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 delete all<br></code></pre></td></tr></table></figure><p>10.列出所有用pm2启动的进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 list<br></code></pre></td></tr></table></figure><p>11.查看某个pm2进程具体情况</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 monit<br></code></pre></td></tr></table></figure><p>12.查看pm2所有进程占用的cpu和内存</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 show www<br></code></pre></td></tr></table></figure><p>13.显示指定pm2进程所有的信息</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 show www<br></code></pre></td></tr></table></figure><p>14.查看pm2所有进程的日志</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 logs<br></code></pre></td></tr></table></figure><p>15.查看pm2指定进程的日志</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 logs www<br></code></pre></td></tr></table></figure><p>16.json化日志</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 logs --json<br></code></pre></td></tr></table></figure><p>17.重新启动指定pm2进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 restart www<br></code></pre></td></tr></table></figure><p>18.重新启动所有pm2进程</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pm2 restart all<br></code></pre></td></tr></table></figure><h2 id="五、用git把项目托管到github">五、用git把项目托管到github</h2><p>打开github并登录:<br>点开个人信息----&gt; your repositories(你的存储库)----&gt; 点击新建(<a href="http://xn--xxxxx-fg1hyjh10j0vm.github.io">新建一个xxxxx.github.io</a>)<br>注意 这里xxxxx的仓库名必须和你的github账号名称相同,这里github默认只给这个名称的存储库提供免费域名</p><p>OK,存储库建立完成之后,需要将服务器中之前安装的git让其生成一个SSH密钥<br>(git和github仓库是默认通过这个密钥进行用户权限身份识别的)<br>在命令行中输入:</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>/ 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。/</p><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。</p><p>##输入以下两条检验是否输入正确:</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>生成密钥指令 :</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>然后一直回车，直到出现你能输入命令为止</p><p>这时能看到存放位置：<code>root/_ssh/rsa</code></p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。<br>把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br>进入目录，打开公钥文件，复制内容</p><p>输入命令行:</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim id_rsa.pub <br></code></pre></td></tr></table></figure><p>然后切换到本机的github网页,在github网页用户信息 —&gt; settings ----- &gt; SSH &amp; GPJ密钥选项 ----&gt;<br>点击New SSH key把你的id_rsa.pub里面的信息复制进去。</p><p>在终端查看连接是否成功</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>将hexo部署到GitHub</p><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上</p><p>进入hexo部署的根目录修改<code> _config.yml</code>。</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/YourgithubName/YourgithubName.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>###这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>###然后执行:</p><p>//清除缓存,建议更新代码前都执行下此操作。</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><p>生成静态文章，可以用 hexo g缩写</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>部署文章，可以用hexo d缩写</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>然后会提示输入github登录名和密码</p><p>输入成功后就开始部署了，但是我在这里出错了<code>err: Error: Spawn failed</code></p><p>然后把repo地址从Http改为SSH的方式</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br><span class="hljs-built_in">type</span>: git<br>repo: git@github.com:yourname/yourname.github.io.git<br>branch: master<br></code></pre></td></tr></table></figure><p>然后再清除缓存，静态文章，部署文章，就成功了。</p><p>部署成功后你就可以在<a href="http://yourname.github.xn--io-iy2cla06b6j33bt6mz0cz36a2s1ehlb">http://yourname.github.io中看到你的个人博客了</a>…(可能需要等待一段时间)</p><html><div class="box1">    <span class="leftline"></span>    <span class="text">更多内容请在评论区留言讨论</span>    <span class="rightline"></span></div></html>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Next主题配置文件</title>
    <link href="/2022/11/22/Hexo-Next/"/>
    <url>/2022/11/22/Hexo-Next/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo-Next主题配置文件注释翻译</p></blockquote><span id="more"></span><html><div class="box1">         <span class="leftline"></span> <span class="text">正文部分</span> <span class="rightline"></span> </div></html><p>Hexo-Next主题配置文件主要注释翻译：</p><html><div class="warpper">    <div class="mac b1"></div>    <div class="mac b2"></div>    <div class="mac b3"></div></div></html><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ===============================================================</span><br><span class="hljs-comment"># 建议使用Alternate Theme Config来配置NexT</span><br><span class="hljs-comment"># 修改此文件可能导致合并冲突</span><br><span class="hljs-comment"># 参见网址: https://theme-next.js.org/docs/getting-started/configuration</span><br><span class="hljs-comment"># ===============================================================</span><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 主题核心配置设置</span><br><span class="hljs-comment"># 参见网址: https://theme-next.js.org/docs/theme-settings/</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 允许缓存内容生成。</span><br><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在hexo生成后删除不必要的文件。</span><br><span class="hljs-attr">minify:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 定义自定义文件路径。</span><br><span class="hljs-comment"># 在站点目录“source/_data”中创建您的自定义文件，并在下面取消所需文件的注释。</span><br><span class="hljs-attr">custom_file_path:</span><br>  <span class="hljs-comment">#head: source/_data/head.njk</span><br>  <span class="hljs-comment">#header: source/_data/header.njk</span><br>  <span class="hljs-comment">#sidebar: source/_data/sidebar.njk</span><br>  <span class="hljs-comment">#postMeta: source/_data/post-meta.njk</span><br>  <span class="hljs-comment">#postBodyEnd: source/_data/post-body-end.njk</span><br>  <span class="hljs-comment">#footer: source/_data/footer.njk</span><br>  <span class="hljs-comment">#bodyEnd: source/_data/body-end.njk</span><br>  <span class="hljs-comment">#variable: source/_data/variables.styl</span><br>  <span class="hljs-comment">#mixin: source/_data/mixins.styl</span><br>  <span class="hljs-comment">#style: source/_data/styles.styl</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 方案设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 方案</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Muse</span><br><span class="hljs-comment">#scheme: Mist</span><br><span class="hljs-comment">#scheme: Pisces</span><br><span class="hljs-comment">#scheme: Gemini</span><br><br><span class="hljs-comment"># 夜间模式</span><br><span class="hljs-attr">darkmode:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 网站信息设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">favicon:</span><br>  <span class="hljs-attr">small:</span> <span class="hljs-string">/images/favicon-16x16-next.png</span><br>  <span class="hljs-attr">medium:</span> <span class="hljs-string">/images/favicon-32x32-next.png</span><br>  <span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/images/apple-touch-icon-next.png</span><br>  <span class="hljs-attr">safari_pinned_tab:</span> <span class="hljs-string">/images/logo.svg</span><br>  <span class="hljs-comment">#android_manifest: /manifest.json</span><br><br><span class="hljs-comment"># 自定义标志(警告:不支持Mist方案)</span><br><span class="hljs-attr">custom_logo:</span> <span class="hljs-comment">#/uploads/custom-logo.jpg</span><br><br><span class="hljs-comment"># 知识共享4.0国际许可。</span><br><span class="hljs-comment"># See: https://creativecommons.org/about/cclicenses/</span><br><span class="hljs-attr">creative_commons:</span><br>  <span class="hljs-comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span><br>  <span class="hljs-attr">license:</span> <span class="hljs-string">by-nc-sa</span><br>  <span class="hljs-comment"># Available values: big | small</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-string">small</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">post:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果您喜欢CC许可的翻译版本，您可以设置语言值，例如. deed.zh</span><br>  <span class="hljs-comment"># CC许可有39种语言，您可以在https://creativecommons.org上找到您需要的具体和正确的缩写</span><br>  <span class="hljs-attr">language:</span><br><br><span class="hljs-comment"># 打开图形设置</span><br><span class="hljs-comment"># See: https://hexo.io/docs/helpers#open-graph</span><br><span class="hljs-attr">open_graph:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">options:</span><br>    <span class="hljs-comment">#twitter_card: &lt;twitter:card&gt;</span><br>    <span class="hljs-comment">#twitter_id: &lt;twitter:creator&gt;</span><br>    <span class="hljs-comment">#twitter_site: &lt;twitter:site&gt;</span><br>    <span class="hljs-comment">#twitter_image: &lt;twitter:image&gt;</span><br>    <span class="hljs-comment">#google_plus: &lt;g+:profile_link&gt;</span><br>    <span class="hljs-comment">#fb_admins: &lt;fb:admin_id&gt;</span><br>    <span class="hljs-comment">#fb_app_id: &lt;fb:app_id&gt;</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 菜单设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Usage: `Key: /link/ || icon`</span><br><span class="hljs-comment"># Key是菜单项的名称。如果此项的翻译可用，则将加载翻译后的文本，否则将使用Key名称。Key区分大小写。</span><br><span class="hljs-comment"># &#x27; || &#x27;分隔符前的值是目标链接，&#x27; || &#x27;分隔符后的值是字体Awesome图标的名称。</span><br><span class="hljs-comment"># 外部url应该以http://或https://开头</span><br><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-user</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">/schedule/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-calendar</span><br>  <span class="hljs-attr">sitemap:</span> <span class="hljs-string">/sitemap.xml</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-sitemap</span><br>  <span class="hljs-attr">commonweal:</span> <span class="hljs-string">/404/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-heartbeat</span><br><br><span class="hljs-comment"># 启用/禁用菜单图标/项目徽章。</span><br><span class="hljs-attr">menu_settings:</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">badges:</span> <span class="hljs-literal">false</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 侧栏设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/sidebar</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">sidebar:</span><br>  <span class="hljs-comment"># 侧边栏的位置。</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>  <span class="hljs-comment">#position: right</span><br><br>  <span class="hljs-comment"># 手动定义侧边栏宽度。如果注释，将是默认的:</span><br>  <span class="hljs-comment"># Muse | Mist: 320</span><br>  <span class="hljs-comment"># Pisces | Gemini: 240</span><br>  <span class="hljs-comment">#width: 300</span><br><br>  <span class="hljs-comment"># 侧边栏显示(仅适用于Muse | Mist)，可用值:</span><br>  <span class="hljs-comment">#  - post    expand on posts automatically. Default.</span><br>  <span class="hljs-comment">#  - always  expand for all pages automatically.</span><br>  <span class="hljs-comment">#  - hide    expand only when click on the sidebar toggle icon.</span><br>  <span class="hljs-comment">#  - remove  totally remove sidebar including sidebar toggle.</span><br>  <span class="hljs-attr">display:</span> <span class="hljs-string">post</span><br><br>  <span class="hljs-comment"># 侧边栏内边距(以像素为单位)。</span><br>  <span class="hljs-attr">padding:</span> <span class="hljs-number">18</span><br>  <span class="hljs-comment"># 从顶部菜单栏的侧边栏偏移(以像素计)(只针对 Pisces | Gemini).</span><br>  <span class="hljs-attr">offset:</span> <span class="hljs-number">12</span><br><br><span class="hljs-comment"># 侧边栏头像</span><br><span class="hljs-attr">avatar:</span><br>  <span class="hljs-comment"># 替换默认图像并在这里设置url。</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-comment">#/images/avatar.gif</span><br>  <span class="hljs-comment"># 如果为true，头像将以圆圈的形式显示。</span><br>  <span class="hljs-attr">rounded:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果为true，头像将随着光标旋转。</span><br>  <span class="hljs-attr">rotated:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 侧边栏中的文章/类别/标签。</span><br><span class="hljs-attr">site_state:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 社交网站</span><br><span class="hljs-comment"># Usage: `Key: permalink || icon`</span><br><span class="hljs-comment"># Key是显示给终端用户的链接标签。</span><br><span class="hljs-comment"># &#x27; || &#x27;分隔符前的值是目标永久链接，&#x27; || &#x27;分隔符后的值是字体Awesome图标的名称。</span><br><span class="hljs-attr">social:</span><br>  <span class="hljs-comment">#GitHub: https://github.com/yourname || fab fa-github</span><br>  <span class="hljs-comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br>  <span class="hljs-comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span><br>  <span class="hljs-comment">#Google: https://plus.google.com/yourname || fab fa-google</span><br>  <span class="hljs-comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span><br>  <span class="hljs-comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br>  <span class="hljs-comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br>  <span class="hljs-comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span><br>  <span class="hljs-comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span><br>  <span class="hljs-comment">#Skype: skype:yourname?call|chat || fab fa-skype</span><br><br><span class="hljs-attr">social_icons:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">icons_only:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">transition:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 博客滚动</span><br><span class="hljs-attr">links_settings:</span><br>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-globe</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Links</span><br>  <span class="hljs-comment"># 可用值: block | inline</span><br>  <span class="hljs-attr">layout:</span> <span class="hljs-string">block</span><br><br><span class="hljs-attr">links:</span><br>  <span class="hljs-comment">#Title: https://example.com</span><br><br><span class="hljs-comment"># 侧边栏中的目录</span><br><span class="hljs-comment"># Front-matter variable (nonsupport wrap expand_all).</span><br><span class="hljs-attr">toc:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 自动添加列表数量到文章目录中。</span><br>  <span class="hljs-attr">number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 如果为true，如果标题宽度大于侧边栏宽度，则所有单词将放在下一行。</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果为true，将显示帖子中所有级别的文章目录，而不是激活的部分</span><br>  <span class="hljs-attr">expand_all:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 文章目录生成的最大深度。</span><br>  <span class="hljs-attr">max_depth:</span> <span class="hljs-number">6</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 页脚设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/footer</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 在页脚中显示多语言切换器。</span><br><span class="hljs-attr">language_switcher:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-comment"># 指定网站设置的年份。如果没有定义，则使用当前年份。</span><br>  <span class="hljs-comment"># since: 2021</span><br><br>  <span class="hljs-comment"># 年份和版权信息之间的图标。</span><br>  <span class="hljs-attr">icon:</span><br>    <span class="hljs-comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-heart</span><br>    <span class="hljs-comment"># 如果你想要图标动起来，将它设置为true。</span><br>    <span class="hljs-attr">animated:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 改变图标的颜色，使用十六进制代码。</span><br>    <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#ff0000&quot;</span><br><br>  <span class="hljs-comment"># 如果没有定义， 将使用Hexo的配置文件`_config.yml`中的`author`</span><br>  <span class="hljs-attr">copyright:</span><br><br>  <span class="hljs-comment"># 由 Hexo &amp; NexT 强力驱动</span><br>  <span class="hljs-attr">powered:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment"># 面向中国用户的公安ICP备案信息. See: https://beian.miit.gov.cn, http://www.beian.gov.cn</span><br>  <span class="hljs-attr">beian:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">icp:</span><br>    <span class="hljs-comment"># 公安ICP备案数字</span><br>    <span class="hljs-attr">gongan_id:</span><br>    <span class="hljs-comment"># 公安ICP备案全数字</span><br>    <span class="hljs-attr">gongan_num:</span><br>    <span class="hljs-comment"># 备案信息图标. See: http://www.beian.gov.cn/portal/download</span><br>    <span class="hljs-attr">gongan_icon_url:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 文章设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/posts</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 自动撷取正文中的描述作为摘要文本。</span><br><span class="hljs-attr">excerpt_description:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 阅读更多按钮</span><br><span class="hljs-comment"># 如果为true，则在摘录部分将显示“阅读更多”按钮。</span><br><span class="hljs-attr">read_more_btn:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 文章显示设置</span><br><span class="hljs-attr">post_meta:</span><br>  <span class="hljs-attr">item_text:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">created_at:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">updated_at:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">another_day:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 文章字数统计设置</span><br><span class="hljs-comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 使用图标代替符号#来表示文章底部的标签</span><br><span class="hljs-attr">tag_icon:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 捐赠(赞助)设置</span><br><span class="hljs-comment"># Front-matter variable (nonsupport animation).</span><br><span class="hljs-attr">reward_settings:</span><br>  <span class="hljs-comment"># 如果为true，默认情况下每篇文章都会显示一个捐赠按钮。</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">animation:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment">#comment: Buy me a coffee</span><br><br><span class="hljs-attr">reward:</span><br>  <span class="hljs-comment">#wechatpay: /images/wechatpay.png</span><br>  <span class="hljs-comment">#alipay: /images/alipay.png</span><br>  <span class="hljs-comment">#paypal: /images/paypal.png</span><br>  <span class="hljs-comment">#bitcoin: /images/bitcoin.png</span><br><br><span class="hljs-comment"># 通过Telegram Channel、Twitter等订阅。</span><br><span class="hljs-comment"># Usage: `Key: permalink || icon` (Font Awesome)</span><br><span class="hljs-attr">follow_me:</span><br>  <span class="hljs-comment">#Twitter: https://twitter.com/username || fab fa-twitter</span><br>  <span class="hljs-comment">#Telegram: https://t.me/channel_name || fab fa-telegram</span><br>  <span class="hljs-comment">#WeChat: /images/wechat_channel.jpg || fab fa-weixin</span><br>  <span class="hljs-comment">#RSS: /atom.xml || fa fa-rss</span><br><br><span class="hljs-comment"># 相关热门帖子</span><br><span class="hljs-comment"># Dependencies: https://github.com/sergeyzwezdin/hexo-related-posts</span><br><span class="hljs-attr">related_posts:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-comment"># 自定义标题，留空以使用默认标题</span><br>  <span class="hljs-attr">display_in_home:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 文章编辑</span><br><span class="hljs-comment"># 轻松地在线浏览和编辑博客源代码。</span><br><span class="hljs-attr">post_edit:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name/</span> <span class="hljs-comment"># Link for view source</span><br>  <span class="hljs-comment">#url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/ # Link for fork &amp; edit</span><br><br><span class="hljs-comment"># 如果存在，在文章页脚中显示上一篇文章和下一篇文章</span><br><span class="hljs-comment"># Available values: left | right | false</span><br><span class="hljs-attr">post_navigation:</span> <span class="hljs-string">left</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 自定义页面设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/custom-pages</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 标签页的标签云设置。</span><br><span class="hljs-attr">tagcloud:</span><br>  <span class="hljs-attr">min:</span> <span class="hljs-number">12</span> <span class="hljs-comment"># Minimum font size in px</span><br>  <span class="hljs-attr">max:</span> <span class="hljs-number">30</span> <span class="hljs-comment"># Maximum font size in px</span><br>  <span class="hljs-attr">amount:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># Total amount of tags</span><br>  <span class="hljs-attr">orderby:</span> <span class="hljs-string">name</span> <span class="hljs-comment"># Order of tags</span><br>  <span class="hljs-attr">order:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># Sort order</span><br><br><span class="hljs-comment"># 谷歌日历</span><br><span class="hljs-comment"># 通过日历页面向他人分享您最近的日程安排。</span><br><span class="hljs-attr">calendar:</span><br>  <span class="hljs-attr">calendar_id:</span> <span class="hljs-string">&lt;required&gt;</span> <span class="hljs-comment"># Your Google account E-Mail</span><br>  <span class="hljs-attr">api_key:</span> <span class="hljs-string">&lt;required&gt;</span><br>  <span class="hljs-attr">orderBy:</span> <span class="hljs-string">startTime</span><br>  <span class="hljs-attr">showLocation:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">offsetMax:</span> <span class="hljs-number">72</span> <span class="hljs-comment"># Time Range</span><br>  <span class="hljs-attr">offsetMin:</span> <span class="hljs-number">4</span> <span class="hljs-comment"># Time Range</span><br>  <span class="hljs-attr">showDeleted:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">singleEvents:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">maxResults:</span> <span class="hljs-number">250</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 杂项主题设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/miscellaneous</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 预连接字体和插件的CDN。</span><br><span class="hljs-comment"># For more information: https://www.w3.org/TR/resource-hints/#preconnect</span><br><span class="hljs-attr">preconnect:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 设置文章/页面中的文本对齐方式。</span><br><span class="hljs-attr">text_align:</span><br>  <span class="hljs-comment"># Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br>  <span class="hljs-attr">desktop:</span> <span class="hljs-string">justify</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-string">justify</span><br><br><span class="hljs-comment"># 在宽度较窄的设备上减少填充/边距缩进。</span><br><span class="hljs-attr">mobile_layout_economy:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 浏览器标题面板颜色。</span><br><span class="hljs-attr">theme_color:</span><br>  <span class="hljs-attr">light:</span> <span class="hljs-string">&quot;#222&quot;</span><br>  <span class="hljs-attr">dark:</span> <span class="hljs-string">&quot;#222&quot;</span><br><br><span class="hljs-comment"># 覆盖浏览器的默认行为。</span><br><span class="hljs-attr">body_scrollbar:</span><br>  <span class="hljs-comment"># 将滚动条放置在内容上。</span><br>  <span class="hljs-attr">overlay:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 即使内容没有溢出，也要显示滚动条。</span><br>  <span class="hljs-attr">stable:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-comment"># Highlight代码主题</span><br>  <span class="hljs-comment"># All available themes: https://theme-next.js.org/highlight/</span><br>  <span class="hljs-attr">theme:</span><br>    <span class="hljs-attr">light:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">dark:</span> <span class="hljs-string">stackoverflow-dark</span><br>  <span class="hljs-attr">prism:</span><br>    <span class="hljs-attr">light:</span> <span class="hljs-string">prism</span><br>    <span class="hljs-attr">dark:</span> <span class="hljs-string">prism-dark</span><br>  <span class="hljs-comment"># 在代码块上添加复制按钮</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># Available values: default | flat | mac</span><br>    <span class="hljs-attr">style:</span> <span class="hljs-string">mac</span><br><br><span class="hljs-attr">back2top:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 侧边栏的回到顶部。</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 回到顶部的按钮上显示百分比</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 阅读进度条</span><br><span class="hljs-attr">reading_progress:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Available values: left | right</span><br>  <span class="hljs-attr">start_at:</span> <span class="hljs-string">left</span><br>  <span class="hljs-comment"># Available values: top | bottom</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">reversed:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#37c6c0&quot;</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-string">3px</span><br><br><span class="hljs-comment"># 书签支持</span><br><span class="hljs-attr">bookmark:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 自定义书签的颜色。</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#222&quot;</span><br>  <span class="hljs-comment"># 如果为自动，则在关闭页面或单击书签图标时保存阅读进度。</span><br>  <span class="hljs-comment"># 如果是手动的，只能通过点击书签图标来保存。</span><br>  <span class="hljs-attr">save:</span> <span class="hljs-string">auto</span><br><br><span class="hljs-comment"># “在GitHub上关注我”的横幅。</span><br><span class="hljs-attr">github_banner:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">permalink:</span> <span class="hljs-string">https://github.com/yourname</span><br>  <span class="hljs-attr">title:</span> <span class="hljs-string">Follow</span> <span class="hljs-string">me</span> <span class="hljs-string">on</span> <span class="hljs-string">GitHub</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 字体设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 在谷歌字体上查找字体 (https://fonts.google.com)</span><br><span class="hljs-comment"># 这里设置的所有字体都将具有以下样式:</span><br><span class="hljs-comment">#   light | light italic | normal | normal italic | bold | bold italic</span><br><span class="hljs-comment"># 注意设置过多的字体会导致网站运行缓慢</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># Web安全字体推荐用于&#x27; global &#x27;(和&#x27; title &#x27;):</span><br><span class="hljs-comment"># Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 字体主机的Uri, e.g. https://fonts.googleapis.com (Default).</span><br>  <span class="hljs-attr">host:</span><br><br>  <span class="hljs-comment"># 字体选项:</span><br>  <span class="hljs-comment"># `external: true` 将从上面的&#x27; host &#x27;加载这个字体族。</span><br>  <span class="hljs-comment"># `family: Times New Roman`. 没有任何引号</span><br>  <span class="hljs-comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><br>  <span class="hljs-comment"># 用于&lt;body&gt;内所有元素的全局字体设置。</span><br>  <span class="hljs-attr">global:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span> <span class="hljs-string">Lato</span><br>    <span class="hljs-attr">size:</span><br><br>  <span class="hljs-comment"># 网站标题的字体设置(.site-title)。</span><br>  <span class="hljs-attr">title:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br>    <span class="hljs-attr">size:</span><br><br>  <span class="hljs-comment"># 标题的字体设置 (&lt;h1&gt; to &lt;h6&gt;).</span><br>  <span class="hljs-attr">headings:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br>    <span class="hljs-attr">size:</span><br><br>  <span class="hljs-comment"># 文章的字体设置 (.post-body).</span><br>  <span class="hljs-attr">posts:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br><br>  <span class="hljs-comment"># &lt;code&gt;和代码块的字体设置&lt;/code&gt;</span><br>  <span class="hljs-attr">codes:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">family:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># SEO Settings</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/theme-settings/seo</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 如果为true，站点-subtitle将被添加到索引页面。</span><br><span class="hljs-comment"># 记得设置你的网站-副标题 in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span><br><span class="hljs-attr">index_with_subtitle:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 自动添加外部URL与Base64加密和解密。</span><br><span class="hljs-attr">exturl:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 如果为true，则每个外部URL将附加一个图标</span><br><span class="hljs-attr">exturl_icon:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Google Webmaster tools verification.</span><br><span class="hljs-comment"># See: https://developers.google.com/search</span><br><span class="hljs-attr">google_site_verification:</span><br><br><span class="hljs-comment"># 必应网站管理员工具验证。</span><br><span class="hljs-comment"># See: https://www.bing.com/webmasters</span><br><span class="hljs-attr">bing_site_verification:</span><br><br><span class="hljs-comment"># Yandex Webmaster tools verification.</span><br><span class="hljs-comment"># See: https://webmaster.yandex.ru</span><br><span class="hljs-attr">yandex_site_verification:</span><br><br><span class="hljs-comment"># Baidu Webmaster tools verification.</span><br><span class="hljs-comment"># See: https://ziyuan.baidu.com/site</span><br><span class="hljs-attr">baidu_site_verification:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 第三方插件 &amp; 服务设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/</span><br><span class="hljs-comment"># More plugins: https://github.com/next-theme/awesome-next</span><br><span class="hljs-comment"># 您可能需要安装相应的依赖包</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 数学公式渲染支持</span><br><span class="hljs-comment"># 警告:请根据文档安装/卸载相关渲染器。</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span><br><span class="hljs-comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span><br><span class="hljs-attr">math:</span><br>  <span class="hljs-comment"># Default (false) will load mathjax / katex script on demand.</span><br>  <span class="hljs-comment"># That is it only render those page which has `mathjax: true` in front-matter.</span><br>  <span class="hljs-comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span><br>  <span class="hljs-attr">every_page:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-attr">mathjax:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Available values: none | ams | all</span><br>    <span class="hljs-attr">tags:</span> <span class="hljs-string">none</span><br><br>  <span class="hljs-attr">katex:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br>    <span class="hljs-attr">copy_tex:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 在您的网站上轻松启用快速Ajax导航。</span><br><span class="hljs-comment"># For more information: https://github.com/next-theme/pjax</span><br><span class="hljs-attr">pjax:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># fantybox是一个工具，它提供了一种漂亮而优雅的方式为图像添加缩放功能。</span><br><span class="hljs-comment"># For more information: https://fancyapps.com/fancybox/</span><br><span class="hljs-attr">fancybox:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># A JavaScript library for zooming images like Medium.</span><br><span class="hljs-comment"># Warning: Do not enable both `fancybox` and `mediumzoom`.</span><br><span class="hljs-comment"># For more information: https://medium-zoom.francoischalifour.com</span><br><span class="hljs-attr">mediumzoom:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># 惰性加载图片的香草JavaScript插件。</span><br><span class="hljs-comment"># For more information: https://apoorv.pro/lozad.js/demo/</span><br><span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Pangu Support</span><br><span class="hljs-comment"># For more information: https://github.com/vinta/pangu.js</span><br><span class="hljs-comment"># Server-side plugin: https://github.com/next-theme/hexo-pangu</span><br><span class="hljs-attr">pangu:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Quicklink Support</span><br><span class="hljs-comment"># For more information: https://getquick.link</span><br><span class="hljs-comment"># Front-matter variable (nonsupport home archive).</span><br><span class="hljs-attr">quicklink:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># 主页和存档页面可以通过下面的主页和存档选项进行控制。</span><br>  <span class="hljs-comment"># 此配置项独立于“enable”。</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">archive:</span> <span class="hljs-literal">false</span><br><br>  <span class="hljs-comment"># Default (true)将在加载事件触发后初始化quicklink。</span><br>  <span class="hljs-attr">delay:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 自定义浏览器必须执行预取的时间(以毫秒为单位)。</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-number">3000</span><br>  <span class="hljs-comment"># Default (true)将尝试使用fetch() API，如果支持(而不是link[rel=prefetch])。</span><br>  <span class="hljs-attr">priority:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 评论设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/comments</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 多评论系统支持</span><br><span class="hljs-attr">comments:</span><br>  <span class="hljs-comment"># Available values: tabs | buttons</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">tabs</span><br>  <span class="hljs-comment"># 选择一个默认显示的评论系统。</span><br>  <span class="hljs-comment"># Available values: disqus | disqusjs | changyan | livere | gitalk | utterances</span><br>  <span class="hljs-attr">active:</span><br>  <span class="hljs-comment"># 设置&#x27; true &#x27;意味着记住访问者选择的评论系统。</span><br>  <span class="hljs-attr">storage:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 惰性加载所有评论系统。</span><br>  <span class="hljs-attr">lazyload:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Modify texts or order for any naves, here are some examples.</span><br>  <span class="hljs-attr">nav:</span><br>    <span class="hljs-comment">#disqus:</span><br>    <span class="hljs-comment">#  text: Load Disqus</span><br>    <span class="hljs-comment">#  order: -1</span><br>    <span class="hljs-comment">#gitalk:</span><br>    <span class="hljs-comment">#  order: -2</span><br><br><span class="hljs-comment"># Disqus</span><br><span class="hljs-comment"># For more information: https://disqus.com</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">shortname:</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># DisqusJS</span><br><span class="hljs-comment"># For more information: https://disqusjs.skk.moe</span><br><span class="hljs-attr">disqusjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># API Endpoint of Disqus API (https://disqus.com/api/docs/).</span><br>  <span class="hljs-comment"># 如果能够连接到Disqus api，请将api保留为空。否则需要反向代理。</span><br>  <span class="hljs-comment"># For example:</span><br>  <span class="hljs-comment"># api: https://disqus.skk.moe/disqus/</span><br>  <span class="hljs-attr">api:</span><br>  <span class="hljs-attr">apikey:</span> <span class="hljs-comment"># Register new application from https://disqus.com/api/applications/</span><br>  <span class="hljs-attr">shortname:</span> <span class="hljs-comment"># See: https://disqus.com/admin/settings/general/</span><br><br><span class="hljs-comment"># Changyan</span><br><span class="hljs-comment"># For more information: https://changyan.kuaizhan.com</span><br><span class="hljs-attr">changyan:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">appid:</span><br>  <span class="hljs-attr">appkey:</span><br><br><span class="hljs-comment"># LiveRe comments system</span><br><span class="hljs-comment"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="hljs-attr">livere_uid:</span> <span class="hljs-comment"># &lt;your_uid&gt;</span><br><br><span class="hljs-comment"># Gitalk</span><br><span class="hljs-comment"># For more information: https://gitalk.github.io</span><br><span class="hljs-attr">gitalk:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">github_id:</span> <span class="hljs-comment"># GitHub repo owner</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-comment"># Repository name to store issues</span><br>  <span class="hljs-attr">client_id:</span> <span class="hljs-comment"># GitHub Application Client ID</span><br>  <span class="hljs-attr">client_secret:</span> <span class="hljs-comment"># GitHub Application Client Secret</span><br>  <span class="hljs-attr">admin_user:</span> <span class="hljs-comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br>  <span class="hljs-attr">distraction_free_mode:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Facebook-like distraction free mode</span><br>  <span class="hljs-comment"># When the official proxy is not available, you can change it to your own proxy address</span><br>  <span class="hljs-attr">proxy:</span> <span class="hljs-string">https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token</span> <span class="hljs-comment"># This is official proxy address</span><br>  <span class="hljs-comment"># Gitalk的显示语言取决于用户的浏览器或系统环境</span><br>  <span class="hljs-comment"># 如果希望每个访问站点的人都看到统一的语言，可以设置强制语言值</span><br>  <span class="hljs-comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br>  <span class="hljs-attr">language:</span><br><br><span class="hljs-comment"># Utterances</span><br><span class="hljs-comment"># For more information: https://utteranc.es</span><br><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">user-name/repo-name</span> <span class="hljs-comment"># Github repository owner and name</span><br>  <span class="hljs-comment"># Available values: pathname | url | title | og:title</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br><br><span class="hljs-comment"># Isso</span><br><span class="hljs-comment"># For more information: https://posativ.org/isso/</span><br><span class="hljs-attr">isso:</span> <span class="hljs-comment"># &lt;data_isso&gt;</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 文章工具 &amp; 内容分享服务</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/post-widgets</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 每篇文章的星级支持。</span><br><span class="hljs-comment"># To get your ID visit https://widgetpack.com</span><br><span class="hljs-attr">rating:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">id:</span>     <span class="hljs-comment"># &lt;app_id&gt;</span><br>  <span class="hljs-attr">color:</span>  <span class="hljs-string">&quot;#fc6423&quot;</span><br><br><span class="hljs-comment"># AddThis Share. See: https://www.addthis.com</span><br><span class="hljs-comment"># Go to https://www.addthis.com/dashboard to customize your tools.</span><br><span class="hljs-attr">add_this_id:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 统计与分析</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/statistics-and-analytics</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Google Analytics</span><br><span class="hljs-comment"># See: https://analytics.google.com</span><br><span class="hljs-attr">google_analytics:</span><br>  <span class="hljs-attr">tracking_id:</span> <span class="hljs-comment"># &lt;app_id&gt;</span><br>  <span class="hljs-comment"># 默认情况下，NexT会在你的站点上加载一个外部gtag.js脚本。</span><br>  <span class="hljs-comment"># 如果您只需要页面浏览量功能，请将以下选项设置为true以获得更好的性能。</span><br>  <span class="hljs-attr">only_pageview:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Baidu Analytics</span><br><span class="hljs-comment"># See: https://tongji.baidu.com</span><br><span class="hljs-attr">baidu_analytics:</span> <span class="hljs-comment"># &lt;app_id&gt;</span><br><br><span class="hljs-comment"># Growingio Analytics</span><br><span class="hljs-comment"># See: https://www.growingio.com</span><br><span class="hljs-attr">growingio_analytics:</span> <span class="hljs-comment"># &lt;project_id&gt;</span><br><br><span class="hljs-comment"># Cloudflare Web Analytics</span><br><span class="hljs-comment"># See: https://www.cloudflare.com/web-analytics/</span><br><span class="hljs-attr">cloudflare_analytics:</span><br><br><span class="hljs-comment"># Microsoft Clarity Analytics</span><br><span class="hljs-comment"># See: https://clarity.microsoft.com/</span><br><span class="hljs-attr">clarity_analytics:</span> <span class="hljs-comment"># &lt;project_id&gt;</span><br><br><span class="hljs-comment"># 显示每个文章的访问量。</span><br><span class="hljs-comment"># You can visit https://www.leancloud.cn to get AppID and AppKey.</span><br><span class="hljs-attr">leancloud_visitors:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">app_id:</span> <span class="hljs-comment"># &lt;your app id&gt;</span><br>  <span class="hljs-attr">app_key:</span> <span class="hljs-comment"># &lt;your app key&gt;</span><br>  <span class="hljs-comment"># Required for apps from CN region</span><br>  <span class="hljs-attr">server_url:</span> <span class="hljs-comment"># &lt;your server url&gt;</span><br>  <span class="hljs-comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span><br>  <span class="hljs-comment"># 如果你不关心leancloud counter的安全性，只想直接使用它</span><br>  <span class="hljs-comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span><br>  <span class="hljs-attr">security:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 另一个显示每个文章的访问量的工具。</span><br><span class="hljs-comment"># Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span><br><span class="hljs-comment"># Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span><br><span class="hljs-attr">firestore:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">collection:</span> <span class="hljs-string">articles</span> <span class="hljs-comment"># 必需的, 用于访问firestore数据库的字符串集合名称</span><br>  <span class="hljs-attr">apiKey:</span> <span class="hljs-comment"># 必需的</span><br>  <span class="hljs-attr">projectId:</span> <span class="hljs-comment"># 必需的</span><br><br><span class="hljs-comment"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="hljs-comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="hljs-attr">busuanzi_count:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">total_visitors:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_visitors_icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-user</span><br>  <span class="hljs-attr">total_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_views_icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-eye</span><br>  <span class="hljs-attr">post_views:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post_views_icon:</span> <span class="hljs-string">far</span> <span class="hljs-string">fa-eye</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 搜索服务</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/search-services</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Algolia搜索</span><br><span class="hljs-comment"># For more information: https://www.algolia.com</span><br><span class="hljs-attr">algolia_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">hits:</span><br>    <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 本地搜索</span><br><span class="hljs-comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span><br><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 如果是自动，则通过更改输入触发搜索。</span><br>  <span class="hljs-comment"># 如果手动，按回车键或搜索按钮触发搜索。</span><br>  <span class="hljs-attr">trigger:</span> <span class="hljs-string">auto</span><br>  <span class="hljs-comment"># 显示每篇文章的前n个结果，通过设置为-1显示所有结果</span><br>  <span class="hljs-attr">top_n_per_article:</span> <span class="hljs-number">1</span><br>  <span class="hljs-comment"># 将html字符串转义为可读字符串。</span><br>  <span class="hljs-attr">unescape:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 加载页面时预加载搜索数据。</span><br>  <span class="hljs-attr">preload:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 聊天服务</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/third-party-services/chat-services</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 在侧边栏打开指定聊天小部件的按钮。</span><br><span class="hljs-comment"># 首先，您需要启用并配置聊天服务。</span><br><span class="hljs-attr">chat:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">icon:</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-comment</span> <span class="hljs-comment"># 图标名称在字体Awesome，设置为false禁用图标。</span><br>  <span class="hljs-attr">text:</span> <span class="hljs-string">Chat</span> <span class="hljs-comment"># 按钮文本，改变它，如你所愿。</span><br><br><span class="hljs-comment"># Chatra 实时聊天支持</span><br><span class="hljs-comment"># For more information: https://chatra.com</span><br><span class="hljs-comment"># Dashboard: https://app.chatra.io/settings/general</span><br><span class="hljs-attr">chatra:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">async:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">id:</span> <span class="hljs-comment"># Visit Dashboard to get your ChatraID</span><br>  <span class="hljs-comment">#embed: # Unfinished experimental feature for developers. See: https://chatra.com/help/api/#injectto</span><br><br><span class="hljs-comment"># Tidio Support</span><br><span class="hljs-comment"># For more information: https://www.tidio.com</span><br><span class="hljs-comment"># Dashboard: https://www.tidio.com/panel/dashboard</span><br><span class="hljs-attr">tidio:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">key:</span> <span class="hljs-comment"># Public Key, get it from dashboard. See: https://www.tidio.com/panel/settings/developer</span><br><br><span class="hljs-comment"># Gitter Support</span><br><span class="hljs-comment"># For more information: https://gitter.im</span><br><span class="hljs-attr">gitter:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">room:</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 标签设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/tag-plugins/</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 注释标记(引导标注)</span><br><span class="hljs-attr">note:</span><br>  <span class="hljs-comment"># 注意标签样式值:</span><br>  <span class="hljs-comment">#  - simple    bootstrap callout old alert style. Default.</span><br>  <span class="hljs-comment">#  - modern    bootstrap callout new (v2-v3) alert style.</span><br>  <span class="hljs-comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br>  <span class="hljs-comment">#  - disabled  disable all CSS styles import of note tag.</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">simple</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br>  <span class="hljs-comment"># Offset也应用于标签标记变量。此选项可以与禁用的注释标记一起工作。</span><br>  <span class="hljs-attr">light_bg_offset:</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># Tabs tag</span><br><span class="hljs-attr">tabs:</span><br>  <span class="hljs-comment"># 使有长内容的标签的导航栏粘在顶部。</span><br>  <span class="hljs-attr">sticky:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">transition:</span><br>    <span class="hljs-attr">tabs:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">labels:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># PDF标记</span><br><span class="hljs-comment"># NexT将尝试本地加载pdf文件，如果失败，将使用pdf.js。</span><br><span class="hljs-comment"># 所以，你必须安装pdf.js的依赖，如果你想使用pdf标签，并使它可用于所有浏览器。</span><br><span class="hljs-comment"># Dependencies: https://github.com/next-theme/theme-next-pdf</span><br><span class="hljs-attr">pdf:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Default height</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-string">500px</span><br><br><span class="hljs-comment"># Mermaid tag</span><br><span class="hljs-attr">mermaid:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Available themes: default | dark | forest | neutral</span><br>  <span class="hljs-attr">theme:</span><br>    <span class="hljs-attr">light:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attr">dark:</span> <span class="hljs-string">dark</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># 动画设置</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># 使用animation .css让所有东西都动起来。</span><br><span class="hljs-comment"># For more information: https://animate.style</span><br><span class="hljs-attr">motion:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">async:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">transition:</span><br>    <span class="hljs-comment"># 所有可用的转换变量: https://theme-next.js.org/animate/</span><br>    <span class="hljs-attr">post_block:</span> <span class="hljs-string">fadeIn</span><br>    <span class="hljs-attr">post_header:</span> <span class="hljs-string">fadeInDown</span><br>    <span class="hljs-attr">post_body:</span> <span class="hljs-string">fadeInDown</span><br>    <span class="hljs-attr">coll_header:</span> <span class="hljs-string">fadeInLeft</span><br>    <span class="hljs-comment"># 只在 Pisces | Gemini 方案下可用.</span><br>    <span class="hljs-attr">sidebar:</span> <span class="hljs-string">fadeInUp</span><br><br><span class="hljs-comment"># 在页面加载期间在顶部的进度条。</span><br><span class="hljs-comment"># For more information: https://github.com/CodeByZach/pace</span><br><span class="hljs-attr">pace:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 所有可选颜色:</span><br>  <span class="hljs-comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">blue</span><br>  <span class="hljs-comment"># 所有可选主题:</span><br>  <span class="hljs-comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br>  <span class="hljs-comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">minimal</span><br><br><span class="hljs-comment"># 帆布缎带</span><br><span class="hljs-comment"># For more information: https://github.com/hustcc/ribbon.js</span><br><span class="hljs-attr">canvas_ribbon:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-number">300</span> <span class="hljs-comment"># The width of the ribbon</span><br>  <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.6</span> <span class="hljs-comment"># The transparency of the ribbon</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># The display level of the ribbon</span><br><br><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># CDN的设置</span><br><span class="hljs-comment"># See: https://theme-next.js.org/docs/advanced-settings/vendors</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-attr">vendors:</span><br>  <span class="hljs-comment"># The CDN provider of NexT internal scripts.</span><br>  <span class="hljs-comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span><br>  <span class="hljs-comment"># Warning: If you are using the latest master branch of NexT, please set `internal: local`</span><br>  <span class="hljs-attr">internal:</span> <span class="hljs-string">local</span><br>  <span class="hljs-comment"># The default CDN provider of third-party plugins.</span><br>  <span class="hljs-comment"># Available values: local | jsdelivr | unpkg | cdnjs | custom</span><br>  <span class="hljs-comment"># Dependencies for `plugins: local`: https://github.com/next-theme/plugins</span><br>  <span class="hljs-attr">plugins:</span> <span class="hljs-string">jsdelivr</span><br>  <span class="hljs-comment"># Custom CDN URL</span><br>  <span class="hljs-comment"># For example:</span><br>  <span class="hljs-comment"># custom_cdn_url: https://cdn.jsdelivr.net/npm/$&#123;npm_name&#125;@$&#123;version&#125;/$&#123;minified&#125;</span><br>  <span class="hljs-comment"># custom_cdn_url: https://cdnjs.cloudflare.com/ajax/libs/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;cdnjs_file&#125;</span><br>  <span class="hljs-attr">custom_cdn_url:</span><br><br><span class="hljs-comment"># Assets</span><br><span class="hljs-comment"># 使用CDN加速静态文件的交付</span><br><span class="hljs-comment"># js选项只在vendor .internal为本地时有效。</span><br><span class="hljs-attr">css:</span> <span class="hljs-string">css</span><br><span class="hljs-attr">js:</span> <span class="hljs-string">js</span><br><span class="hljs-attr">images:</span> <span class="hljs-string">images</span><br><br></code></pre></td></tr></table></figure><html><div class="box1">    <span class="leftline"></span>    <span class="text">更多内容请在评论区留言讨论</span>    <span class="rightline"></span></div></html>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
